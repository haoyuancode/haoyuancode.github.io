<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JVM</title>
    <link href="/2021/10/30/JVM/"/>
    <url>/2021/10/30/JVM/</url>
    
    <content type="html"><![CDATA[<p>学习中…,学完停更</p><span id="more"></span><h2 id="什么是JVM？"><a href="#什么是JVM？" class="headerlink" title="什么是JVM？"></a>什么是JVM？</h2><p><strong>jvm（java virtual machine，java虚拟机）</strong>是用来运行java字节码文件的，JDK包含JVM。只要遵循相应的规范，jvm可以运行除了除java之外的语言。</p><p>虚拟机就是 虚拟的一台计算机，模仿出来一台 物理的计算机。</p><p>JVM的位置是：硬件(cpu，内存…)→操作系统→JVM→字节码文件→用户，运行在操作系统之上，与硬件没有直接的交互</p><p><strong>好处：</strong></p><ul><li>自动内存管理，垃圾回收</li><li>跨平台运行</li><li>数组越界检查</li><li>多态</li><li>等等</li></ul><h3 id="JDK-JRE-JVM区别"><a href="#JDK-JRE-JVM区别" class="headerlink" title="JDK  JRE  JVM区别"></a><strong>JDK  JRE  JVM区别</strong></h3><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211031163401623.png" alt="image-20211031163401623"></p><p><strong>JVM是一个 空客，依次往上加上其他的条件才能进行开发</strong></p><hr><h2 id="JVM整体结构"><a href="#JVM整体结构" class="headerlink" title="JVM整体结构"></a>JVM整体结构</h2><p><strong>三层结构</strong></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211030153232297.png" alt="image-20211030153232297"></p><hr><h2 id="java代码的执行流程"><a href="#java代码的执行流程" class="headerlink" title="java代码的执行流程"></a>java代码的执行流程</h2><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211030153421630.png" alt="image-20211030153421630"></p><blockquote><p>第一次编译( java编译器)，称为前端编译，目的是生成字节码文件。第二次编译是在虚拟机中的编译，将字节码指令编译成机器指令。</p><p>热点代码：反复需要进行编译执行的代码。</p></blockquote><h2 id="JVM指令集架构"><a href="#JVM指令集架构" class="headerlink" title="JVM指令集架构"></a>JVM指令集架构</h2><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211030182707867.png" alt="image-20211030182707867"></p><h2 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h2><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>Program Counter Register，寄存器</p><ul><li><p>作用：</p><ul><li><strong>记住下一条jvm指令的执行地址</strong></li></ul></li><li><p>特点：</p><ul><li><p><strong>线程私有</strong></p><blockquote><p>比如线程1执行到指令10，程序计数器记录下一个指令是11，此时执行线程2，线程2 也同样由此操作，所以当返回线程1执行时，会从线程1的程序计数器中取指令去执行，也就是说，每个线程都有自己的程序计数器，线程之间互不干扰。</p></blockquote></li><li><p><strong>不会存在内存溢出</strong></p></li></ul></li></ul><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211031165330378.png" alt="image-20211031165330378"></p><blockquote><p>比如执行指令为0 时，会记录当前指令的下一个指令（3），解释器从程序计数器中获取指令（3）。</p></blockquote><h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><p>java virtual machine stacks</p><ul><li>每个线程运行时所分配的空间。</li></ul><blockquote><p>个人理解:</p><p>一个线程一个栈空间</p></blockquote><ul><li>每个栈由多个栈帧组成</li></ul><blockquote><p>个人理解:</p><p>一个栈空间内由许多个用户创建的方法</p></blockquote><ul><li>每个线程只能有一个活动栈帧（当前线程正在执行的方法）</li></ul><blockquote><p>个人理解:</p><p>当前正在执行的方法就是活动栈帧</p></blockquote><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><ol><li> 垃圾回收是否会涉及栈内存？</li></ol><blockquote><p>不会，垃圾回收涉及的是<strong>堆内存</strong></p><p>栈内存中只是一个个的栈帧，执行入栈和出栈的操作，和垃圾回收没有关系</p></blockquote><ol start="2"><li><p>栈内存分配越大越好么？</p><blockquote><p>不是，分配的内存越大，线程数越少</p><p>线程使用的是物理内存，假设物理内存有10M，一个线程分配1M，可运行10个线程，反之分配2M或者更多，只能运行5个线程或者更少</p></blockquote></li><li><p>方法内的局部变量是否线程安全</p><blockquote><p>如果变量是一个线程私有的，只在一个栈内进行使用，那就是安全的</p><p>如果多个线程调用一个公共的变量，那么就不安全，包括（return，形参）</p></blockquote></li></ol><h3 id="栈内存溢出"><a href="#栈内存溢出" class="headerlink" title="栈内存溢出"></a>栈内存溢出</h3><p>导致栈内存溢出的情况：</p><p><strong>更改栈内存参数：-Xss</strong></p><ul><li><p>栈帧过多</p><blockquote><p>比如栈空间只能入2个栈帧，结果跑来三个</p></blockquote></li><li><p>栈帧过大</p><blockquote><p>栈帧超过了栈总共的内存</p><p>一般不会出现这情况</p></blockquote></li></ul><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211101202932930.png" alt="image-20211101202932930"></p><p>虚拟机调用<strong>本地方法</strong>时，提供的内存空间。</p><blockquote><p> 本地方法比如：基础类库、Object、</p></blockquote><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>Heap，通过 <strong>new 关键字</strong>创建的对象都会使用<strong>堆内存</strong></p><p><strong>更改堆空间内存参数：-Xmx，</strong>然乎加上想要分配的空间</p><p>特点：</p><ul><li><p>线程是共享的，需要考虑线程安全问题</p></li><li><p>有垃圾回收机制</p><blockquote><p>堆中不在引用的对象，就会被当成垃圾，被自动回收</p></blockquote></li></ul><h4 id="堆内存溢出"><a href="#堆内存溢出" class="headerlink" title="堆内存溢出"></a>堆内存溢出</h4><ul><li>创建对象过多，造成堆空间不足</li></ul><h4 id="堆内存诊断"><a href="#堆内存诊断" class="headerlink" title="堆内存诊断"></a>堆内存诊断</h4><ol><li>jps工具<ul><li>查看当前系统中有哪些java进程</li></ul></li><li>jmap工具<ul><li>查看堆内存占用情况  </li><li>使用命令：jps -heap 进程id</li></ul></li><li>jconsloe工具<ul><li>图形界面，多功能检测，可以连续检测</li></ul></li><li>jvirsualvm</li></ol><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211101210518391.png" alt="image-20211101210518391"></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211101210859617.png" alt="image-20211101210859617"></p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211102154153638.png" alt="image-20211102154153638"></p><blockquote><p>存放与类有关的信息，比如方法、参数</p><p>java1.8版本，方法区使用的是本地内存</p></blockquote><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211104161633634.png" alt="image-20211104161633634"></p><h4 id="方法区内存溢出"><a href="#方法区内存溢出" class="headerlink" title="方法区内存溢出"></a>方法区内存溢出</h4><p>设置元空间内存大小：-XX：MaxMetaspaceSize=</p><p><strong>1.8版本之后产生问题是：元空间内存溢出，1.8之前是永久代内存溢出</strong></p><p>产生原因：</p><ul><li>生成过多的类</li><li>spring、mybatis动态生成和动态加载类</li></ul><p>错误信息：<strong>java.lang.OutOfMemoryError: Metaspace</strong></p><h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><p>就是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量（字符串、整数、布尔类型）等信息</p><p><strong>举例：</strong><br><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211104202242336.png" alt="image-20211104202242336"></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211104202935917.png" alt="image-20211104202935917"></p><blockquote><p>黄色箭头表示编译出字节码文件</p><p>绿色表示文件的基本信息</p><p>橙红色就是<strong>常量池</strong></p><p>黄色处的括号表示类中的方法</p><p>深褐色表示虚拟机加载的指令，需要从常量池中查找的地址（#2，#3….）</p></blockquote><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>当类被加载时，他的常量池信息会放入运行时常量池，并且把里边的地址转换为真实的内存中的地址</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211104204707358.png" alt="image-20211104204707358"></p><blockquote><p>将这些地址转换成内存中的地址</p></blockquote><h4 id="StringTable"><a href="#StringTable" class="headerlink" title="StringTable"></a>StringTable</h4><p>又叫串池</p><p>特征：</p><ul><li>常量池中的字符串只是符号，<strong>用到时才变成对象</strong></li><li>利用串池机制，来<strong>避免重复创建字符串对象</strong></li><li>字符串<strong>变量拼接的原理是StringBuilder</strong> （1.8）</li><li>字符串<strong>常量拼接的原理是编译器优化</strong></li><li>使用<strong>intern方法</strong>，主动将串池中还没有的字符串对象放入串池</li></ul><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211107164550452.png" alt="image-20211107164550452"></p><blockquote><p>a,b,ab,此时只是常量池中的符号，还不是java字符串对象</p><p>执行到下边的指令, </p><p>ldc #2 才把符号a变成了字符串对象</p><p> ldc #3 才把符号b变成了字符串对象</p><p> ldc #4 才把符号ab变成了字符串对象</p><p>依次将字符串a、b、ab放进串池中：StringTable[a,b,ab],<strong>原理是：hashtable，不能扩容。</strong></p></blockquote><p><strong>拼接变量：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">String s1 = <span class="hljs-string">&quot;a&quot;</span>;<br>String s2 = <span class="hljs-string">&quot;b&quot;</span>;<br>String s3 = <span class="hljs-string">&quot;ab&quot;</span>;<br>String s4 = s1 + s2; <span class="hljs-comment">//拼接两个变量</span><br>System.out.println(s3==s4);  <span class="hljs-comment">//结果为false</span><br></code></pre></td></tr></table></figure><p>反编译结果： <strong>注意第9行的new</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">Code:<br>      stack=<span class="hljs-number">3</span>, locals=<span class="hljs-number">5</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: ldc           #<span class="hljs-number">2</span>                  <span class="hljs-comment">// String a</span><br>         <span class="hljs-number">2</span>: astore_1<br>         <span class="hljs-number">3</span>: ldc           #<span class="hljs-number">3</span>                  <span class="hljs-comment">// String b</span><br>         <span class="hljs-number">5</span>: astore_2<br>         <span class="hljs-number">6</span>: ldc           #<span class="hljs-number">4</span>                  <span class="hljs-comment">// String ab</span><br>         <span class="hljs-number">8</span>: astore_3<br>         <span class="hljs-number">9</span>: <span class="hljs-keyword">new</span>           #<span class="hljs-number">5</span>                  <span class="hljs-comment">// class java/lang/StringBuilder</span><br>        <span class="hljs-number">12</span>: dup<br>        <span class="hljs-number">13</span>: invokespecial #<span class="hljs-number">6</span>                  <span class="hljs-comment">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br>        <span class="hljs-number">16</span>: aload_1<br>        <span class="hljs-number">17</span>: invokevirtual #<span class="hljs-number">7</span>                  <span class="hljs-comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br>        <span class="hljs-number">20</span>: aload_2<br>        <span class="hljs-number">21</span>: invokevirtual #<span class="hljs-number">7</span>                  <span class="hljs-comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br>        <span class="hljs-number">24</span>: invokevirtual #<span class="hljs-number">8</span>                  <span class="hljs-comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br>        <span class="hljs-number">27</span>: astore        <span class="hljs-number">4</span><br>        <span class="hljs-number">29</span>: getstatic     #<span class="hljs-number">9</span>                  <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>        <span class="hljs-number">32</span>: aload_3<br>        <span class="hljs-number">33</span>: aload         <span class="hljs-number">4</span><br>        <span class="hljs-number">35</span>: if_acmpne     <span class="hljs-number">42</span><br>        <span class="hljs-number">38</span>: iconst_1<br>        <span class="hljs-number">39</span>: goto          <span class="hljs-number">43</span><br>        <span class="hljs-number">42</span>: iconst_0<br>        <span class="hljs-number">43</span>: invokevirtual #<span class="hljs-number">10</span>                 <span class="hljs-comment">// Method java/io/PrintStream.println:(Z)V</span><br>        <span class="hljs-number">46</span>: <span class="hljs-keyword">return</span><br><br></code></pre></td></tr></table></figure><blockquote><p>因为s4是new出来的一个新对象，虽然s3和s4的值相同，但s4存放在堆中，s3在串池中。</p></blockquote><p><strong>使用拼接字符串常量来创建对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pool</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s1 = <span class="hljs-string">&quot;a&quot;</span>;<br>        String s2 = <span class="hljs-string">&quot;b&quot;</span>;<br>        String s3 = <span class="hljs-string">&quot;ab&quot;</span>;<br>        String s4 = s1 + s2;<br>        String s5 =<span class="hljs-string">&quot;a&quot;</span> + <span class="hljs-string">&quot;b&quot;</span>; <span class="hljs-comment">//拼接常量</span><br>        System.out.println(s5==s3); <span class="hljs-comment">//结果为true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>反编译结果: <strong>注意第29行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">Code:<br>     stack=<span class="hljs-number">3</span>, locals=<span class="hljs-number">6</span>, args_size=<span class="hljs-number">1</span><br>        <span class="hljs-number">0</span>: ldc           #<span class="hljs-number">2</span>                  <span class="hljs-comment">// String a</span><br>        <span class="hljs-number">2</span>: astore_1<br>        <span class="hljs-number">3</span>: ldc           #<span class="hljs-number">3</span>                  <span class="hljs-comment">// String b</span><br>        <span class="hljs-number">5</span>: astore_2<br>        <span class="hljs-number">6</span>: ldc           #<span class="hljs-number">4</span>                  <span class="hljs-comment">// String ab</span><br>        <span class="hljs-number">8</span>: astore_3<br>        <span class="hljs-number">9</span>: <span class="hljs-keyword">new</span>           #<span class="hljs-number">5</span>                  <span class="hljs-comment">// class java/lang/StringBuilder</span><br>       <span class="hljs-number">12</span>: dup<br>       <span class="hljs-number">13</span>: invokespecial #<span class="hljs-number">6</span>                  <span class="hljs-comment">// Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br>       <span class="hljs-number">16</span>: aload_1<br>       <span class="hljs-number">17</span>: invokevirtual #<span class="hljs-number">7</span>                  <span class="hljs-comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br>       <span class="hljs-number">20</span>: aload_2<br>       <span class="hljs-number">21</span>: invokevirtual #<span class="hljs-number">7</span>                  <span class="hljs-comment">// Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br>       <span class="hljs-number">24</span>: invokevirtual #<span class="hljs-number">8</span>                  <span class="hljs-comment">// Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br>       <span class="hljs-number">27</span>: astore        <span class="hljs-number">4</span><br>       <span class="hljs-number">29</span>: ldc           #<span class="hljs-number">4</span>                  <span class="hljs-comment">// String ab</span><br>       <span class="hljs-number">31</span>: astore        <span class="hljs-number">5</span><br>       <span class="hljs-number">33</span>: getstatic     #<span class="hljs-number">9</span>                  <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>       <span class="hljs-number">36</span>: aload         <span class="hljs-number">5</span><br>       <span class="hljs-number">38</span>: aload_3<br>       <span class="hljs-number">39</span>: if_acmpne     <span class="hljs-number">46</span><br>       <span class="hljs-number">42</span>: iconst_1<br>       <span class="hljs-number">43</span>: goto          <span class="hljs-number">47</span><br>       <span class="hljs-number">46</span>: iconst_0<br>       <span class="hljs-number">47</span>: invokevirtual #<span class="hljs-number">10</span>                 <span class="hljs-comment">// Method java/io/PrintStream.println:(Z)V</span><br>       <span class="hljs-number">50</span>: <span class="hljs-keyword">return</span><br><br></code></pre></td></tr></table></figure><blockquote><p>s5拼接的是常量’a’和’b’，因为是常量，javac在编译期间会进行优化，串池中已经存在有”ab“，所以直接在串池中找到ab即可</p><p>s4=s1 + s2；拼接的是变量，s1和s2的值不能确定是一成不变的，所以会使用StringBuilder来创建一个新对象存放在堆中。</p></blockquote><h4 id="StringTable垃圾回收"><a href="#StringTable垃圾回收" class="headerlink" title="StringTable垃圾回收"></a>StringTable垃圾回收</h4><p>StringTable在内存紧张时，会发生垃圾回收</p><h4 id="StringTable调优"><a href="#StringTable调优" class="headerlink" title="StringTable调优"></a>StringTable调优</h4><ul><li>因为StringTable是由HashTable实现的，所以可以<strong>适当增加HashTable桶的个数</strong>，来减少字符串放入串池所需要的时间</li></ul><blockquote><p>-XX:StringTableSize=xxxx</p></blockquote><ul><li><p>考虑将字符串对象是否入池</p></li><li><p>可以通过<strong>intern方法减少重复入池</strong></p><blockquote><p>相同的信息使用intern来判断是否已经存在串池中，已经存在就没必要在存了</p></blockquote></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.bilibili.com/video/BV1yE411Z7AP?spm_id_from=333.1007.top_right_bar_window_history.content.click">黑马程序员JVM完整教程，全网超高评价，全程干货不拖沓</a> 占比98%</p><p><a href="https://www.bilibili.com/video/BV1PJ411n7xZ?p=14&spm_id_from=333.788.top_right_bar_window_history.content.click">尚硅谷宋红康JVM全套教程（详解java虚拟机）</a> 占比 2%</p>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java虚拟机</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2021/08/30/Redis/"/>
    <url>/2021/08/30/Redis/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><p>NoSQL支持<strong>高并发，海量数据读写，对数据高可扩展性的一种非关系型数据库，以key-value来存储。</strong>NoSQL只是一种总称，比如Redis就是一种NoSQL型数据库。<span id="more"></span></p><p><strong>以下都是目前主流的NoSQL数据库。</strong></p><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>支持数据的持久化，除了k-v模式，还支持多种昂数据结构的存储，比如list、set、hash等，一般作为<strong>缓存数据库辅助持久化</strong>的数据库</p><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><p>高性能、开源、模式自由的文档型数据库，数据都在内存中，如果内存不足，会把内存中的数据保存到硬盘中。支持二进制数据和大型对象等。</p><h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><p>以下安装步骤是基于centos7</p><ol><li><p>查看是否安装gcc编译器，如果没有，则安装c语言的编译环境</p><blockquote><p>gcc –version 如果提示有版本信息，则不需要安装c语言编译环境</p><p>安装命令:</p><p>yum install centos-release-scl scl-utils-build</p><p>yum install -y devtoolset-8-toolchain</p><p>scl enable devtoolset-8 bash</p><p>最后 gcc –version ,查看是否提示版本信息</p></blockquote></li><li><p>下载Redis压缩包,<a href="https://redis.io/">https://redis.io/</a></p><blockquote><p>下载完后使用xshell或者xftp远程传到虚拟机上</p></blockquote></li><li><p>在虚拟机上解压redis压缩包，并安装</p><blockquote><p>解压命令：</p><p>tar -zxvf redis….</p><p>解压后进入解压好的目录进行编译</p><p>cd redis…</p><p>make</p><p>编译完成后安装</p><p>make install</p><p>安装的目录在 /usr/local/bin</p></blockquote></li><li><p>Redis目录说明</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/Redis%E7%9B%AE%E5%BD%95.PNG" alt="Redis目录"></p><blockquote><p>从上往下依次是：</p><ul><li>性能测试工具，测试机器性能如何</li><li>修复有问题的aof文件</li><li>修复有问题的rdb文件</li><li>客户端操作入口</li><li>redis集群使用</li><li>redis服务器启动命令</li></ul></blockquote></li></ol><h3 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h3><p>有两种启动方式：</p><ol><li><p>前台启动</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/redis%E5%89%8D%E5%8F%B0%E5%90%AF%E5%8A%A8.PNG" alt="redis前台启动"></p><blockquote><p>在终端输入redis-server启动，启动后不能进行其他命令的操作，而且将此窗口关闭后，redis也会关闭。</p><p>不推荐</p></blockquote></li><li><p>后台启动</p><blockquote><p>进入redis目录，找到redis.conf配置文件</p></blockquote><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210831143301573.png" alt="image-20210831143301573"></p><blockquote><p>将daemonize的值设置改为yes</p></blockquote><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210831143156830.png" alt="image-20210831143156830"></p><blockquote><p>然后进入/usr/local/bin目录下，使用命令启动，命令后要加上redis配置文件的地址，最后查看进程是否开启成功，<strong>6379</strong></p></blockquote><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210831143755650.png" alt="image-20210831143755650"></p></li></ol><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><ol><li>杀死redis当前的进程</li><li>redis-cli shutdown</li></ol><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>Redis端口号是6379，默认有16个数据库，下标从0开始，默认开始使用就是0号数据库。</p><p>select 0-15，来切换数据库。</p><p>redis使用的是<strong>单线程+多路io复用</strong></p><h2 id="key键的操作"><a href="#key键的操作" class="headerlink" title="key键的操作"></a>key键的操作</h2><p>常用操作：</p><blockquote><p>keys *查看当前库所有key  (匹配：keys *1)</p><p>exists key名，判断某个key是否存在</p><p>type key 名，查看你的key是什么类型</p><p>del key  名  删除指定的key数据</p><p>unlink key名  根据value选择非阻塞删除</p><p>仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。</p><p>expire key 10  10秒钟：为给定的key设置过期时间</p><p>ttl key 查看还有多少秒过期，-1表示永不过期，-2表示已过期</p><p>select命令切换数据库</p><p>dbsize查看当前数据库的key的数量</p><p>flushdb清空当前库</p><p>flushall通杀全部库</p></blockquote><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>String是Redis最基本的类型，一个key对应一个value.<br>String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。<br>String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>set  <key><value> 添加键值对</p><p>get  <key> 查询对应键值</p><p>append <key><value> 将给定的<value> 追加到原值的末尾</p><p>strlen <key>获得值的长度</p><p>setnx <key><value>只有在 key 不存在时  设置 key 的值</p><p>incr <key></p><p>将 key 中储存的数字值增1</p><p>只能对数字值操作，如果为空，新增值为1</p><p>decr <key></p><p>将 key 中储存的数字值减1</p><p>只能对数字值操作，如果为空，新增值为-1</p><p>incrby / decrby <key>&lt;步长&gt; 将 key 中储存的数字值增减。自定义步长。</p><p>mset <key1><value1><key2><value2> ….. </p><p>同时设置一个或多个 key-value对 </p><p>mget <key1><key2><key3> …..</p><p>同时获取一个或多个 value </p><p>msetnx <key1><value1><key2><value2> ….. </p><p>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</p><p>getrange <key>&lt;起始位置&gt;&lt;结束位置&gt;</p><p>获得值的范围，类似java中的substring，<strong>前包，后包</strong></p><p>setrange <key>&lt;起始位置&gt;<value></p><p>用 <value> 覆写<key>所储存的字符串值，从&lt;起始位置&gt;开始(<strong>索引从0****开始</strong>)。</p><p>setex <key>&lt;过期时间&gt;<value></p><p>设置键值的同时，设置过期时间，单位秒。</p><p>getset <key><value></p><p>以新换旧，设置了新值同时获得旧值。</p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>Redis 列表是简单的字符串列表，按照插入顺序排序。添加一个元素到列表的头部（左边）或者尾部（右边）<br>它的底层实际是个双向链表</p><h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><p>lpush/rpush <key><value1><value2><value3> …. 从左边/右边插入一个或多个值。</p><blockquote><p>例如从左往右插入 1 2 3 ，存入的结果是 3 2 1 .因为1存入后，2接着从左往右存入，1会向右挪一位。</p></blockquote><p>lpop/rpop <key>从左边/右边吐出一个值。值在键在，值光键亡。</p><p>rpoplpush <key1><key2>从<key1>列表右边吐出一个值，插到<key2>列表左边。</p><p>lrange <key><start><stop></p><p>按照索引下标获得元素(从左到右)</p><p>lrange mylist 0 -1  0左边第一个，-1右边第一个，（0-1表示获取所有）</p><p>lindex <key><index>按照索引下标获得元素(从左到右)</p><p>llen <key>获得列表长度 </p><p>linsert <key> before <value><newvalue>在<value>的后面插入<newvalue>插入值</p><p>lrem <key><n><value>从左边删除n个value(从左到右)</p><p>lset<key><index><value>将列表key下标为index的值替换成value</p><h3 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h3><p>set是可以<strong>自动排重</strong>的，需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择。<br>Set是string类型的<strong>无序集合</strong>。</p><h4 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h4><p>sadd <key><value1><value2> ….. </p><p>将一个或多个 member 元素加入到集合 key 中，已经存在的 member 元素将被忽略</p><p>smembers <key>取出该集合的所有值。</p><p>sismember <key><value>判断集合<key>是否为含有该<value>值，有1，没有0</p><p>scard<key>返回该集合的元素个数。</p><p>srem <key><value1><value2> …. 删除集合中的某个元素。</p><p>spop <key><strong>随机从该集合中吐出一个值。</strong></p><p>srandmember <key><n>随机从该集合中取出n个值。不会从集合中删除 。</p><p>smove <source><destination>value把集合中一个值从一个集合移动到另一个集合</p><p>sinter <key1><key2>返回两个集合的交集元素。</p><p>sunion <key1><key2>返回两个集合的并集元素。</p><p>sdiff <key1><key2>返回两个集合的<strong>差集</strong>元素(key1中的，不包含key2中的)</p><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>hash是一个string类型的f<strong>ield和value</strong>的映射表，hash特别<strong>适合用于存储对象。</strong></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210831164049891.png" alt="image-20210831164049891"></p><p>该图存储方式为：user：01 name tobe age 20 </p><h4 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h4><p>hset <key><field><value>给<key>集合中的 <field>键赋值<value></p><p>hget <key1><field>从<key1>集合<field>取出 value </p><p>hmset <key1><field1><value1><field2><value2>… 批量设置hash的值</p><p>hexists<key1><field>查看哈希表 key 中，给定域 field 是否存在。 </p><p>hkeys <key>列出该hash集合的所有field</p><p>hvals <key>列出该hash集合的所有value</p><p>hincrby <key><field><increment>为哈希表 key 中的域 field 的值加上增量 1  -1</p><p>hsetnx <key><field><value>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在 .</p><h3 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h3><p><strong>有序集合zset</strong>与普通集合set非常相似，是一个<strong>没有重复元素</strong>的字符串集合<br>每个成员都关联了一个<strong>评分（score）</strong>,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复了 。</p><p>比如 zadd top 100 java 200 python 300 c++,就是说top里边有java python和c++三个值，他们分别对应了一个各自的评分</p><h4 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h4><p>zadd <key><score1><value1><score2><value2>…</p><p>将一个或多个 member 元素及其 score 值加入到有序集 key 当中。</p><p><strong>zrange <key><start><stop> [WITHSCORES]</strong>  </p><p>返回有序集 key 中，下标在<start><stop>之间的元素</p><p>带WITHSCORES，可以让分数一起和值返回到结果集。</p><p>zrangebyscore key minmax [withscores] [limit offset count]</p><p>返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。 </p><p>zrevrangebyscore key maxmin [withscores] [limit offset count]        </p><p>同上，改为从大到小排列。 </p><p>zincrby <key><increment><value>   为元素的score加上增量</p><p>zrem <key><value>删除该集合下，指定值的元素</p><p>zcount <key><min><max>统计该集合，分数区间内的元素个数 </p><p>zrank <key><value>返回该值在集合中的排名，从0开始</p><h2 id="新数据类型"><a href="#新数据类型" class="headerlink" title="新数据类型"></a>新数据类型</h2><h3 id="Geospatial地理位置"><a href="#Geospatial地理位置" class="headerlink" title="Geospatial地理位置"></a>Geospatial地理位置</h3><p>GEO，Geographic，地理信息的缩写。可以用来记录城市的经纬度，然后判断城市之间的距离<br>具体应用：比如 附近的人，朋友圈的定位，两个人之间的距离等</p><h4 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a>常用的命令</h4><ol><li><p>geoadd</p><blockquote><p>格式</p><p>geoadd<key>&lt; longitude&gt;<latitude><member> [longitude latitude member…]  添加地理位置（经度，纬度，名称）</p></blockquote><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210901165238662.png" alt="image-20210901165238662"></p><blockquote><p>实例</p><p>geoadd china:city 121.47 31.23 shanghai</p><p>geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shenzhen 116.38 39.90 beijing</p></blockquote><p> <img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210901165256076.png" alt="image-20210901165256076"></p><p>一般会下载城市数据，直接通过 Java 程序一次性导入。</p><p>已经添加的数据，是无法再次往里面添加的。</p></li><li><p>geopos </p><blockquote><p>geopos <key><member> [member…] 获得指定地区的坐标值</p><p>实例</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210901165550455.png" alt="image-20210901165550455"></p></blockquote></li><li><p>geodist</p><blockquote><p>geodist<key><member1><member2> [m|km|ft|mi ] 获取两个位置之间的直线距离</p><p>实例</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210901165626963.png" alt="image-20210901165626963"></p><p>单位：</p><p>m 表示单位为米[默认值]。</p><p>km 表示单位为千米。</p><p>mi 表示单位为英里。</p><p>ft 表示单位为英尺。</p><p>如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位</p></blockquote></li><li><p>georadius</p><blockquote><p>georadius<key>&lt; longitude&gt;<latitude>radius m|km|ft|mi  以给定的经纬度为中心，找出某一半径内的元素</p><p>实例</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210901165723281.png" alt="image-20210901165723281"></p></blockquote></li></ol><h3 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h3><p>可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。<br>如果要表示的信息只有两种，比如 登录、未登录，打卡、未打卡，记录考勤等，都可以使用bitmaps来记录，而且占用空间小。</p><h4 id="常用命令-5"><a href="#常用命令-5" class="headerlink" title="常用命令"></a>常用命令</h4><ol><li><p>setbit</p><blockquote><p>setbit<key><offset><value>设置Bitmaps中某个偏移量的值（0或1）</p><p>实例</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210901170335542.png" alt="image-20210901170335542"></p><p>一周七天的打卡记录，1代表打开，0代表未打卡。</p></blockquote></li><li><p>getbit</p><blockquote><p>getbit<key><offset>获取Bitmaps中某个偏移量的值</p><p>实例</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210901170621083.png" alt="image-20210901170621083"></p><p>查看某一天是否打卡</p></blockquote></li><li><p>bitcount</p><blockquote><p>用来统计<strong>字符串</strong>被设置为1的bit数</p><p>bitcount<key>[start end] 统计字符串从start字节到end字节比特值为1的数量</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210901170849717.png" alt="image-20210901170849717"></p><p>统计一周的打卡情况</p></blockquote></li></ol><h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><p> HyperLogLog 只会根据输入元素来计算基数，应用场景比如统计网站的访问个数。</p><p>什么是基数，{1，2，3，4，5}，{2，3，4，5}，基数是{1}<br>相同的数据作为一个数据来使用。比如同一个IP地址访问多次你的网站，作为一次用户访问记录就好。</p><h4 id="常用命令-6"><a href="#常用命令-6" class="headerlink" title="常用命令"></a>常用命令</h4><ol><li><p>pfadd</p><blockquote><p>pfadd <key>&lt; element&gt; [element …]  添加指定元素到 HyperLogLog 中</p><p>实例</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210901171511129.png" alt="image-20210901171511129"></p><p>第三次添加redis返回的结果是0，添加不进去了，因为已经有redis了</p></blockquote></li><li><p>pfcount</p><blockquote><p>pfcount<key> [key …] 计算HLL的近似基数，可以计算多个HLL，比如用HLL存储每天的UV，计算一周的UV可以使用7天的UV合并计算即可</p><p>实例</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210901171610779.png" alt="image-20210901171610779"></p></blockquote></li><li><p>pfmerge</p><blockquote><p>pfmerge<destkey><sourcekey> [sourcekey …] 将一个或多个HLL合并后的结果存储在另一个HLL中，比如每月活跃用户可以使用每天的活跃用户来合并计算可得</p><p>实例</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210901171657313.png" alt="image-20210901171657313"></p></blockquote></li></ol><h2 id="发布和订阅"><a href="#发布和订阅" class="headerlink" title="发布和订阅"></a>发布和订阅</h2><p>发布订阅 (pub/sub) 是一种消息通信模式：<strong>发送者 (pub)</strong> 发送消息，<strong>订阅者 (sub)</strong> 接收消息。</p><p>举例：创建两个连接，一个作为发布者，一个作为订阅者</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210901152535448.png" alt="image-20210901152535448"></p><p>实验室作为订阅者，实验室test作为发布者</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210901152647033.png" alt="image-20210901152647033"></p><p>实验室使用redis客户端来订阅一个频道，使用命令<strong>subscribe channel1</strong></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210901152821471.png" alt="image-20210901152821471"></p><p>实验室test作为发布者使用<strong>publish channel1</strong> 发送一个消息 hello</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>redis没有原子性，redis单条命令保存原子性。</p><p>redis一个事务中所有的命令都会被序列化，开启事务后，命令并没有直接执行，而是等到执行exec命令后才会按照顺序执行。</p><h3 id="开启事务"><a href="#开启事务" class="headerlink" title="开启事务"></a>开启事务</h3><p>举例：</p><p><img src="C:\Users\22102\AppData\Roaming\Typora\typora-user-images\image-20210901174246844.png"></p><blockquote><p>multi 开启事务，然后写具体的操作命令，可以看到写完命令后的返回结果是queued（队列），exec按顺序执行队列中的命令</p></blockquote><h3 id="放弃事务"><a href="#放弃事务" class="headerlink" title="放弃事务"></a>放弃事务</h3><p>举例：</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210901174704558.png" alt="image-20210901174704558"></p><blockquote><p>放弃事务使用discard，可以看到get k4的返回值为null，因为上边的一组事务并没有被执行。</p></blockquote><h3 id="编译型错误"><a href="#编译型错误" class="headerlink" title="编译型错误"></a>编译型错误</h3><p>举例</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210901175124140.png" alt="image-20210901175124140"></p><blockquote><p>因为没有这个getset语法而导致的错误，在事务中会提示出来，如果继续使用exec执行事务，则一组事务中的命令都不会执行</p></blockquote><h3 id="运行时错误"><a href="#运行时错误" class="headerlink" title="运行时错误"></a>运行时错误</h3><p>例如java程序中的除0错误，编译是没有问题，但运行时就会报错</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210901175647562.png" alt="image-20210901175647562"></p><blockquote><p>设置字符串k1，然后将字符串加1，编译时没有问题，但因为字符串不能加1，在执行中就会出错。<br>但其他的命令还会执行，只是不去执行这一个出错的命令</p></blockquote><h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><p>应用举例：一个银行卡中有100块钱，A线程和B线程获取到银行卡的余额时都是100，两个人都上了一把乐观锁。<br>此时A花了60块钱，银行卡里现在只剩40，但B线程获取时显示的是100，此时B线程想花90块钱，当B提交付钱时会显示null，失败</p><p><strong>因为当数据发生变化时，只要被监控的锁中一切命令，都会失效</strong></p><p>具体实例：</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210901181731213.png" alt="image-20210901181731213"></p><blockquote><p><strong>watch</strong> 开启锁。</p><p>此时并没有exec执行事务</p></blockquote><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210901181907285.png" alt="image-20210901181907285"></p><blockquote><p>因为监控的money发生了变化，执行任何操作都会返回null，会失效</p></blockquote><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><p>使用java操作redis的中间件</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li><p>创建java项目，导入jedis依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;redis.clients&lt;/groupId&gt;<br>    &lt;artifactId&gt;jedis&lt;/artifactId&gt;<br>    &lt;version&gt;3.7.0&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>测试连接是否成功,并操作redis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    Jedis jedis = <span class="hljs-keyword">new</span> Jedis(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">6379</span>);<br>    <span class="hljs-comment">//测试连接是否成功，控制台输出PONG证明连接成功</span><br>    System.out.println(jedis.ping());<br>    <span class="hljs-comment">//以下操作和在linux下使用命令操作一样</span><br>    jedis.set(<span class="hljs-string">&quot;key&quot;</span>,<span class="hljs-string">&quot;Tobe&quot;</span>);<br>    jedis.flushDB();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>操作命令和数据类型类中的命令一样，只是通过java使用dedis操作redis后变成了一个个的方法</p></blockquote></li></ol><h4 id="操作key"><a href="#操作key" class="headerlink" title="操作key"></a>操作key</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">jedis.set(<span class="hljs-string">&quot;k1&quot;</span>, <span class="hljs-string">&quot;v1&quot;</span>);<br>jedis.set(<span class="hljs-string">&quot;k2&quot;</span>, <span class="hljs-string">&quot;v2&quot;</span>);<br>jedis.set(<span class="hljs-string">&quot;k3&quot;</span>, <span class="hljs-string">&quot;v3&quot;</span>);<br>Set&lt;String&gt; keys = jedis.keys(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.println(keys.size());<br><span class="hljs-keyword">for</span> (String key : keys) &#123;<br>System.out.println(key);<br>&#125;<br>System.out.println(jedis.exists(<span class="hljs-string">&quot;k1&quot;</span>));<br>System.out.println(jedis.ttl(<span class="hljs-string">&quot;k1&quot;</span>));                <br>System.out.println(jedis.get(<span class="hljs-string">&quot;k1&quot;</span>));<br></code></pre></td></tr></table></figure><h4 id="操作String"><a href="#操作String" class="headerlink" title="操作String"></a>操作String</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">jedis.mset(<span class="hljs-string">&quot;str1&quot;</span>,<span class="hljs-string">&quot;v1&quot;</span>,<span class="hljs-string">&quot;str2&quot;</span>,<span class="hljs-string">&quot;v2&quot;</span>,<span class="hljs-string">&quot;str3&quot;</span>,<span class="hljs-string">&quot;v3&quot;</span>);<br>System.out.println(jedis.mget(<span class="hljs-string">&quot;str1&quot;</span>,<span class="hljs-string">&quot;str2&quot;</span>,<span class="hljs-string">&quot;str3&quot;</span>));<br></code></pre></td></tr></table></figure><h4 id="操作List"><a href="#操作List" class="headerlink" title="操作List"></a>操作List</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = jedis.lrange(<span class="hljs-string">&quot;mylist&quot;</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (String element : list) &#123;<br>System.out.println(element);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="操作set"><a href="#操作set" class="headerlink" title="操作set"></a>操作set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">jedis.sadd(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;order01&quot;</span>);<br>jedis.sadd(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;order02&quot;</span>);<br>jedis.sadd(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;order03&quot;</span>);<br>jedis.sadd(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;order04&quot;</span>);<br>Set&lt;String&gt; smembers = jedis.smembers(<span class="hljs-string">&quot;orders&quot;</span>);<br><span class="hljs-keyword">for</span> (String order : smembers) &#123;<br>System.out.println(order);<br>&#125;<br>jedis.srem(<span class="hljs-string">&quot;orders&quot;</span>, <span class="hljs-string">&quot;order02&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="操作hash"><a href="#操作hash" class="headerlink" title="操作hash"></a>操作hash</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">jedis.hset(<span class="hljs-string">&quot;hash1&quot;</span>,<span class="hljs-string">&quot;userName&quot;</span>,<span class="hljs-string">&quot;lisi&quot;</span>);<br>System.out.println(jedis.hget(<span class="hljs-string">&quot;hash1&quot;</span>,<span class="hljs-string">&quot;userName&quot;</span>));<br>Map&lt;String,String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String,String&gt;();<br>map.put(<span class="hljs-string">&quot;telphone&quot;</span>,<span class="hljs-string">&quot;13810169999&quot;</span>);<br>map.put(<span class="hljs-string">&quot;address&quot;</span>,<span class="hljs-string">&quot;atguigu&quot;</span>);<br>map.put(<span class="hljs-string">&quot;email&quot;</span>,<span class="hljs-string">&quot;abc@163.com&quot;</span>);<br>jedis.hmset(<span class="hljs-string">&quot;hash2&quot;</span>,map);<br>List&lt;String&gt; result = jedis.hmget(<span class="hljs-string">&quot;hash2&quot;</span>, <span class="hljs-string">&quot;telphone&quot;</span>,<span class="hljs-string">&quot;email&quot;</span>);<br><span class="hljs-keyword">for</span> (String element : result) &#123;<br>System.out.println(element);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="操作zset"><a href="#操作zset" class="headerlink" title="操作zset"></a>操作zset</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">jedis.zadd(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">100d</span>, <span class="hljs-string">&quot;z3&quot;</span>);<br>jedis.zadd(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">90d</span>, <span class="hljs-string">&quot;l4&quot;</span>);<br>jedis.zadd(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">80d</span>, <span class="hljs-string">&quot;w5&quot;</span>);<br>jedis.zadd(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">70d</span>, <span class="hljs-string">&quot;z6&quot;</span>);<br> <br>Set&lt;String&gt; zrange = jedis.zrange(<span class="hljs-string">&quot;zset01&quot;</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (String e : zrange) &#123;<br>System.out.println(e);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Spring-boot整合"><a href="#Spring-boot整合" class="headerlink" title="Spring boot整合"></a>Spring boot整合</h2><p>在pom中引入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;!-- redis --&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br><br>&lt;!-- spring2.X集成redis所需common-pool2--&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;<br>&lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;<br>&lt;version&gt;2.6.0&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>application.properties配置redis配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#Redis服务器地址</span><br><span class="hljs-meta">spring.redis.host</span>=<span class="hljs-string">192.168.140.136</span><br><span class="hljs-comment">#Redis服务器连接端口</span><br><span class="hljs-meta">spring.redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-comment">#Redis数据库索引（默认为0）</span><br><span class="hljs-meta">spring.redis.database</span>= <span class="hljs-string">0</span><br><span class="hljs-comment">#连接超时时间（毫秒）</span><br><span class="hljs-meta">spring.redis.timeout</span>=<span class="hljs-string">1800000</span><br><span class="hljs-comment">#连接池最大连接数（使用负值表示没有限制）</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-active</span>=<span class="hljs-string">20</span><br><span class="hljs-comment">#最大阻塞等待时间(负数表示没限制)</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-wait</span>=<span class="hljs-string">-1</span><br><span class="hljs-comment">#连接池中的最大空闲连接</span><br><span class="hljs-meta">spring.redis.lettuce.pool.max-idle</span>=<span class="hljs-string">5</span><br><span class="hljs-comment">#连接池中的最小空闲连接</span><br><span class="hljs-meta">spring.redis.lettuce.pool.min-idle</span>=<span class="hljs-string">0</span><br></code></pre></td></tr></table></figure><p>创建一个配置类，这个配置类固定写法，源码中提供的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CachingConfigurerSupport</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> </span>&#123;<br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> RedisTemplate&lt;&gt;();<br>        RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> StringRedisSerializer();<br>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span> Jackson2JsonRedisSerializer(Object.class);<br>        ObjectMapper om = <span class="hljs-keyword">new</span> ObjectMapper();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br>        template.setConnectionFactory(factory);<br><span class="hljs-comment">//key序列化方式</span><br>        template.setKeySerializer(redisSerializer);<br><span class="hljs-comment">//value序列化</span><br>        template.setValueSerializer(jackson2JsonRedisSerializer);<br><span class="hljs-comment">//value hashmap序列化</span><br>        template.setHashValueSerializer(jackson2JsonRedisSerializer);<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CacheManager <span class="hljs-title">cacheManager</span><span class="hljs-params">(RedisConnectionFactory factory)</span> </span>&#123;<br>        RedisSerializer&lt;String&gt; redisSerializer = <span class="hljs-keyword">new</span> StringRedisSerializer();<br>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span> Jackson2JsonRedisSerializer(Object.class);<br><span class="hljs-comment">//解决查询缓存转换异常的问题</span><br>        ObjectMapper om = <span class="hljs-keyword">new</span> ObjectMapper();<br>        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>        jackson2JsonRedisSerializer.setObjectMapper(om);<br><span class="hljs-comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span><br>        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()<br>                .entryTtl(Duration.ofSeconds(<span class="hljs-number">600</span>))<br>                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))<br>                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))<br>                .disableCachingNullValues();<br>        RedisCacheManager cacheManager = RedisCacheManager.builder(factory)<br>                .cacheDefaults(config)<br>                .build();<br>        <span class="hljs-keyword">return</span> cacheManager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/redisTest&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisTestController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">testRedis</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//设置值到redis</span><br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;lucy&quot;</span>);<br>        <span class="hljs-comment">//从redis获取值</span><br>        String name = (String)redisTemplate.opsForValue().get(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="持久化操作"><a href="#持久化操作" class="headerlink" title="持久化操作"></a>持久化操作</h2><p>redis提供了两种持久化方式：<strong>RDB、AOF</strong></p><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>默认开启</p><p>RDB：<strong>在指定的时间间隔内将内存中的数据集快照写入磁盘</strong>， 也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里</p><p>redis配置文件中的rdb配置<img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210903114921765.png" alt="image-20210903114921765"></p><blockquote><p>save 后边可以自定义配置</p></blockquote><h3 id="备份是如何执行的"><a href="#备份是如何执行的" class="headerlink" title="备份是如何执行的"></a>备份是如何执行的</h3><p>Redis会单独创建（fork）一个子进程来进行持久化，会<strong>先将数据写入到 一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。 RDB的缺点是最后一次持久化后的数据可能丢失</strong><br>比如临时文件中的数据还没有完全替换之前的文件，redis挂掉，就会造成数据丢失</p><p>在redis.conf中配置文件名称，默认为dump.rdb<br><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210903114442433.png" alt="image-20210903114442433"></p><h4 id="rdb文件的备份和恢复"><a href="#rdb文件的备份和恢复" class="headerlink" title="rdb文件的备份和恢复"></a>rdb文件的备份和恢复</h4><p>先查询rdb文件的目录 ，然后将*.rdb的文件拷贝到别的地方</p><p><strong>恢复</strong></p><ol><li>关闭Redis</li><li>先把备份的文件拷贝到工作目录下 cp dump2.rdb dump.rdb</li><li>启动Redis, 备份数据会直接加载</li></ol><h4 id="命令save-VS-bgsave"><a href="#命令save-VS-bgsave" class="headerlink" title="命令save VS bgsave"></a>命令save VS bgsave</h4><p>save ：save时只管保存，其它不管，全部阻塞。手动保存。不建议。<br><strong>bgsave：Redis会在后台异步进行快照操作， 快照同时还可以响应客户端请求</strong></p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>适合大规模的数据恢复</li><li> 对数据完整性和一致性要求不高更适合使用</li><li>节省磁盘空间</li><li>恢复速度快</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</li><li>虽然Redis在fork时使用了<strong>写时拷贝技术</strong>,但是如果数据庞大时还是比较消耗性能。</li><li>在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改。</li></ul><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>以<strong>日志</strong>的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(<strong>读操作不记录</strong>)， <strong>只许追加文件但不可以改写文件</strong></p><p>默认不开启，想要开启需要修改redis配置文件中的appendonly no，改为yes</p><p>AOF文件的保存路径，同RDB的路径一致。<strong>AOF和RDB同时开启，系统默认取AOF的数据</strong>（数据不会存在丢失）</p><p>AOF的备份和恢复与RDB一样，都是通过备份，然后关闭服务，最后重启服务。</p><h4 id="持久化流程"><a href="#持久化流程" class="headerlink" title="持久化流程"></a>持久化流程</h4><p>（1）客户端的请求写命令会被append追加到AOF缓冲区内；</p><p>（2）AOF缓冲区根据AOF持久化策略[always,everysec,no]将操作sync同步到磁盘的AOF文件中；</p><p>（3）AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量；</p><p>（4）Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；<br><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210903151226620.png" alt="image-20210903151226620"></p><h4 id="同步频率"><a href="#同步频率" class="headerlink" title="同步频率"></a>同步频率</h4><blockquote><p>appendfsync always</p></blockquote><p>始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好</p><blockquote><p> appendfsync everysec</p></blockquote><p>每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</p><blockquote><p>appendfsync no</p></blockquote><p>redis不主动进行同步，把同步时机交给操作系统</p><h4 id="Rewrite压缩"><a href="#Rewrite压缩" class="headerlink" title="Rewrite压缩"></a><strong>Rewrite</strong>压缩</h4><p>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制, 当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩， 只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof</p><p><strong>如何实现重写</strong></p><p>AOF文件持续增长而过大时，会fork出一条新进程来将文件重写(也是先写临时文件最后再rename)，redis4.0版本后的重写，是指上就是把rdb 的快照，以二级制的形式附在新的aof头部，作为已有的历史数据，替换掉原来的流水账操作。</p><p>如果 <strong>no-appendfsync-on-rewrite=yes</strong> ,不写入aof文件只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。（降低数据安全性，提高性能）<br>如果 <strong>no-appendfsync-on-rewrite=no</strong>, 还是会把数据往磁盘里刷，但是遇到重写操作，可能会发生阻塞。（数据安全，但是性能降低）</p><p><strong>何时重写</strong></p><p>Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发</p><p><strong>重写流程</strong></p><p>（1）bgrewriteaof触发重写，判断是否当前有bgsave或bgrewriteaof在运行，如果有，则等待该命令结束后再继续执行。</p><p>（2）主进程fork出子进程执行重写操作，保证主进程不会阻塞。</p><p>（3）子进程遍历redis内存中数据到临时文件，客户端的写请求同时写入aof_buf缓冲区和aof_rewrite_buf重写缓冲区保证原AOF文件完整以及新AOF文件生成期间的新的数据修改动作不会丢失。</p><p>（4）1).子进程写完新的AOF文件后，向主进程发信号，父进程更新统计信息。2).主进程把aof_rewrite_buf中的数据写入到新的AOF文件。</p><p>（5）使用新的AOF文件覆盖旧的AOF文件，完成AOF重写。</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210903151728194.png" alt="image-20210903151728194"></p><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li> 备份机制更稳健，丢失数据概率更低。</li><li>可读的日志文本，通过操作AOF稳健，可以处理误操作。</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li> 比起RDB占用更多的磁盘空间。</li><li>恢复备份速度要慢。</li><li>每次读写都同步的话，有一定的性能压力。</li><li>存在个别Bug，造成不能恢复</li></ul><h3 id="RDB和AOF如何选择"><a href="#RDB和AOF如何选择" class="headerlink" title="RDB和AOF如何选择"></a>RDB和AOF如何选择</h3><ul><li>Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑</li><li>虽然Redis在fork时使用了<strong>写时拷贝技术</strong>,但是如果数据庞大时还是比较消耗性能。</li><li>在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改。</li></ul><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><p>将一台服务器设置为<strong>主机（master、老大）</strong>，其他的服务器设置为<strong>从机（slave、小弟）</strong>。<br>老大进行写操作，小弟只能进行读操作。从而实现读写分离，效率提高<br><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210903155009142.png" alt="image-20210903155009142"></p><p>一主二从，描述的就是一台主机，两台从机，总共三台服务器。实际开发中一般最少都是一主二从</p><h3 id="模拟一下一主二从："><a href="#模拟一下一主二从：" class="headerlink" title="模拟一下一主二从："></a><strong>模拟一下一主二从：</strong></h3><p>在虚拟机上复制三份redis配置文件分别设置不同的端口还有各自的日志名等基本信息<img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210903155604078.png" alt="image-20210903155604078"></p><p>然后启动这三个服务<img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210903155726496.png" alt="image-20210903155726496"></p><p>由于没有配置主从关系，开启的服务默认都是主机<img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210903155831728.png" alt="image-20210903155831728"></p><blockquote><p>使用info replication查看信息</p></blockquote><h3 id="配置主从关系"><a href="#配置主从关系" class="headerlink" title="配置主从关系"></a><strong>配置主从关系</strong></h3><blockquote><p>在从机上使用以下命令即可配置主机（认大哥）</p><p>使用slaveof <ip><port></p></blockquote><p>认完大哥，大哥可以检查以下是否收下了这个小弟</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210903160256617.png" alt="image-20210903160256617"></p><blockquote><p>使用命令配置主从关系，不太稳定，宕机后关系就会恢复默认</p><p>从机可以直接在配置文件中认大哥，配置大哥的ip端口等信息即可，这样的主从关系稳定</p></blockquote><h3 id="老大挂了怎么办"><a href="#老大挂了怎么办" class="headerlink" title="老大挂了怎么办"></a>老大挂了怎么办</h3><p>79是主机，80、81是小弟，老大被砍住院了，80或81可以使用salve no one来升级做老大</p><p>还有一种关系是79是大哥，80是二大哥，80是81是大哥<br>81可以认80为老大，不直接认79，但80依然也是小弟需要听79的</p><h3 id="哨兵模式（！！！）"><a href="#哨兵模式（！！！）" class="headerlink" title="哨兵模式（！！！）"></a>哨兵模式（！！！）</h3><p>老大被砍住院了，小弟也不用手动升级为老大了。交给哨兵来做，哨兵自动根据投票来选择老大。</p><h4 id="配置哨兵"><a href="#配置哨兵" class="headerlink" title="配置哨兵"></a>配置哨兵</h4><ol><li><p>新建sentinel.conf文件，名字绝不能错。</p></li><li><p>sentinel monitor mymaster 127.0.0.1 6379 1</p><p>其中mymaster为监控对象起的服务器名称， 1 为至少有多少个哨兵同意迁移的数量。</p></li><li><p>使用redis默认的工具，<strong>redis-sentinel</strong>，后边要加上自己定义的哨兵配置文件</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210903163959221.png" alt="image-20210903163959221"></p><blockquote><p>哨兵可以配置很多东西，具体的配置可以查相关的博客，例如这个：<a href="https://blog.csdn.net/weixin_44408763/article/details/113729860?ops_request_misc=&request_id=&biz_id=102&utm_term=%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E5%85%A8%E9%83%A8%E9%85%8D%E7%BD%AE&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-5-113729860.first_rank_v2_pc_rank_v29&spm=1018.2226.3001.4187">哨兵全部配置</a></p></blockquote></li></ol><h2 id="缓存穿透和雪崩（！！！）"><a href="#缓存穿透和雪崩（！！！）" class="headerlink" title="缓存穿透和雪崩（！！！）"></a>缓存穿透和雪崩（！！！）</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>出现缓存穿透的原因大多是因为<strong>黑客攻击、恶意攻击</strong>等现象<br>比如用户访问一个缓存和数据库中都没有的url或者查询一个名字是李四的信息，但redis缓存中没有李四的信息，就会去数据库中查找，如果查询的请求非常多，数据库可能扛不住这么多的并发访问量，出现宕机。</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210903174850360.png" alt="image-20210903174850360"></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ol><li><p>报警，让网警去解决🤣</p></li><li><p>对空值缓存</p><blockquote><p>如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟</p></blockquote></li><li><p>设置可访问的名单（白名单）</p><blockquote><p>使用bitmaps类型定义一个可以访问的名单，名单id作为bitmaps的偏移量，每次访问和bitmap里面的id进行比较，如果访问id不在bitmaps里面，进行拦截，不允许访问。</p></blockquote></li><li><p>采用布隆过滤器</p><blockquote><p>底层使用的是bitmaps</p><p>使用bitmaps类型定义一个可以访问的名单，名单id作为bitmaps的偏移量，每次访问和bitmap里面的id进行比较，如果访问id不在bitmaps里面，进行拦截，不允许访问。</p></blockquote></li><li><p>实时监控</p><blockquote><p>当发现Redis的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务</p></blockquote></li></ol><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210903175431097.png" alt="image-20210903175431097"></p><h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><ol><li><p>预先设置热门数据</p><blockquote><p>在redis高峰访问之前，把一些热门数据提前存入到redis里面，加大这些热门数据key的时长</p></blockquote></li><li><p>实时调整</p><blockquote><p>现场监控哪些数据热门，实时调整key的过期时长</p></blockquote></li><li><p>使用锁</p><blockquote><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210903175647161.png" alt="image-20210903175647161"></p></blockquote></li></ol><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><p>缓存雪崩与缓存击穿的区别在于这里针对很多key缓存</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210903175751208.png" alt="image-20210903175751208"></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20210903175759079.png" alt="image-20210903175759079"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol><li><p>构建多级缓存架构</p><blockquote><p>nginx缓存 + redis缓存 +其他缓存（ehcache等）</p></blockquote></li><li><p>使用锁或队列</p><blockquote><p>用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。不适用高并发情况</p></blockquote></li><li><p>设置过期标志更新缓存</p><blockquote><p>记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际key的缓存</p></blockquote></li><li><p>设置过期标志更新缓存</p><blockquote><p>比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件</p></blockquote></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总感觉啥也没学😐，是不是废了😶</p><p>这个暑假几乎把后端开发需要用到的技术都熟悉了解了，下周开始做项目练手。</p><p>2021.09.03</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.bilibili.com/video/BV1Rv41177Af?p=44">【尚硅谷】2021 最新 Redis 6 入门到精通 超详细 教程</a></p><p><a href="https://www.bilibili.com/video/BV1S54y1R7SB?p=36">ks</a></p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NoSQL</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2021/08/26/Docker/"/>
    <url>/2021/08/26/Docker/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Docker是一个开源的应用容器。<br>Docker将开发中的依赖、配置应用等打包成可移植的镜像，可以运行在任何Linux操作系统上。<span id="more"></span><br>运行打包好的镜像，就形成了容器，容器之间相互隔离，互不干扰</p><blockquote><p>例如开发环境中使用的jdk是8，测试环境是7，开发将程序打包给测试，测试会因为环境的不同而报错。而Docker就可以将整个配置、依赖等环境打包成一个可移植的镜像文件，然后交给其他部门去测试、运维等，他们只需要在打包好的容器中去测试即可。</p></blockquote><p><strong>linux安装Docker并配置国内镜像源步骤:</strong><a href="https://www.bilibili.com/video/BV1LQ4y127n4?p=46">步骤</a></p><h2 id="Docker仓库"><a href="#Docker仓库" class="headerlink" title="Docker仓库"></a>Docker仓库</h2><p>官方镜像仓库：<a href="https://hub.docker.com/">https://hub.docker.com/</a><br>可以使用国内网站：<a href="https://hub.daocloud.io/">https://hub.daocloud.io/</a><br>在公司内部会采用私服的方式拉取镜像。（需要添加配置）</p><blockquote><p><strong>需要在/etc/docker/daemon.json</strong></p><p>{<br>    “registry-mirrors”: [“<a href="https://registry.docker-cn.com&quot;]">https://registry.docker-cn.com&quot;]</a>,<br>    “insecure-registries”: [“ip:port]<br>}</p><p><strong>ip:port</strong></p><p>公司私服的ip和port</p><p><strong>重启两个服务</strong></p><p>systemctl daemon-reload<br>systemctl restart docker                          </p></blockquote><h2 id="操作镜像和容器"><a href="#操作镜像和容器" class="headerlink" title="操作镜像和容器"></a>操作镜像和容器</h2><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/Docker%E9%95%9C%E5%83%8F%E5%91%BD%E4%BB%A4.PNG" alt="img"></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/docker%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4.PNG" alt="img"></p><h3 id="创建运行一个容器"><a href="#创建运行一个容器" class="headerlink" title="创建运行一个容器"></a>创建运行一个容器</h3><p>例如要创建一个Nginx镜像容器，首先要去镜像仓库拉取nginx镜像，然后在仓库nginx镜像页面下查看nginx容器运行命令</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/docker%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4.PNG" alt="img"></p><h3 id="查看正在运行的容器"><a href="#查看正在运行的容器" class="headerlink" title="查看正在运行的容器"></a>查看正在运行的容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">docker ps [OPTIONS]<br># OPTIONS说明:<br># -a: 代表查看全部的容器，包括没有运行<br># -q: 只查看容器的标识<br># -f: 根据条件过滤显示的内容<br># --format: 指定返回值的模板文件<br># -l: 显示最近创建的容器<br># -n: 列出最近创建的n个容器<br># --no-trunc: 不截断输出<br># -s: 显示总的文件大小<br></code></pre></td></tr></table></figure><h3 id="查看容器的日志"><a href="#查看容器的日志" class="headerlink" title="查看容器的日志"></a>查看容器的日志</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">docker logs -f 容器id<br># -f: 可以滚动查看日志的最后几行<br></code></pre></td></tr></table></figure><h3 id="进入容器内部"><a href="#进入容器内部" class="headerlink" title="进入容器内部"></a>进入容器内部</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">docker exec -it 容器id(或者创建容器时起的名字) bash<br><br>docker exec:进入容器内部执行的命令<br>-it: 给定一个标准的输入输出终端，可以与容器交互<br>bash: bash时Linux终端交互命令 <br></code></pre></td></tr></table></figure><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><p>通过创建数据卷可以修改容器内部的数据。就是将宿主机的一个目录映射到容器中的一个目录中，宿主机在操作目录时，容器中的数据也会发生变化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt"># 1. 创建数据卷<br>docker volume create 数据卷名称<br># 创建数据卷之后默认会存放在一个目录下 /var/lib/docker/volumes/数据卷名称/_data<br>inspect: 显示一个或多个volume信息<br>ls:列出所有的volume<br>prune:删除未使用的volume<br>rm:删除一个或多个指定的volume<br></code></pre></td></tr></table></figure><p><strong>使用数据卷</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt"># 应用数据卷<br># 当你映射数据卷时，如果数据卷不存在。Docker会帮你自动创建<br>docker run -v 数据卷名称:容器内部路径 镜像id<br># 直接指定一个路径作为数据卷的存放位置。这个路径下是空的。<br>docker run -v 路径:容器内部的路径 镜像id<br></code></pre></td></tr></table></figure><h2 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h2><p><strong>DockerFile</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt"># 1. 创建一个Dockerfile文件，并且指定自定义镜像信息。<br># Dockerfile文件中常用的内容<br>from: 指定当前自定义镜像依赖的环境<br>copy: 将相对路径下的内容复制到自定义镜像中<br>workdir: 声明镜像的默认工作目录<br># 举个例子，自定义一个tomcat镜像，并且将ssm.war部署到tomcat中<br>from daocloud.io/library/tomcat:8.5.15-jre8<br>copy ssm.war /usr/local/tomcat/webapps<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/Docker%E8%87%AA%E5%AE%9A%E4%B9%89%E9%95%9C%E5%83%8F.PNG" alt="img"></p><p>使用java:8-alpine镜像，简化镜像的构建过程</p><h2 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h2><p>基于Compose文件，快速部署分布式应用，不需要手动一个一个的创建和运行容器<br>Compose文件是一个文本文件，通过指令定义集群中的每个容器如何运行</p><p>下载DockerCompose：<a href="https://github.com/docker/compose/releases">https://github.com/docker/compose/releases</a><br>下载后放在服务器或虚拟机的/usr/local/bin目录下</p><p>修改权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">chmod +x /usr/<span class="hljs-built_in">local</span>/bin/docker-compose<br></code></pre></td></tr></table></figure><p>部署应用实例： <a href="https://www.bilibili.com/video/BV1LQ4y127n4?p=59">https://www.bilibili.com/video/BV1LQ4y127n4?p=59</a></p><h2 id="Docker私有镜像仓库"><a href="#Docker私有镜像仓库" class="headerlink" title="Docker私有镜像仓库"></a>Docker私有镜像仓库</h2><p>可以搭建自己的私有仓库，比如企业自己可能采用私有仓库:<strong>Docker Registry</strong></p><h3 id="带图形化界面的版本"><a href="#带图形化界面的版本" class="headerlink" title="带图形化界面的版本"></a>带图形化界面的版本</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.0&#x27;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">registry:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">registry</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./registry-data:/var/lib/registry</span><br>  <span class="hljs-attr">ui:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">joxit/docker-registry-ui:static</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><span class="hljs-string">:80</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REGISTRY_TITLE=我的私有仓库</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">REGISTRY_URL=http://registry:5000</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">registry</span><br></code></pre></td></tr></table></figure><p><strong>配置信任地址：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 打开要修改的文件</span><br><span class="hljs-string">vi</span> <span class="hljs-string">/etc/docker/daemon.json</span><br><span class="hljs-comment"># 添加内容：</span><br><span class="hljs-string">&quot;insecure-registries&quot;</span><span class="hljs-string">:[&quot;http://192.168.150.101:8080&quot;]</span><br><span class="hljs-comment"># 重加载</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">daemon-reload</span><br><span class="hljs-comment"># 重启docker</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">restart</span> <span class="hljs-string">docker</span><br></code></pre></td></tr></table></figure><p>推送本地镜像到私有仓库必须重命名，以仓库名地址为前缀</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker tag nginx:latest ip地址:端口/nginx:1.0<br></code></pre></td></tr></table></figure><p>查看私有镜像仓库，访问服务器或虚拟机的ip地址加上配置的端口</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>实际开发中将代码打成jar包，然后配置每个模块的DockerFile文件，最后使用DockerCompose统一部署<br>首先部署nacos，然后在部署其他服务，因为其他服务优先启动没有找到nacos会报错</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.bilibili.com/video/BV1CJ411T7BK?p=2">itheima</a></p><p><a href="https://blog.csdn.net/lqpf199681/article/details/110518692?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162993739316780261951441%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162993739316780261951441&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-110518692.first_rank_v2_pc_rank_v29&utm_term=docker&spm=1018.2226.3001.4187">1024肥宅</a></p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud</title>
    <link href="/2021/08/23/SpringCloud/"/>
    <url>/2021/08/23/SpringCloud/</url>
    
    <content type="html"><![CDATA[<h2 id="认识微服务"><a href="#认识微服务" class="headerlink" title="认识微服务"></a>认识微服务</h2><span id="more"></span><p><strong>Spring Cloud 只是微服务里面的一个技术集合</strong></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%8A%80%E6%9C%AF%E6%A0%88.png"></p><p><strong>微服务就是一种经过良好架构设计的分布式架构方案，分布式的特征：</strong></p><ul><li><p>单一职责</p><blockquote><p>业务拆分粒度更小，避免业务重复开发</p></blockquote></li><li><p>面向服务</p><blockquote><p>对外暴露业务接口，等着来调用</p></blockquote></li><li><p>自治</p><blockquote><p>一个业务划分成多个团队，每个团队负责一个小的功能模块，每个团队独立，技术独立、数据库也是独立，部署也独立</p></blockquote></li><li><p>隔离性强</p><blockquote><p>服务调用做好隔离、降级等，避免出现级联问题</p></blockquote></li></ul><p><strong>Spring Cloud和Dubbo的区别</strong></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/springcloud%E5%92%8Cdubboqubie.jpg"></p><p><strong>Dubbo使用RPC进行远程调用，而Spring Cloud使用HTTP进行调用</strong></p><h2 id="快速使用Spring-Cloud"><a href="#快速使用Spring-Cloud" class="headerlink" title="快速使用Spring Cloud"></a>快速使用Spring Cloud</h2><ul><li>用spring boot进行开发的话，在pom文件中导入spring cloud依赖即可</li></ul><blockquote><p>spring cloud依赖于spring boot</p><p>看起来导入配置就可使用，要注意Spring Cloud是需要配合其他组件一起使用</p><p>比如还需要使用注册中心、服务调度等其他组件的的依赖进行配合使用</p></blockquote><ol><li><p>在父工程的pom文件中导入相关的依赖</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20220116195434200.png" alt="image-20220116195434200"></p></li><li><p>配置Nacos（注册中心）</p><ul><li><p>在注册者和调用者的配置文件中配置Nacos，目的是将自己上传到注册中心（使用Nacos的前提是要进行安装和打开Nacos服务）</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20220116195717814.png" alt="image-20220116195717814"></p></li><li><p>在启动类上加上注解</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20220116201005542.png" alt="image-20220116201005542"></p></li><li><p>访问nacos的网址（<a href="http://localhost:8848/nacos%EF%BC%8C%E8%B4%A6%E5%8F%B7%E5%92%8C%E5%AF%86%E7%A0%81%E9%83%BD%E6%98%AFnacos%EF%BC%89%EF%BC%8C%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8%E4%B8%AD%E6%9F%A5%E7%9C%8B%E6%9C%8D%E5%8A%A1%E6%98%AF%E5%90%A6%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F">http://localhost:8848/nacos，账号和密码都是nacos），在服务列表中查看服务是否注册成功</a></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20220116200238364.png" alt="image-20220116200238364"></p></li></ul></li><li><p>服务调用者创建Client，调用其他服务</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20220116201247853.png" alt="image-20220116201247853"></p></li><li><p>在方法中使用，将刚才创建的Client接口注入进去，然后调用对应方法即可</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20220116201513860.png" alt="image-20220116201513860"></p></li></ol><h2 id="Spring-Cloud通过Http方式进行远程调用"><a href="#Spring-Cloud通过Http方式进行远程调用" class="headerlink" title="Spring Cloud通过Http方式进行远程调用"></a>Spring Cloud通过Http方式进行远程调用</h2><p><strong>模拟场景</strong></p><blockquote><p>有一个根据用户id查询用户信息的user-service模块，和根据订单号查询订单的order-service模块。<br>现在添加一个功能，根据订单号查询订单的同时也要查询出用户的信息。（订单类中包含有user属性）</p></blockquote><p><strong>实现思路</strong>：</p><ol><li><p>在order-service配置文件中注册<strong>RestTemplate</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function">publci RestTemplate <span class="hljs-title">restTemplate</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在Service中使用自动注入RestTemplate对象，使用RestTemplate.get…()或者RestTemplate.post…()来实现</p><blockquote><p>使用RestTemplate.get…()或者RestTemplate.post…()方法，要给定一个url和bean对象</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AutoWire</span><br><span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Order <span class="hljs-title">queryOrderById</span><span class="hljs-params">(Long orderId)</span> </span>&#123;<br>    <span class="hljs-comment">// 1.查询订单</span><br>    Order order = orderMapper.findById(orderId);<br>    <span class="hljs-comment">// 2.利用RestTemplate发起http请求，查询用户</span><br>    <span class="hljs-comment">// 2.1.url路径</span><br>    String url = <span class="hljs-string">&quot;http://userservice/user/&quot;</span> + order.getUserId();<br>    <span class="hljs-comment">// 2.2.发送http请求，实现远程调用</span><br>    User user = restTemplate.getForObject(url, User.class);<br>    <span class="hljs-comment">// 3.封装user到Order</span><br>    order.setUser(user);<br>    <span class="hljs-comment">// 4.返回</span><br>    <span class="hljs-keyword">return</span> order;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><p>Feign是一个声明式的http客户端，解决上边提到的使用RestTemplate发送请求url时一些代码问题。比如可读性差，参数复杂等，帮助我们优雅的实现http请求的发送。用来代替RestTemplate</p><p>而且<strong>Feign集成Ribbon，自动实现负载均衡</strong></p><h3 id="如何使用Feign"><a href="#如何使用Feign" class="headerlink" title="如何使用Feign"></a>如何使用Feign</h3><ol><li> 在客户端引入依赖</li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;!--feign客户端依赖--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>客户端启动类添加注解开启Feign</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(OrderApplication.class, args);<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>编写Feign客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建一个接口，定义方法</span><br><span class="hljs-meta">@FeignClient(value = &quot;userservice&quot;)</span> <span class="hljs-comment">//括号内是要访问的服务名</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserClient</span> </span>&#123;    <br>    <span class="hljs-meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span> <span class="hljs-comment">//发送方式还是Get，如果参数有多个，直接加&#123;&#125;</span><br>    <span class="hljs-function">User <span class="hljs-title">findById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;  <span class="hljs-comment">//参数对应上面</span><br>&#125;<br><br><span class="hljs-comment">//调用时</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> OrderMapper orderMapper;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserClient userClient;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Order <span class="hljs-title">queryOrderById</span><span class="hljs-params">(Long orderId)</span> </span>&#123;<br>    <span class="hljs-comment">// 1.查询订单</span><br>    Order order = orderMapper.findById(orderId);<br>    <span class="hljs-comment">// 2.用Feign远程调用</span><br>    User user = userClient.findById(order.getUserId());<br>    <span class="hljs-comment">// 3.封装user到Order</span><br>    order.setUser(user);<br>    <span class="hljs-comment">// 4.返回</span><br>    <span class="hljs-keyword">return</span> order;<br>&#125;<br><br><span class="hljs-comment">//对比之前写法</span><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> OrderMapper orderMapper;<br><br><span class="hljs-meta">@AutoWire</span><br><span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Order <span class="hljs-title">queryOrderById</span><span class="hljs-params">(Long orderId)</span> </span>&#123;<br>    <span class="hljs-comment">// 1.查询订单</span><br>    Order order = orderMapper.findById(orderId);<br>    <span class="hljs-comment">// 2.利用RestTemplate发起http请求，查询用户</span><br>    <span class="hljs-comment">// 2.1.url路径</span><br>    String url = <span class="hljs-string">&quot;http://userservice/user/&quot;</span> + order.getUserId();<br>    <span class="hljs-comment">// 2.2.发送http请求，实现远程调用</span><br>    User user = restTemplate.getForObject(url, User.class);<br>    <span class="hljs-comment">// 3.封装user到Order</span><br>    order.setUser(user);<br>    <span class="hljs-comment">// 4.返回</span><br>    <span class="hljs-keyword">return</span> order;<br>&#125;<br><br><span class="hljs-comment">//优雅么？写法确实更简单了</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="自定义Feign配置"><a href="#自定义Feign配置" class="headerlink" title="自定义Feign配置"></a>自定义Feign配置</h3><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/Feign%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7.PNG" alt="img"></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/Feign%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%E4%B8%80.PNG" alt="img"></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/Feign%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%E4%BA%8C.PNG" alt="img"></p><h3 id="Feign性能优化"><a href="#Feign性能优化" class="headerlink" title="Feign性能优化"></a>Feign性能优化</h3><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/Feign%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.PNG" alt="img"></p><p><strong>因为Feign底层使用URLConnection，所以可以替换成Apache HttpClient或者OKHttp，演示使用Apache HttpClient</strong></p><blockquote><p>注意：</p><p>是在客户端引入依赖和配置这些属性</p></blockquote><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/Feign%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%BD%BF%E7%94%A8HttpClient.PNG" alt="img"></p><p><strong>Feign性能优化总结:</strong></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/Feign%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93.PNG" alt="img"></p><h3 id="实际开发中Feign的应用"><a href="#实际开发中Feign的应用" class="headerlink" title="实际开发中Feign的应用"></a>实际开发中Feign的应用</h3><p>两种方式：</p><ol><li><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/Feign%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E5%BA%94%E7%94%A81.PNG" alt="img"></li><li><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/Feign%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E5%BA%94%E7%94%A82.PNG" alt="img"></li></ol><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/Feign%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.PNG" alt="img"></p><h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><h3 id="什么是Eureka"><a href="#什么是Eureka" class="headerlink" title="什么是Eureka"></a>什么是Eureka</h3><p>Eureka是Spring Cloud的注册中心，就像Dubbo的Zookeeper。<br>服务提供者和消费者都被eureka称为client，<strong>服务提供者会每隔30秒会像eureka发送“心跳续约”，而消费者也会更新本地的服务列表缓存</strong>确保消费者进行远程调用时能够调用到服务。而且消费者会根据负载均衡算法，从服务列表里面挑选。</p><h3 id="如何创建Eureka"><a href="#如何创建Eureka" class="headerlink" title="如何创建Eureka"></a>如何创建Eureka</h3><ol><li><p>创建一个Eureka模块</p></li><li><p>引入Eureka依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>写eureka类,使用@EnableEurekaServer注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EurekaApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(EurekaApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在配置文件中配置Eureka</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10086</span> <span class="hljs-comment"># 服务端口</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eurekaserver</span> <span class="hljs-comment"># eureka的服务名称</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span>  <span class="hljs-comment"># eureka的地址信息</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:10086/eureka</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><p>例如 将userService模块中引入eureka，并注册到注册中心</p><ol><li><p>引入eureka依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;!--eureka客户端依赖--&gt;<br>        &lt;!--&lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br> &lt;/dependency&gt;--&gt;<br></code></pre></td></tr></table></figure></li><li><p>在配置文件中配置eureka地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Spring:</span><br> <span class="hljs-attr">application:</span><br> <span class="hljs-attr">name:</span> <span class="hljs-string">userService</span>  <span class="hljs-comment"># user服务名称</span><br><span class="hljs-attr">eureka:</span><br> <span class="hljs-attr">client:</span><br>   <span class="hljs-attr">service-url:</span>  <span class="hljs-comment"># eureka的地址信息</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://127.0.0.1:10086/eureka</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p>例如 将orderService模块中引入eureka,调用userService</p><p>在<strong>服务注册</strong>的基础上做以下几步</p><ul><li><p>在创建的<strong>RestTemplate</strong>类上加入@LoadBalanced注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">restTemplate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate();<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>将url修改为服务注册时配置的名字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">#在userService配置文件中，配置的Eureka名字是 userservice，因此在进行http调用时，使用该名字即可<br>    String url = <span class="hljs-string">&quot;http://userservice/user/&quot;</span> + order.getUserId();<br></code></pre></td></tr></table></figure></li></ul><h2 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h2><h3 id="Ribbon是什么"><a href="#Ribbon是什么" class="headerlink" title="Ribbon是什么"></a>Ribbon是什么</h3><p>Ribbon是<strong>Nexflix Ribbon</strong>实现的一套<strong>客户端负载均衡工具</strong></p><h3 id="Ribbon负载均衡原理"><a href="#Ribbon负载均衡原理" class="headerlink" title="Ribbon负载均衡原理"></a>Ribbon负载均衡原理</h3><p>通过源码得出下面结论和图片：</p><blockquote><p> 当客户端发起请求后，请求就会被Ribbon拦截，首先获取请求中的url，然后去Eureka查找服务并返回服务列表，经过负载均衡后选择服务列表中的某个服务，最后修改url，发起请求</p></blockquote><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/Ribbon.PNG"></p><p><em><strong>负载均衡规则都是由IRule决定</strong></em></p><h3 id="Ribbon负载均衡策略"><a href="#Ribbon负载均衡策略" class="headerlink" title="Ribbon负载均衡策略"></a>Ribbon负载均衡策略</h3><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5.PNG" alt="img"></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5.PNG" alt="img"></p><p>负载均衡<strong>默认使用轮询规则</strong></p><h3 id="改变负载均衡规则"><a href="#改变负载均衡规则" class="headerlink" title="改变负载均衡规则"></a>改变负载均衡规则</h3><ol><li><p>在消费者的application类中，或者自定义一个配置类，定义一个新的IRule</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> IRule <span class="hljs-title">randomRule</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RandomRule();<span class="hljs-comment">//new 一个想使用的规则即可</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>使用这种方式，定义的是全局规则</p></blockquote></li><li><p>在yaml配置文件中修改规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">userservice:</span> <span class="hljs-comment">#指定服务</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.alibaba.cloud.nacos.ribbon.RandomRule</span>  <span class="hljs-comment"># 负载均衡规则</span><br></code></pre></td></tr></table></figure><blockquote><p>指定具体的服务，而不是全局应用修改后的规则</p></blockquote></li></ol><h3 id="饥饿加载"><a href="#饥饿加载" class="headerlink" title="饥饿加载"></a>饥饿加载</h3><p>Ribbon默认采用懒加载，在第一次访问时才会去创建负载均衡客户端，所以第一次请求时间会长<br>饥饿加载会在项目启动时创建，降低访问时间</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ribbon:</span><br>  <span class="hljs-attr">eager-load:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 开启饥饿加载</span><br>    <span class="hljs-attr">clients:</span> <span class="hljs-comment"># 指定饥饿加载的服务名称</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">userservice</span><br></code></pre></td></tr></table></figure><h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><h3 id="Nacos是啥"><a href="#Nacos是啥" class="headerlink" title="Nacos是啥"></a>Nacos是啥</h3><p>Nacos是阿里巴巴的产品，也是一个注册中心，现在是spring cloud一个组件，比Eureka丰富，国内受欢迎</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ol><li><p>下载<a href="https://nacos.io/zh-cn/">Nacos</a></p></li><li><p>在父工程导入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;!--nacos的管理依赖--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;<br>    &lt;version&gt;2.2.5.RELEASE&lt;/version&gt;<br>    &lt;type&gt;pom&lt;/type&gt;<br>    &lt;scope&gt;import&lt;/scope&gt;<br> &lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>在提供者和消费者中引入客户端依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;!-- nacos客户端依赖包 --&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>消费者和提供者设置Nacos地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cloud:</span><br>  <span class="hljs-attr">nacos:</span><br>    <span class="hljs-attr">server-addr:</span> <span class="hljs-string">nacos:8848</span> <span class="hljs-comment"># nacos服务地址</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h3><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/Nacos%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%9E%8B.PNG" alt="img"></p><h4 id="如何设置集群"><a href="#如何设置集群" class="headerlink" title="如何设置集群"></a>如何设置集群</h4><p>使用spring.cloud.nacos.discoverycluster-name属性设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cloud:</span><br>  <span class="hljs-attr">nacos:</span><br>    <span class="hljs-attr">server-addr:</span> <span class="hljs-string">nacos:8848</span> <span class="hljs-comment"># nacos服务地址</span><br>    <span class="hljs-attr">discovery:</span><br>      <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">shanghai</span> <span class="hljs-comment">#集群名称</span><br></code></pre></td></tr></table></figure><h3 id="优先调用本地集群"><a href="#优先调用本地集群" class="headerlink" title="优先调用本地集群"></a>优先调用本地集群</h3><p>服务者调用者和服务提供者集群的名称设置为相同，然后设置调用者的负载均衡规则为NacosRule。<br>如果本地集群没有实例，则会跨集群调用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">userservice:</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.alibaba.cloud.nacos.ribbon.NacosRule</span>  <span class="hljs-comment"># 负载均衡规则</span><br></code></pre></td></tr></table></figure><h3 id="调节服务实例权重"><a href="#调节服务实例权重" class="headerlink" title="调节服务实例权重"></a>调节服务实例权重</h3><p>权重值一般是0-1之间，值越小，被访问到的可能性越小，反之亦然。</p><blockquote><p>如果实例要升级，可以将某一实例调为0不允许访问，进行升级后，调节成一个允许访问的值，放进来一部分用户进行测试，如果测试成功，将权重为调节为正常值，其他实例依次这样升级。</p></blockquote><p>实例调节方法是在nacos界面控制台进行访问</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/nacos%E6%9D%83%E9%87%8D%E8%B0%83%E8%8A%82.PNG" alt="img"></p><h3 id="环境隔离-namespace"><a href="#环境隔离-namespace" class="headerlink" title="环境隔离 namespace"></a>环境隔离 namespace</h3><p>为了管理服务和数据 做环境隔离，不同的namespace之间的服务不可见，每个namespace都有唯一的id</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/nacos%E7%8E%AF%E5%A2%83%E9%9A%94%E7%A6%BB.PNG" alt="img"></p><p><strong>在配置文件中配置namespace:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cloud:</span><br>  <span class="hljs-attr">nacos:</span><br>    <span class="hljs-attr">server-addr:</span> <span class="hljs-string">nacos:8848</span> <span class="hljs-comment"># nacos服务地址</span><br>    <span class="hljs-attr">discovery:</span><br>      <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">shanghai</span> <span class="hljs-comment">#集群名称</span><br>    <span class="hljs-attr">discovery:</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">4d6ce343-9e1b-44df-a90f-2cf2b6b3d177</span> <span class="hljs-comment"># 命名空间生成的id</span><br></code></pre></td></tr></table></figure><h3 id="Eureka和Nacos的区别"><a href="#Eureka和Nacos的区别" class="headerlink" title="Eureka和Nacos的区别"></a>Eureka和Nacos的区别</h3><p>Nacos的“心跳续约”速度比Eureka快</p><p>Nacos在进行远程调用时，采用两种调用模式，临时实例和非临时实例。非临时实例不会向注册中心发起心跳续约，而是注册中心主动向服务提供者发起询问，如果非临时实例出现问题，注册中心不会剔除，而是等待非临时实例恢复。</p><p>Eureka的服务提供者只会向注册中心发起拉取提供者信息，而Nacos除了拉取，还会主动向消费者推送变更信息。</p><p>Nacos设置临时实例和非临时实例,默认为临时实例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cloud:</span><br>  <span class="hljs-attr">nacos:</span><br>    <span class="hljs-attr">server-addr:</span> <span class="hljs-string">nacos:8848</span> <span class="hljs-comment"># nacos服务地址</span><br>    <span class="hljs-attr">discovery:</span><br>      <span class="hljs-attr">cluster-name:</span> <span class="hljs-string">shanghai</span> <span class="hljs-comment">#集群名称</span><br>    <span class="hljs-attr">discovery:</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">4d6ce343-9e1b-44df-a90f-2cf2b6b3d177</span> <span class="hljs-comment"># dev环境</span><br>      <span class="hljs-attr">ephemeral:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 是否是临时实例</span><br></code></pre></td></tr></table></figure><h3 id="Nacos配置管理"><a href="#Nacos配置管理" class="headerlink" title="Nacos配置管理"></a>Nacos配置管理</h3><p>配置管理用来记录各个微服务的配置，当微服务配置发生变化时，可以通过配置管理服务进行热更新<br>通常用来配置一些经常需要变更的配置</p><ol><li><p>创建配置<img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/nacos%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86.png" alt="img"></p></li><li><p>微服务获取配置管理步骤<img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/nacos%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86%E6%89%A7%E8%A1%8C%E6%AD%A5%E9%AA%A4.PNG" alt="img"></p><blockquote><p>想要读取nacos配置文件就要知道nacos地址，nacos一般放在本地配置文件中，所以要把nacos地址和相关的信息放在创建的bootstrap.yml文件里，因为bootstrap文件的优先级高于application文件</p></blockquote></li><li><p>引入配置管理客户端依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;!--nacos的配置管理依赖--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>创建bootstrap文件，添加配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">userservice</span> <span class="hljs-comment">#服务名称</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span> <span class="hljs-comment"># 环境</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment"># nacos地址</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yaml</span> <span class="hljs-comment"># 文件后缀名</span><br></code></pre></td></tr></table></figure><blockquote><p>把application配置文件中相同的配置删除</p></blockquote></li></ol><h3 id="具体使用细节"><a href="#具体使用细节" class="headerlink" title="具体使用细节"></a>具体使用细节</h3><h4 id="Nacos配置管理实现热更新"><a href="#Nacos配置管理实现热更新" class="headerlink" title="Nacos配置管理实现热更新"></a>Nacos配置管理实现热更新</h4><p>一种使用@Value注解注入，结合@RefreshScope来刷新<br>另一种使用@ConfigurationProperties注入</p><blockquote><p>具体操作看视频吧，有时候写出来没视频好理解。</p><p><a href="https://www.bilibili.com/video/BV1LQ4y127n4?p=27">Nacos配置管理实现热更新</a></p></blockquote><h4 id="Nacos实现多个环境共享同个配置文件"><a href="#Nacos实现多个环境共享同个配置文件" class="headerlink" title="Nacos实现多个环境共享同个配置文件"></a>Nacos实现多个环境共享同个配置文件</h4><p>应用场景就是相同的数据信息放在一个配置文件中，让多个环境来调用。</p><blockquote><p><a href="https://www.bilibili.com/video/BV1LQ4y127n4?p=28">多个环境实现共享文件</a></p></blockquote><p><strong>配置文件的优先级：nacos当前环境配置&gt;共同环境配置&gt;本地配置</strong></p><blockquote><p>服务名.profile.yaml&gt;服务名称.yaml&gt;本地配置</p></blockquote><h3 id="Nacos集群搭建"><a href="#Nacos集群搭建" class="headerlink" title="Nacos集群搭建"></a>Nacos集群搭建</h3><p><a href="https://www.bilibili.com/video/BV1LQ4y127n4?p=29">这步骤写出来太抽象不如偷个懒贴个十分钟左右的视频😁</a></p><blockquote><p>要使用到Nginx做负载均衡</p></blockquote><h2 id="GateWay"><a href="#GateWay" class="headerlink" title="GateWay"></a>GateWay</h2><p>网关用来对发送过来的请求进行身份和权限的验证、限流、服务路由、负载均衡等</p><ul><li><p>gateway</p><blockquote><p>基于spring提供的WebFlux，属于响应式编程的实现，性能好</p></blockquote></li><li><p>zuul</p><blockquote><p>基于servlet的实现，属于阻塞式编程</p></blockquote></li></ul><h3 id="如何搭建网关"><a href="#如何搭建网关" class="headerlink" title="如何搭建网关"></a>如何搭建网关</h3><ol><li><p>创建一个网关模块</p></li><li><p>引入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pom">&lt;!--nacos服务注册发现依赖,有这个注册发现，才能使用gateway和其他组件--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>&lt;!--网关gateway依赖--&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure></li><li><p>配置网关配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Server:</span><br><span class="hljs-string">port:10086</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">nacos:8848</span> <span class="hljs-comment"># nacos地址</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">user-service</span> <span class="hljs-comment"># 路由标示，必须唯一</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://userservice</span> <span class="hljs-comment"># 路由的目标地址</span><br>          <span class="hljs-attr">predicates:</span> <span class="hljs-comment"># 路由断言，判断请求是否符合规则</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/user/**</span> <span class="hljs-comment"># 路径断言，判断路径是否是以/user开头，如果是则符合</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">order-service</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://orderservice</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/order/**</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>predicate可定义的规则还有很多：</strong></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/%E6%96%AD%E8%A8%80%E5%B7%A5%E5%8E%82.PNG" alt="img"></p><p><strong>用户发起请求执行流程：</strong></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/%E8%AF%B7%E6%B1%82%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.PNG" alt="img"></p><h3 id="路由过滤器"><a href="#路由过滤器" class="headerlink" title="路由过滤器"></a>路由过滤器</h3><p>GatewayFilter可以对进入网关的请求和微服务返回的响应做处理</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/%E7%BD%91%E5%85%B3%E8%BF%87%E6%BB%A4%E5%99%A8.PNG" alt="img"></p><p>在网关配置文件中配置过滤器即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml">      <span class="hljs-attr">default-filters:</span>  <span class="hljs-comment">#默认对所有的路由都生效</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">AddRequestHeader=Truth,Itcast</span> <span class="hljs-string">is</span> <span class="hljs-string">freaking</span> <span class="hljs-string">awesome!</span><br><span class="hljs-comment">#      fileter:  #单独添加过滤器</span><br><span class="hljs-comment">#        - AddRequestHeader=Truth,Itcast is 666!</span><br></code></pre></td></tr></table></figure><h4 id="GlobalFilter"><a href="#GlobalFilter" class="headerlink" title="GlobalFilter"></a>GlobalFilter</h4><p>可以自定义过滤规则的过滤器</p><p>实现过程：定义一个类，实现GlobalFilter接口，重写方法</p><p>要求：判断是否是admin账户名登录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Order(-1)</span> <span class="hljs-comment">//值越小，优先执行该过滤器</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthorizeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GlobalFilter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;<br>        <span class="hljs-comment">// 1.获取请求参数</span><br>        ServerHttpRequest request = exchange.getRequest();<br>        MultiValueMap&lt;String, String&gt; params = request.getQueryParams();<br>        <span class="hljs-comment">// 2.获取参数中的 authorization 参数</span><br>        String auth = params.getFirst(<span class="hljs-string">&quot;authorization&quot;</span>);<br>        <span class="hljs-comment">// 3.判断参数值是否等于 admin</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(auth)) &#123;<br>            <span class="hljs-comment">// 4.是，放行</span><br>            <span class="hljs-keyword">return</span> chain.filter(exchange);<br>        &#125;<br>        <span class="hljs-comment">// 5.否，拦截</span><br>        <span class="hljs-comment">// 5.1.设置状态码</span><br>        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);<br>        <span class="hljs-comment">// 5.2.拦截请求</span><br>        <span class="hljs-keyword">return</span> exchange.getResponse().setComplete();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="过滤器执行顺序"><a href="#过滤器执行顺序" class="headerlink" title="过滤器执行顺序"></a>过滤器执行顺序</h3><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/%E8%BF%87%E6%BB%A4%E5%99%A8%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.PNG" alt="img"></p><h3 id="处理跨域问题"><a href="#处理跨域问题" class="headerlink" title="处理跨域问题"></a>处理跨域问题</h3><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E7%9A%84%E5%A4%84%E7%90%86.PNG" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>spring cloud把项目细分为很多模块，每个模块又细分为很多实例。支持的组件丰富。</p><p>Dubbo没有和spring cloud相比起来，功能没有springcloud完善。</p><p>具体还是要使用起来才有更深的理解</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.bilibili.com/video/BV1LQ4y127n4?p=1">传智播客</a></p>]]></content>
    
    
    <categories>
      
      <category>微服务</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
      <tag>Spring Cloud</tag>
      
      <tag>微服务</tag>
      
      <tag>Ribbon</tag>
      
      <tag>Nacos</tag>
      
      <tag>Feign</tag>
      
      <tag>GateWay</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dubbo</title>
    <link href="/2021/08/18/Dubbo/"/>
    <url>/2021/08/18/Dubbo/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p><strong>集群：</strong>很多“人”一起做相同的事。一个业务部署在多台服务器上</p><p><strong>分布式:</strong> 很多“人”一起做不相同的事，这些不相同的事合起来是一件大事。一个业务分解成不同的模块，部署在不同的机器上</p><p><strong>Dubbo</strong>是SOA架构时代的产物，SpringCloud是微服务时代产物。对于互联网项目来说，两者都可以选择。</p></blockquote><span id="more"></span><p><a href="https://dubbo.apache.org/zh/">Dubbo</a><strong>是阿里巴巴开源的一个高性能、轻量级的Java RPC(远程服务调用)框架</strong>，后来被Apache收录.</p><p><strong>Dubbo架构图</strong></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/dubbo%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg"></p><ul><li>首先启动提供者（0）</li><li>然后会将ip端口、链接等放在到注册中心（1）</li><li>顾客想调用服务，会去注册中心发现服务的端口链接等信息（2）</li><li>注册中心在返回给顾客（3）</li><li>最后顾客去调用服务（4）</li><li>调用过程会自动执行。Monitor用来做监控。</li></ul><p><strong>Dubbo</strong>官方推荐使用<strong>ZooKeeper</strong>作为注册中心。</p><p>简单比喻来说，就是将以前写的项目中的service和和controller分离出来，原来写在同一个项目中，现在分别创建两个项目来写service和controller。<br>service作为提供服务者（provider），在application配置文件中，将自己指定到注册中心。<br>controller作为消费者（consumer），也需要在配置文件中指定到注册中心</p><h2 id="Spring-Boot整合Dubbo"><a href="#Spring-Boot整合Dubbo" class="headerlink" title="Spring Boot整合Dubbo"></a>Spring Boot整合Dubbo</h2><ol><li><p>服务提供方和消费方的pom中导入dubbo的spring boot<a href="https://github.com/apache/dubbo-spring-boot-project/blob/master/README_CN.md">依赖</a></p></li><li><p>提供方在application配置文件中进行注册，然后在需要提供的接口实现类(也就是说要提供的服务)上，使用@Server将这个服务暴露出来</p><blockquote><p> 注意！一定要导入Dubbo的@Server包</p></blockquote></li><li><p>消费方编写controller接收提供方的接口，编写和接口相同的service接口，使用@Reference将接口注入到controller中</p></li><li><p>可以将service和controller中相同的接口抽取出来生成一个新的模块，然后在service和controller的pom文件中导入这个心模块即可</p></li></ol><p><strong>项目结构示例</strong>：</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/dubbo%E7%BB%93%E6%9E%84.png"></p><p><strong>Provider配置文件：</strong></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/%E6%8F%90%E4%BE%9B%E8%80%85%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png"></p><p><strong>Consumer配置文件：</strong></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/%E6%B6%88%E8%B4%B9%E8%80%85%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png"></p><p><strong>想使用Dubbo，要先启用zookeeper和Dubbo的监控中心</strong></p><h2 id="启动时检查"><a href="#启动时检查" class="headerlink" title="启动时检查"></a>启动时检查</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt; dubbo:consumer check=&quot;false | true&quot; / &gt;<br></code></pre></td></tr></table></figure><p>在整个服务启动时，注册中心会检查消费方和提供方是否存在于注册中心。默认为true开启自动检查，如果有一方没有在注册中心，比如提供方没有在注册中，启动消费方时，就会报错。<br>将check设置为false，则不会启用自动检查，只有在相互调用时才会启动检查。</p><h2 id="连接超时"><a href="#连接超时" class="headerlink" title="连接超时"></a>连接超时</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt; dubbo: timeout=&quot;3000&quot; / &gt;<br></code></pre></td></tr></table></figure><p>默认为1000也就是一秒。通过设置连接超时，可以防止消费方在获取服务时造成线程阻塞。</p><h2 id="重试次数"><a href="#重试次数" class="headerlink" title="重试次数"></a>重试次数</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt; dubbo: timeout=&quot;3000&quot; retires=&quot;3&quot; / &gt;<br></code></pre></td></tr></table></figure><p>当第一次调用时失败，会额外在进行3次重新调用。</p><h2 id="多版本"><a href="#多版本" class="headerlink" title="多版本"></a>多版本</h2><p>当添加新功能后，可以让一部分用户使用新功能版本，当新版本功能稳定后，将剩下的老版本全替换为新版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">dubbo:version=1.00<br></code></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>当消费者向提供者查询对象数据时，提供者在数据库中查询后，将数据封装发送给消费者，这两个模块之间传输对象就要使用到序列化。<br>Dubbo内部已经封装好序列化，使用时只需要在pojo创建的类实现Serializable接口。</p><blockquote><p>这里创建对象的pojo也是单独的模块，在接口模块pom中导入pojo模块即可使用</p></blockquote><h2 id="地址缓存"><a href="#地址缓存" class="headerlink" title="地址缓存"></a>地址缓存</h2><blockquote><p>面试题：<br>注册中心挂了，还能访问服务么？</p><p>可以，Dubbo消费者第一次调用提供者时，会从注册中心获取地址，将地址缓存到本地，以后访问的时候不会在访问注册中心。<br>如果提供者的地址发生变化，注册中心会通知消费者，消费者的本地缓存也会发生变化</p></blockquote><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p><strong>Dubbo提供了四种策略：</strong></p><ol><li>Random。按权重随机，默认权重为100。权重可以设置更改</li><li>RoundRobn。按权重轮询。权重相同，按照1、2、3…这样依次来。权重高，会优先访问</li><li>LeastActive。最少活跃调用数。优先访问速度快的服务提供者。速度相同，则随机</li><li>ConsistenHash。一致性Hash。请求的参数相同，则请求到同一个提供者</li></ol><h2 id="集群容错"><a href="#集群容错" class="headerlink" title="集群容错"></a>集群容错</h2><p>服务提供者提供了三台提供服务器，当消费者调用A台服务器时发生错误时，处理方法如下：</p><p><strong>集群容错模式：</strong></p><ol><li><p>Failover Cluster</p><blockquote><p> 失败重试，默认重试2次。访问A台服务器出错，会去访问B，B出错访问D，这两次全部出错，则报异常.一般用于读操作。使用retries配置</p></blockquote></li><li><p>Failfast Cluster</p><blockquote><p>快速失败。只发起一次调用，失败就报错。用于写操作</p></blockquote></li><li><p>Failsafe Cluster</p><blockquote><p>失败安全，出现异常，直接忽略，返回空结果。用于日志</p></blockquote></li><li><p>Failback Cluster</p><blockquote><p>失败后自动恢复，当请求失败后，会定时自动发请求，直到成功为止。</p></blockquote></li><li><p>Forking Cluster</p><blockquote><p>并行调用多个服务器，只要有一个成功即成功。广撒网，捞到一个就赚。耗性能</p></blockquote></li><li><p>Broadcast Cluster</p><blockquote><p>广播所有提供者，逐个调用，有一个报错则报错</p></blockquote></li></ol><h2 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h2><p>比如提供广告、支付、游戏多个服务，服务器性能不够，可以将某个服务降级</p><p><strong>降级方式：</strong></p><ol><li><p>mock=force:return null </p><blockquote><p>消费者调用该方法全部返回null，用来屏蔽不重要的服务，不会发起远程调用</p></blockquote></li><li><p>mock=fail:return null </p><blockquote><p>消费者在调用服务发生错误时，返回null。不抛异常。用来容忍不重要服务 在不稳定的时候也可以调用</p></blockquote></li></ol><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p>学这个Dubbo在配置zookeeper时，总是提示一些错误，写好的代码因为这些工具报错没有去测试是否成功，感觉学了个空壳子。<br><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/%E8%9C%A1%E7%AC%94%E5%B0%8F%E6%96%B0.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>RPC分布式服务框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dubbo</tag>
      
      <tag>分布式</tag>
      
      <tag>RPC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git常用命令</title>
    <link href="/2021/08/16/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/08/16/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>一些平时经常使用的命令<span id="more"></span></p><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><blockquote><p>git  status</p></blockquote><h3 id="初始化本地库"><a href="#初始化本地库" class="headerlink" title="初始化本地库"></a>初始化本地库</h3><blockquote><p>git init</p></blockquote><p>在本地磁盘下创建一个文件夹，使用git进入该文件夹，使用git init进行初始化，初始化后不要修改生成的文件</p><h3 id="将文件添加到暂存区"><a href="#将文件添加到暂存区" class="headerlink" title="将文件添加到暂存区"></a>将文件添加到暂存区</h3><blockquote><p>git add 文件名</p></blockquote><h3 id="从暂存区删除文件"><a href="#从暂存区删除文件" class="headerlink" title="从暂存区删除文件"></a>从暂存区删除文件</h3><blockquote><p>git rm –cached 文件名</p></blockquote><h3 id="将暂存区文件提交到本地库"><a href="#将暂存区文件提交到本地库" class="headerlink" title="将暂存区文件提交到本地库"></a>将暂存区文件提交到本地库</h3><blockquote><p>git commit -m “说明信息” 文件名</p></blockquote><h3 id="查看版本日志信息"><a href="#查看版本日志信息" class="headerlink" title="查看版本日志信息"></a>查看版本日志信息</h3><blockquote><p>git reflog,简略</p><p>git log,完整信息</p></blockquote><h3 id="版本穿梭-切换版本"><a href="#版本穿梭-切换版本" class="headerlink" title="版本穿梭(切换版本)"></a>版本穿梭(切换版本)</h3><blockquote><p>git reset –hard 版本号</p></blockquote><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><blockquote><p>git branch -v</p></blockquote><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><blockquote><p>git branch 分支名</p></blockquote><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><blockquote><p>git checkout 分支名</p><p>切换回master git checkout master</p></blockquote><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><blockquote><p>git merge 分支名</p></blockquote><h3 id="冲突合并"><a href="#冲突合并" class="headerlink" title="冲突合并"></a>冲突合并</h3><p>两个分支在同一个文件的同一个位置，有两套不同的修改，git无法决定使用哪一个，必须人为决定</p><p>进入文件，将文件中的《《《《 和====和》》》内容删除，保留想要更改的内容</p><p>然后提交暂存区、提交本地库。提交本地库时，不加文件名，例如 git commit -m “test”</p><h3 id="查看远程库别名"><a href="#查看远程库别名" class="headerlink" title="查看远程库别名"></a>查看远程库别名</h3><blockquote><p>git remote -v</p></blockquote><h3 id="创建远程库别名"><a href="#创建远程库别名" class="headerlink" title="创建远程库别名"></a>创建远程库别名</h3><blockquote><p>git remote add  别名  链接</p><p>别名最好和仓库名相同</p></blockquote><h3 id="推送远程库"><a href="#推送远程库" class="headerlink" title="推送远程库"></a>推送远程库</h3><blockquote><p>git push 别名(或者链接名)  分支名</p></blockquote><h3 id="拉取远程库"><a href="#拉取远程库" class="headerlink" title="拉取远程库"></a>拉取远程库</h3><blockquote><p>git pull 别名(或链接名) 分支名</p></blockquote><h3 id="克隆远程库到本地"><a href="#克隆远程库到本地" class="headerlink" title="克隆远程库到本地"></a>克隆远程库到本地</h3><blockquote><p>git clone 链接</p></blockquote><h3 id="生成ssh免密登录"><a href="#生成ssh免密登录" class="headerlink" title="生成ssh免密登录"></a>生成ssh免密登录</h3><blockquote><p>ssh-keygen -t rsa -C </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot</title>
    <link href="/2021/08/12/SpringBoot/"/>
    <url>/2021/08/12/SpringBoot/</url>
    
    <content type="html"><![CDATA[<p><strong>08.16，手残误删已经写好的spring boot笔记，无法恢复。</strong></p><p><strong>等有时间在补出来。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Spring大家族</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM整合</title>
    <link href="/2021/07/30/SSM%E6%95%B4%E5%90%88/"/>
    <url>/2021/07/30/SSM%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<p> <a href="https://mp.weixin.qq.com/s/SDxqGu_il3MUCTcN1EYrng">SSM框架整合</a> <span id="more"></span>做一个勤劳的搬运工(实际就是懒)</p><p><strong>解决浏览器乱码问题</strong></p><p>在web.xml文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--解决浏览器乱码问题--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>forceEncoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>characterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring大家族</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis</title>
    <link href="/2021/07/19/MyBatis/"/>
    <url>/2021/07/19/MyBatis/</url>
    
    <content type="html"><![CDATA[<h2 id="扯一下："><a href="#扯一下：" class="headerlink" title="扯一下："></a>扯一下：</h2><p><strong>为什么使用MyBatis</strong></p><span id="more"></span><ul><li>简化JDBC代码</li><li>简单易学</li><li>sql与代码分离,提高可维护性</li></ul><p>最好的学习还是看官方文档:<a href="https://mybatis.org/mybatis-3/zh/index.html">MyBatis</a></p><p><em>MyBatis的官方文档相对来说比较简单点，而且支持中文版</em></p><blockquote><p>理解概念:</p><p><strong>持久化</strong>:将程序的数据持久状态(保存到数据库)和瞬时状态(断电即失)转化的过程</p><p><strong>持久层</strong>:完成持久化工作的代码块</p></blockquote><h2 id="实现MyBatis步骤"><a href="#实现MyBatis步骤" class="headerlink" title="实现MyBatis步骤:"></a><strong>实现MyBatis步骤:</strong></h2><p><strong>1、导入MyBatis</strong></p><p>在Maven的pom文件中导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xm">&lt;dependency&gt;<br>&lt;groupId&gt;org.mybatis&lt;/groupId&gt;<br>    &lt;artifactId&gt;mybatis&lt;/artifactId&gt;<br>    &lt;version&gt;3.5.2&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p><strong>2、配置工具类,用来获取sqlSession</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisUtils</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//获取sqlSessionFactory对象</span><br>            String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            InputStream inputStream = Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSqlSession</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(<span class="hljs-keyword">true</span>);<span class="hljs-comment">//true则是事务默认提交，后续sql增删改不用手动写提交了</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3、在resources目录下创建工具类中的mybatis核心配置.xml文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 核心配置文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><span class="hljs-comment">&lt;!--  每一个xxxMapping.xml文件都需要在mybatis核心配置文件中注册  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/mhy/dao/UserMapper.xml&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>核心配置文件中可以引用外部文件</strong></p><p>在resources包下新建一个db.properties</p><p>核心配置文件中引入:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--   引入外部配置文件 --&gt;<br>    &lt;properties resource=<span class="hljs-string">&quot;db.properties&quot;</span> /&gt;<br>    ...<br>    &lt;property name=<span class="hljs-string">&quot;driver&quot;</span> value=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;<br>    &lt;property name=<span class="hljs-string">&quot;url&quot;</span> value=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;<br>    ...<br></code></pre></td></tr></table></figure><p><strong>起别名</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//给bean起别名</span><br>    &lt;typeAliases&gt;<br>    <span class="hljs-comment">//第一种</span><br>        &lt;typeAlias type=<span class="hljs-string">&quot;com.mhy.pojo.User&quot;</span> alias=<span class="hljs-string">&quot;User&quot;</span> /&gt;<br>    <span class="hljs-comment">//第二种,扫描包中所有的java Bean，会使用 Bean 的首字母小写的非限定类名来作为它的别名。</span><br>    &lt;<span class="hljs-keyword">package</span> name=<span class="hljs-string">&quot;domain.blog&quot;</span>/&gt;<br>    &lt;/typeAliases&gt;<br>    <br>    <span class="hljs-comment">//第三种,在类上使用注解 </span><br>    <span class="hljs-meta">@Alias(&quot;author&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Author</span> </span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p><strong>4、编写DAO接</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//示例:</span><br><span class="hljs-keyword">import</span> com.mhy.pojo.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;<br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5、编写UserDao对应的xxxMapping.xml文件</strong></p><p><strong>与之前的写法区别:</strong></p><p>之前：写完接口，写对用的接口实现类.比如:UserDao➡UserDaoImpl</p><p>现在：写完接口，编写对应的xxx.xml文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- namespace:绑定一个对应的DAO接口 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.mhy.dao.UserDao&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- id表示接口中的方法,resultType表示返回结果的类型,写到具体的类 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.mhy.pojo.User&quot;</span>&gt;</span><br>        select * from mybatis.user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>6、编写测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//第一步:调用工具类,获得SqlSession对象</span><br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        <span class="hljs-comment">//第二步:执行SQL</span><br>        UserDao mapper = sqlSession.getMapper(UserDao.class);<br>        List&lt;User&gt; userList = mapper.getUserList();<br><br>        <span class="hljs-keyword">for</span> (User user : userList)&#123;<br>            System.out.println(user);<br>        &#125;<br>        <span class="hljs-comment">//关闭资源</span><br>        sqlSession.close();<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="CRUD-内含注解"><a href="#CRUD-内含注解" class="headerlink" title="CRUD(内含注解)"></a>CRUD(内含注解)</h2><h3 id="使用xml进行CRUD"><a href="#使用xml进行CRUD" class="headerlink" title="使用xml进行CRUD"></a>使用xml进行CRUD</h3><p><strong>步骤：</strong></p><ul><li>写接口</li><li>在核心配置文件中注册xml文件</li><li>写xml文件中的sql语句</li><li>写测试类</li></ul><blockquote><p>注意：</p><p>增删改操作，必须提交事务!!!否则sql语句无效.</p><p>在测试类中记得提交事务 sqlSession.commit();</p><p>如果在工具类中sqlSessionFactory.openSession(true);为true，则不需要在手动写提交语句！！！</p></blockquote><p><strong>DAO接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>    <span class="hljs-comment">//查询所有用户</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">//根据ID查询用户</span><br>    <span class="hljs-function">User <span class="hljs-title">getUserByID</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br><br>    <span class="hljs-comment">//增加用户</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-comment">//修改用户</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-comment">//删除</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>xxxMapping.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- namespace:绑定一个对应的DAO接口 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.mhy.dao.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  查询 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.mhy.pojo.User&quot;</span>&gt;</span><br>        select * from mybatis.user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  按id查询 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByID&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>  <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.mhy.pojo.User&quot;</span>&gt;</span><br>        select * from mybatis.user where id = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  添加  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.mhy.pojo.User&quot;</span>&gt;</span><br>        insert into mybatis.user(id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--  修改  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.mhy.pojo.User&quot;</span>&gt;</span><br>    update user<br>    set name = #&#123;name&#125;,pwd = #&#123;pwd&#125;<br>    where id = #&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!--  删除  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.mhy.pojo.User&quot;</span>&gt;</span><br>    delete<br>    from user<br>    where id = #&#123;id&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoTest</span> </span>&#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//第一步:获得SqlSession对象</span><br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        <span class="hljs-comment">//第二步:执行SQL</span><br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        List&lt;User&gt; userList = mapper.getUserList();<br><br>        <span class="hljs-keyword">for</span> (User user : userList)&#123;<br>            System.out.println(user);<br>        &#125;<br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span>&#123;<br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        User user = mapper.getUserByID(<span class="hljs-number">3</span>);<br>        System.out.println(user);<br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-comment">//特别注意需要提交事务，否则插入不会成功.增删改都需要提交事务</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span>&#123;<br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-keyword">int</span> i = mapper.addUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;112233&quot;</span>));<br>        <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;插入数据成功&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//提交事务</span><br>        sqlSession.commit();<br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test04</span><span class="hljs-params">()</span></span>&#123;<br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-keyword">int</span> i = mapper.updateUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;马云&quot;</span>, <span class="hljs-string">&quot;111222333&quot;</span>));<br>        <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;修改成功&quot;</span>);<br>        &#125;<br>        sqlSession.commit();<br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test05</span><span class="hljs-params">()</span></span>&#123;<br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-keyword">int</span> i = mapper.deleteUser(<span class="hljs-number">4</span>);<br>        <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125;<br>        sqlSession.commit();<br>        sqlSession.close();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用注解进行CRUD"><a href="#使用注解进行CRUD" class="headerlink" title="使用注解进行CRUD"></a>使用注解进行CRUD</h3><blockquote><p>注解只能进行简单的操作，比如Bean属性与数据库字段不同名就无法解决。</p><p>实际开发中还是提倡使用xml配置文件来开发!!!</p></blockquote><ol><li>编写接口和sql</li><li>在核心配置文件中注册接口</li><li>写测试类</li></ol><p><strong>接口层</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br><br>    <span class="hljs-comment">//查询所有的用户</span><br>    <span class="hljs-meta">@Select(&quot;select * from user&quot;)</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getAllUser</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-comment">//按照id查询用户</span><br>    <span class="hljs-meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-function">User <span class="hljs-title">selectById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br><br>    <span class="hljs-comment">//增加一个用户</span><br>    <span class="hljs-meta">@Insert(&quot;insert into user(id,name,pwd) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-comment">//修改一个用户</span><br>    <span class="hljs-meta">@Update(&quot;update user set name = #&#123;name&#125;,pwd=#&#123;password&#125; where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br><br>    <span class="hljs-comment">//删除用户</span><br>    <span class="hljs-meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-keyword">int</span> id)</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>在核心配置文件中绑定接口</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.mapper.UserMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperTest</span> </span>&#123;<br>  <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getAllUser</span><span class="hljs-params">()</span></span>&#123;<br><br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        List&lt;User&gt; allUser = mapper.getAllUser();<br>        <span class="hljs-keyword">for</span> (User user : allUser)&#123;<br>            System.out.println(user);<br>        &#125;<br><br>        sqlSession.close();<br><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectById</span><span class="hljs-params">()</span></span>&#123;<br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        User user = mapper.selectById(<span class="hljs-number">1</span>);<br>        System.out.println(user);<br><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span></span>&#123;<br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-keyword">int</span> i = mapper.addUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;mhy&quot;</span>, <span class="hljs-string">&quot;88888888&quot;</span>));<br>        <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;添加成功&quot;</span>);<br>        &#125;<br><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateUser</span><span class="hljs-params">()</span></span>&#123;<br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-keyword">int</span> i = mapper.updateUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;李嘉诚&quot;</span>, <span class="hljs-string">&quot;888888&quot;</span>));<br>        <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;修改成功&quot;</span>);<br>        &#125;<br><br>        sqlSession.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">()</span></span>&#123;<br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        <span class="hljs-keyword">int</span> i = mapper.deleteUser(<span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">if</span> (i&gt;<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>        &#125;<br>        List&lt;User&gt; allUser = mapper.getAllUser();<br>        <span class="hljs-keyword">for</span> (User user : allUser)&#123;<br>            System.out.println(user);<br>        &#125;<br><br>        sqlSession.close();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="万能map"><a href="#万能map" class="headerlink" title="万能map"></a><strong>万能map</strong></h2><p><em>实际开发中常用</em></p><p>使用场景：当表中的字段过多，传统写法需要new 一个javaBean对象，并把对象中的属性全部写出来，使用map可以简化写法，只需要写出需要的属性即可，不用把数据库中的字段或javabean对象属性全部写出来.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//示例:</span><br><span class="hljs-comment">//接口中参数传递Map</span><br><span class="hljs-function">User <span class="hljs-title">selectUser</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>;<br><br><span class="hljs-comment">//编写sql语句时，参数类型为Map</span><br>&lt;select id=<span class="hljs-string">&quot;selectUser&quot;</span> parameterType=<span class="hljs-string">&quot;map&quot;</span> resultType=<span class="hljs-string">&quot;com.mhy.pojo.User&quot;</span>&gt;<br>select * from user where name = #&#123;username&#125; and pwd = #&#123;pwd&#125; <span class="hljs-comment">//参数名可以任意起名 </span><br>&lt;/select&gt;<br>            <br>    <span class="hljs-comment">//测试类</span><br>            <span class="hljs-comment">//创建Map对象</span><br>            Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br><span class="hljs-comment">//参数名必须与sql语句中的参数名相同</span><br>map.put(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;小明&quot;</span>);<br>map.put(<span class="hljs-string">&quot;pwd&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>User user = mapper.selectUser(map);<br></code></pre></td></tr></table></figure><p>​    <strong>模糊查询</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//示例:</span><br><span class="hljs-comment">//接口层</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserLike</span><span class="hljs-params">(String value)</span></span>;<br><br><span class="hljs-comment">//sql层</span><br>&lt;select id=<span class="hljs-string">&quot;getUserLike&quot;</span> resultType=<span class="hljs-string">&quot;com.mhy.pojo.User&quot;</span>&gt;<br>    select *<br>   from user<br>    where name like #&#123;name&#125;;<br>&lt;/select&gt;<br>         <br>     <span class="hljs-comment">//测试层</span><br>            List&lt;User&gt; userLike = mapper.getUserLike(<span class="hljs-string">&quot;%李%&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="映射器需要注意的问题"><a href="#映射器需要注意的问题" class="headerlink" title="映射器需要注意的问题"></a>映射器需要注意的问题</h2><p>官方给出的几种注册示例:</p><p><strong>推荐使用这种</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span><br><span class="hljs-comment">&lt;!-- 推荐使用这种，写一个接口,就写一个对用的Mapper.xml文件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>不推荐使用这种(别用就对了):</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;file:///var/mappers/AuthorMapper.xml&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以下两种会出现一些问题（问题就不再举例， 只说解决方法）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.mybatis.builder&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>解决方法:</p><ul><li>接口必须和对应的Mapper.xml文件同名.比如：UserMapper.java,UserMapper.xml</li><li>接口必须和对应的Mapper.xml文件在同一包下 。</li></ul><h2 id="ResultMap"><a href="#ResultMap" class="headerlink" title="ResultMap"></a>ResultMap</h2><h3 id="解决数据库字段与属性名不同问题"><a href="#解决数据库字段与属性名不同问题" class="headerlink" title="解决数据库字段与属性名不同问题"></a>解决数据库字段与属性名不同问题</h3><p>产生的问题:</p><blockquote><p>id  name  pwd                   数据库中的字段</p><p>id  name  password         Bean中的属性</p><p>执行sql语句从数据库中取出值，由于pwd和password命名不同，导致pwd的值不能映射到password上，password输出的值为空</p></blockquote><p>解决办法:</p><ol><li><p>编写sql语句时起别名.pwd as password</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>  select id , name , pwd as password from user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>结果集映射(ResultMa)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- id为主键 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>   <span class="hljs-comment">&lt;!-- column是数据库表的列名 , property是对应实体类的属性名 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pwd&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUserById&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserMap&quot;</span>&gt;</span><br>  select id , name , pwd from user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="STDOUT-LOGGING"><a href="#STDOUT-LOGGING" class="headerlink" title="STDOUT_LOGGING"></a>STDOUT_LOGGING</h3><p>标准日志工厂实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  在核心配置文件，configuration下加入此配置  --&gt;</span><br><span class="hljs-comment">&lt;!--  标准日志工厂实现  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 控制台打印结果 --&gt;</span><br>Logging initialized using &#x27;class org.apache.ibatis.logging.stdout.StdOutImpl&#x27; adapter.<br>PooledDataSource forcefully closed/removed all connections.<br>PooledDataSource forcefully closed/removed all connections.<br>PooledDataSource forcefully closed/removed all connections.<br>PooledDataSource forcefully closed/removed all connections.<br>Opening JDBC Connection<br>Created connection 1943325854.<br>Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@73d4cc9e]<br>==&gt;  Preparing: select * from user where id = 1; <br>==&gt; Parameters: <br>&lt;==    Columns: id, name, pwd<br>&lt;==        Row: 1, 马云, 111222333<br>&lt;==      Total: 1<br>User&#123;id=1, name=&#x27;马云&#x27;, password=&#x27;111222333&#x27;&#125;<br></code></pre></td></tr></table></figure><h3 id="LOG4J"><a href="#LOG4J" class="headerlink" title="LOG4J"></a>LOG4J</h3><p>可以将信息输出到控制台、文件、GUI组件、服务器等.</p><p>1、导入LOG4J依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、创建log4j properties配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><br><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#控制台输出的相关设置</span><br><span class="hljs-meta">log4j.appender.console</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><br><span class="hljs-meta">log4j.appender.console.Target</span> = <span class="hljs-string">System.out</span><br><span class="hljs-meta">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.appender.console.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">[%c]-%m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#文件输出的相关设置</span><br><span class="hljs-meta">log4j.appender.file</span> = <span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-meta">log4j.appender.file.File</span>=<span class="hljs-string">./log/kuang.log</span><br><span class="hljs-meta">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><br><span class="hljs-meta">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#日志输出级别</span><br><span class="hljs-meta">log4j.logger.org.mybatis</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><br><span class="hljs-meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="hljs-string">DEBUG</span><br></code></pre></td></tr></table></figure><p>3、在核心配置文件中引入log4j配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;LOG4J&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4、编写测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注意一定要导入apache的包</span><br><span class="hljs-keyword">import</span> org.apache.log4j.Logger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDaoTest</span> </span>&#123;<br><br>   <span class="hljs-keyword">static</span> Logger logger = Logger.getLogger(UserDaoTest.class);<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        User user = mapper.selectById(<span class="hljs-number">1</span>);<br>        logger.info(user);<br>        System.out.println(user);<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//生成的日志文件</span><br>[INFO][<span class="hljs-number">21</span>-<span class="hljs-number">07</span>-<span class="hljs-number">24</span>][com.mhy.dao.UserDaoTest]User&#123;id=<span class="hljs-number">1</span>, name=<span class="hljs-string">&#x27;马云&#x27;</span>, password=<span class="hljs-string">&#x27;111222333&#x27;</span>&#125;<br><br>--------------------------------------------------------------------------------------------<br>    <span class="hljs-comment">//几种级别</span><br>            logger.debug();<br>logger.info();<br>logger.error();<br></code></pre></td></tr></table></figure><h2 id="多对一关系处理"><a href="#多对一关系处理" class="headerlink" title="多对一关系处理"></a>多对一关系处理</h2><p>场景:查询所有的学生，包括对应的辅导员</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 结果集映射 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;getTeacher&quot;</span>&gt;</span><br>        select s.id sid,s.name sname, t.name tname,t.id tid<br>        from student s,teacher t<br>        where s.tid = t.id<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sid&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 第二种写法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent&quot;</span>  <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;getTeacher&quot;</span>&gt;</span><br>        select *<br>        from student<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;teacher&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tid&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Teacher&quot;</span> <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;teacher&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teacher&quot;</span>&gt;</span><br>        select *<br>        from teacher<br>        where id = #&#123;tid&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="一对多关系处理"><a href="#一对多关系处理" class="headerlink" title="一对多关系处理"></a>一对多关系处理</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getTeacher&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;getStudent&quot;</span>&gt;</span><br>        select t.name tname,s.name sname<br>        from teacher t ,student s<br>        where t.id = s.tid and t.id = #&#123;tid&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getStudent&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Teacher&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tname&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sname&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><blockquote><p>一对多和多对一区别在于:</p><p>association 用于多对一</p><p>collection 用于一对多</p><p>具体使用方法仔细观察以上上面代码</p></blockquote><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>定义:将结果保存暂时到内存中，解决一些并发问题</p><p>MyBatis中有两种缓存:<strong>一级缓存、二级缓存</strong></p><p>**一级缓存(本地缓存)**是默认开启，只存在于一个sqlsession中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        User user01 = mapper.getUserById(<span class="hljs-number">1</span>);<br>        System.out.println(user01);<br>        System.out.println(<span class="hljs-string">&quot;======================&quot;</span>);<br>        User user02 = mapper.getUserById(<span class="hljs-number">1</span>);<br>        System.out.println(user01==user02);<span class="hljs-comment">//结果为true</span><br>        sqlSession.close();<br><span class="hljs-comment">//运行结果只会运行一条sql语句</span><br></code></pre></td></tr></table></figure><p><strong>如果在sqlsession中存在增删改操作，那么缓存就会刷新</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">SqlSession sqlSession = MyBatisUtils.getSqlSession();<br>        UserMapper mapper = sqlSession.getMapper(UserMapper.class);<br>        User user01 = mapper.getUserById(<span class="hljs-number">1</span>);<br>        System.out.println(user01);<br><br><span class="hljs-comment">//更新一条记录</span><br>        <span class="hljs-keyword">int</span> updateUser = mapper.updateUserById(<span class="hljs-keyword">new</span> User(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;mhy&quot;</span>, <span class="hljs-string">&quot;888888&quot;</span>));<br><br>        User user02 = mapper.getUserById(<span class="hljs-number">1</span>);<br>        System.out.println(user01==user02);<span class="hljs-comment">//结果为false</span><br>        sqlSession.close();<br></code></pre></td></tr></table></figure><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p><strong>二级缓存(全局缓存)</strong></p><p>会将一级缓存中的关闭掉的数据保存到二级缓存中。新的会话可以从二级缓存中读取数据。只有一级缓存结束后，才会生成二级缓存</p><ul><li><p>在核心配置文件.xml中设置开启二级缓存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cacheEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在XXXmapper.xml中加入,即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">cache</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>对于缓存的一些清除策略，和配置，请参考官方文档<a href="https://mybatis.org/mybatis-3/zh/index.html">MyBatis</a></p></li></ul><blockquote><p>执行原理：</p><p>用户发起请求，首先会从二级缓存中查找数据，如果没有，则去一级缓存中查找，如果一级缓存也没有，最后才会去数据库中查找。</p></blockquote><h2 id="文章更新日志"><a href="#文章更新日志" class="headerlink" title="文章更新日志:"></a>文章更新日志:</h2><blockquote><p>更新日期：2021-07-28</p><p>更新内容：</p><ul><li>在文章**实现MyBatis步骤:**中加入了第一步导入MyBatis包</li></ul></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://mybatis.org/mybatis-3/zh/index.html">mybatis</a></li><li><a href="https://www.bilibili.com/video/BV1NE411Q7Nx?t=76&p=31">【狂神说Java】Mybatis最新完整教程IDEA版通俗易懂</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>MyBatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>Java</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC</title>
    <link href="/2021/07/06/SpringMVC/"/>
    <url>/2021/07/06/SpringMVC/</url>
    
    <content type="html"><![CDATA[<p>SpringMVC = Spring+M V C，没毛病吧，哈哈🐵</p><span id="more"></span><p><strong>M</strong>:Model模型 (java Bean)</p><p><strong>V</strong>: View视图 (.jsp)</p><p><strong>C</strong>: Controller控制器 (Servlet)</p><p><strong>SpringMVC思想就是有一个前端控制器能拦截所有请求，并智能派发.</strong></p><h4 id="SpringMVC执行原理-：重点"><a href="#SpringMVC执行原理-：重点" class="headerlink" title="SpringMVC执行原理 ：重点"></a><strong>SpringMVC执行原理 ：</strong>重点</h4><blockquote><p>执行流程这里写的不全，很乱，具体参考其他技术文章</p></blockquote><ol><li>用户发起请求</li><li>前端控制器（DispatcherServlet）拦截请求</li><li>解析请求，并查找具体的Controller</li><li>Controller处理业务，返回视图</li></ol><h4 id="web-xml进行配置"><a href="#web-xml进行配置" class="headerlink" title="web.xml进行配置:"></a>web.xml进行配置:</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br><span class="hljs-comment">&lt;!--初始化springmvc文件的位置,如果不进行初始化，默认在WEB-INF文件下查找文件,文件命名格式为xxx-servlet.xml--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--contextConfigLocation:指定springmvc文件位置--&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--classpath:是指从src目录下查找--&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- // /：会匹配jsp页面，/*拦截jsp页面，会报错 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="springmvc-servlet-xml配置"><a href="#springmvc-servlet-xml配置" class="headerlink" title="springmvc_servlet.xml配置"></a>springmvc_servlet.xml配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">       http://www.springframework.org/schema/mvc</span></span><br><span class="hljs-string"><span class="hljs-tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.mhy&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 让Spring MVC不处理静态资源  比如: .css  .js  .html等--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    支持mvc注解驱动</span><br><span class="hljs-comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span><br><span class="hljs-comment">        要想使@RequestMapping注解生效</span><br><span class="hljs-comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span><br><span class="hljs-comment">        和一个AnnotationMethodHandlerAdapter实例</span><br><span class="hljs-comment">        这两个实例分别在类级别和方法级别处理。</span><br><span class="hljs-comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span><br><span class="hljs-comment">     --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span> /&gt;</span>//实际开发中可省略<br>    <br>    <span class="hljs-comment">&lt;!-- 视图解析器 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;internalResourceViewResolver&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 前缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;prefix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 后缀 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;suffix&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;.jsp&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="接收前端请求的数据"><a href="#接收前端请求的数据" class="headerlink" title="接收前端请求的数据"></a>接收前端请求的数据</h4><p>@RequestParam接受前端数据.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(...)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;username&quot;)</span>String name)</span></span>&#123;<br>    sout(<span class="hljs-string">&quot;从前端接受的数据：&quot;</span>+name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Controller中几种注解"><a href="#Controller中几种注解" class="headerlink" title="Controller中几种注解"></a><strong>Controller中几种注解</strong></h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tex">@RequestParam<br>@RequestHeader<br>@CookieValue<br>每个注解中都包含三个参数:value(要查找的参数值),required(判断是否存在),defaultValue(设置默认值)<br>    <br>    区别@PathVariable、@RequestParam:<br>@PathVariable用来获取@RequestMapping(value = &quot;/book/&#123;bid&#125;&quot;)中&#123;bid&#125;的参数<br>@RequestParam用来获取@RequestMapping(value = &quot;/book&quot;)表单中的参数<br></code></pre></td></tr></table></figure><h4 id="自动封装"><a href="#自动封装" class="headerlink" title="自动封装"></a><strong>自动封装</strong></h4><p>应用场景:一个表单中有多个参数， 在Controller的方法中需要一一对应写出获取的每个参数，费时费力。</p><p>解决办法:先写出来一个pojo对象，然后在Controller方法形参中传入pojo对象即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">页面 :<br>    &lt;form action=<span class="hljs-string">&quot;info&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>        <span class="hljs-comment">//input便签中的name属性，要与B中的参数名保持一致</span><br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt;<br>      &lt;/form&gt;<br>Bean :<br>    <span class="hljs-keyword">private</span> String name;<br>    get、set、toString、有、无参构造器此处省略<br>Controller :<br>    <span class="hljs-comment">//获取表单中的信息</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/info&quot;)</span><br>        <span class="hljs-comment">//形参传入对应pojo对象即可完成自动封装</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getParam</span><span class="hljs-params">(Person person)</span></span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;自动封装&quot;</span>+person);<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/WEB-INF/pages/success.jsp&quot;</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><h4 id="数据输出到页面"><a href="#数据输出到页面" class="headerlink" title="数据输出到页面"></a><strong>数据输出到页面</strong></h4><p><strong>方法形参中传入Map、Model、ModelMap</strong></p><p>数据默认保存在<strong>Request</strong>域中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代码示例:</span><br><span class="hljs-meta">@RequestMapping(...)</span><br><span class="hljs-comment">//使用Map</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>&#123;<br>    map.put(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success.jsp&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@RequestMapping(...)</span><br><span class="hljs-comment">//使用Model</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(Model model)</span></span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success.jsp&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@RequestMapping(...)</span><br><span class="hljs-comment">//使用ModelMap</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(ModelMap modelmap)</span></span>&#123;<br>    model.addAttribute(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success.jsp&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//界面中调用Request域</span><br>$&#123;RequestScop.msg&#125;;<br></code></pre></td></tr></table></figure><h4 id="把数据放置在Session域中"><a href="#把数据放置在Session域中" class="headerlink" title="把数据放置在Session域中"></a><strong>把数据放置在Session域中</strong></h4><p>使用@SessionAttributes,该注解标明在类上!!!</p><p>@SessionAttributes有两种属性:value()用来传String类型的数据、types()用来传class类型的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//示例:</span><br><span class="hljs-meta">@SessionAttributes(value=&quot;msg&quot;)</span><span class="hljs-comment">//把msg的数据保存到Request域的同时会同时保存到Session域中,界面使用$&#123;SessionScop.msg&#125;调用</span><br><span class="hljs-comment">//多种属性值写法</span><br><span class="hljs-comment">//@SessionAttributes(value=&#123;&quot;msg&quot;,&quot;haha&quot;&#125;)//表示同时将msg和haha的值保存到Session域中</span><br><span class="hljs-comment">//@SessionAttributes(value=&#123;&quot;msg&quot;&#125;,types=&#123;String.class&#125;)//表示只要是String类型的数据，都保存到Session域中</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> class <span class="hljs-title">OutputController</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-meta">@RequestMapping(...)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>&#123;<br>    map.put(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success.jsp&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h4><p>@RequestMapping可以放在类上，也可以放在方法上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//放在类上表示首先要访问类中@RequestMapping(&quot;/hi&quot;)中的地址，然后才能访问方法中@RequestMapping(&quot;/hello&quot;)中的地址</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/hi&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> class <span class="hljs-title">HiController</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        ...<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-comment">//一般写死,在方法中写上父类地址</span><br><span class="hljs-meta">@RequestMapping(&quot;/hi/hello&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        ...<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="ModelAttributer"><a href="#ModelAttributer" class="headerlink" title="@ModelAttributer"></a>@<strong>ModelAttributer</strong></h4><p>使用场景:从页面获取要修改的数据(例如修改图书信息)，然后调用DAO中的sql，如果界面中有某一处不想修改，那么sql语句中的值可能会获取为空,最终修改后数据库中的其他数据全部为空。</p><p>原理：ModelAttributer提前于目标方法运行，可以先调用数据库中的数据，然后封装为一个bean对象，这个bean对象给其他方法提供使用。从页面获取要修改的数据覆盖ModelAttributer已经封装好的bean对象里面的数据，没有获取到的数据默认还是使用bean对象从数据库中获取的源数据，从而达到只修改部分数据效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//示例：</span><br><span class="hljs-meta">@ModelAttribute</span><span class="hljs-comment">//加了@ModelAttribute会首先执行该方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>&#123;<br>    Book book = <span class="hljs-keyword">new</span> Book();<br>    .....<span class="hljs-comment">//从数据库获取数据</span><br>     map.put(<span class="hljs-string">&quot;book&quot;</span>,book);<span class="hljs-comment">//保存获取到的信息，方便下一个方法使用</span><br>&#125;<br><br><span class="hljs-meta">@RequestMapping(...)</span><br><span class="hljs-comment">//在形参中加入@ModelAttribute(...),告诉该方法不要去封装新对象，去调用()中的已经封装好的bean对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-meta">@ModelAttribute(&quot;book&quot;)</span>Book book)</span></span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h4><p>原始的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(...)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    ......<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success.jsp&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>携带界面返回值的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(...)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    ......<br>       ModelAndView mv =<span class="hljs-keyword">new</span> ModelAndView(<span class="hljs-string">&quot;success.jsp&quot;</span>);<br>    <span class="hljs-keyword">return</span> mv;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="其他跳转页面的方法"><a href="#其他跳转页面的方法" class="headerlink" title="其他跳转页面的方法"></a><strong>其他跳转页面的方法</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">-------------------------------------**转发:forword**---------------------------------------------<br><span class="hljs-comment">//原始跳转页面方法:</span><br><span class="hljs-meta">@RequestMapping(...)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    ...<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success.jsp&quot;</span>;<br>&#125;<br><span class="hljs-comment">//改变后的方法:</span><br><span class="hljs-meta">@RequestMapping(&quot;/hi&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    ...<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forword:/success.jsp&quot;</span>;<span class="hljs-comment">//使用forword:表示转发到当前项目下的指定页面.一定要加上/，否则表示相对路径，易出错</span><br>&#125;<br><br><span class="hljs-comment">//改变后的方法:</span><br><span class="hljs-meta">@RequestMapping(&quot;/hii&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    ...<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forword:/hi&quot;</span>;<span class="hljs-comment">//也可以跳转到其他的请求方法。多层跳转</span><br>&#125;<br><br>-------------------------------------**重定向:redirect**---------------------------------------------<br><span class="hljs-meta">@RequestMapping(&quot;hi&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    ...<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/success.jsp&quot;</span>;<span class="hljs-comment">//也可以跳转到其他的请求方法。多层跳转</span><br>&#125;  <br><span class="hljs-comment">//也可以进行多层跳转</span><br><span class="hljs-meta">@RequestMapping(&quot;he&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    ...<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/hi&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p>后端提供json字符串，前端将json字符串转换为对象。</p><p>JSON字符串转换为JavaScript对象，使用JSON.parse()方法</p><p>JavaScript对象转换为JSON字符串,使用JSON.stringify()方法</p><h4 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//导入依赖</span><br>&lt;dependency&gt;<br>            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;<br>            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">2.10</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>    <br>    <span class="hljs-comment">//使用ObjectMapper将对象转换为字符串</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/j1&quot;)</span><br>    <span class="hljs-meta">@ResponseBody</span><span class="hljs-comment">//不会进行视图解析，只会返回字符串</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> Exception</span>&#123;<br>    <span class="hljs-comment">//创建ObjectMapper对象</span><br>        ObjectMapper objectMapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;马浩然&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;河南&quot;</span>);<br>    <span class="hljs-comment">//使用objectMapper对象中的方法将对象转换为字符串输出</span><br>        String s = objectMapper.writeValueAsString(user);<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>----------------------------------------------------------------------------<br><span class="hljs-comment">//在类上直接使用 @RestController ，这样里面所有的方法都只会返回json字符串，不用再每一个都添加@ResponseBody ！我们在前后端分离开发中，一般都使用 @RestController ，十分便捷</span><br>    <span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>   <span class="hljs-meta">@RequestMapping(value = &quot;/json1&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">json1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException </span>&#123;<br>       <span class="hljs-comment">//创建一个jackson的对象映射器，用来解析数据</span><br>       ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>       <span class="hljs-comment">//创建一个对象</span><br>       User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;马浩然&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>       <span class="hljs-comment">//将我们的对象解析成为json格式</span><br>       String str = mapper.writeValueAsString(user);<br>       <span class="hljs-keyword">return</span> str;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>封装为一个JsonUtil</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//工具类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonUtil</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getJson</span><span class="hljs-params">(Object obj)</span></span>&#123;<br>        ObjectMapper mapper = <span class="hljs-keyword">new</span> ObjectMapper();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> mapper.writeValueAsString(obj);<br>        &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//方法调用</span><br><span class="hljs-meta">@RequestMapping(&quot;/j2&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test02</span><span class="hljs-params">()</span></span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;马浩然&quot;</span>,<span class="hljs-number">23</span>,<span class="hljs-string">&quot;男&quot;</span>);<br>        <span class="hljs-keyword">return</span> JsonUtil.getJson(user);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h4><blockquote><p>阿里巴巴开发，方便实现json对象与javaBean对象之间的相互转换.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//导入依赖</span><br>&lt;dependency&gt;<br>   &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>   &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>   &lt;version&gt;<span class="hljs-number">1.2</span><span class="hljs-number">.60</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>    <span class="hljs-comment">//方法中使用</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/j3&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test03</span><span class="hljs-params">()</span></span>&#123;<br>        User user = <span class="hljs-keyword">new</span> User(<span class="hljs-string">&quot;mhy&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;男&quot;</span>);<br>    <span class="hljs-comment">//区别jackson中第一步要创建一个ObjectMapper对象。FastJson直接使用JSON.调用方法即可</span><br>        String s = JSON.toJSONString(user);<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="解决乱码问题"><a href="#解决乱码问题" class="headerlink" title="解决乱码问题"></a>解决乱码问题</h4><p>在web.xml配置spring官方过滤器即可:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>encoding<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 解决JSON乱码 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">mvc:message-converters</span> <span class="hljs-attr">register-defaults</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;objectMapper&quot;</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;failOnEmptyBeans&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:message-converters</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="RestFul-CRUD"><a href="#RestFul-CRUD" class="headerlink" title="RestFul_(CRUD)"></a>RestFul_(CRUD)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">以简洁的URL提交请求<br>    原始对数据库进行CRUD：<br>    /getBook?id=<span class="hljs-number">1</span>:查询图书<br>    /deleteBook?id=<span class="hljs-number">1</span>:删除<span class="hljs-number">1</span>号图书<br>    /updateBook?id=<span class="hljs-number">1</span>:更新<span class="hljs-number">1</span>号图书<br>    /addBook:添加图书<br>REST推荐：<br>    /资源名/资源标识符<br>    /book/<span class="hljs-number">1</span>:GET----查询<span class="hljs-number">1</span>号图书<br>    /book/<span class="hljs-number">1</span>:PUT----更新<span class="hljs-number">1</span>号图书<br>/book/<span class="hljs-number">1</span>:DELETE--删除<span class="hljs-number">1</span>号图书<br>    /book/<span class="hljs-number">1</span>:POST----添加图书<br>------------------------------------------------------------------------------------------------------<br>实现方法:(使用filter转换delete和put请求)<br><span class="hljs-number">1</span>、在web.xml配置filter<br>    <br>     &lt;filter&gt;<br>        &lt;filter-name&gt;HiddenHttpMethodFilter&lt;/filter-name&gt;<br>        &lt;filter-<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;<span class="hljs-title">org</span>.<span class="hljs-title">springframework</span>.<span class="hljs-title">web</span>.<span class="hljs-title">filter</span>.<span class="hljs-title">HiddenHttpMethodFilter</span>&lt;/<span class="hljs-title">filter</span>-<span class="hljs-title">class</span>&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">filter</span>&gt;</span><br><span class="hljs-class">            </span><br><span class="hljs-class">    &lt;<span class="hljs-title">filter</span>-<span class="hljs-title">mapping</span>&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">filter</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">HiddenHttpMethodFilter</span>&lt;/<span class="hljs-title">filter</span>-<span class="hljs-title">name</span>&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;/*&lt;/<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">filter</span>-<span class="hljs-title">mapping</span>&gt;</span><br><span class="hljs-class">    </span><br><span class="hljs-class">2、在页面中创建表单，使用&lt;<span class="hljs-title">input</span> <span class="hljs-title">name</span></span>=<span class="hljs-string">&quot;_method&quot;</span> value=<span class="hljs-string">&quot;&#123;delete、put&#125;&quot;</span>&gt;来设置删除和更新<br><br>&lt;form action=<span class="hljs-string">&quot;book/1&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>  &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;查询图书&quot;</span>&gt;<br>&lt;/form&gt;<br>        <br>  &lt;form action=<span class="hljs-string">&quot;book&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;添加图书&quot;</span>&gt;<br>  &lt;/form&gt;<br><br>  &lt;form action=<span class="hljs-string">&quot;book/1&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;input name=<span class="hljs-string">&quot;_method&quot;</span> value=<span class="hljs-string">&quot;delete&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;删除1号图书&quot;</span>&gt;<br>  &lt;/form&gt;<br><br>  &lt;form action=<span class="hljs-string">&quot;book/1&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;input name=<span class="hljs-string">&quot;_method&quot;</span> value=<span class="hljs-string">&quot;put&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;更新1号图书&quot;</span>&gt;<br>  &lt;/form&gt;<br>  <br><span class="hljs-number">3</span>、在控制器中加入method条件来获取表单中具体的CRUD操作<br><br><span class="hljs-meta">@RequestMapping(value = &quot;/book/&#123;bid&#125;&quot;,method = RequestMethod.GET)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">selectBook</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;bid&quot;)</span>Integer id)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;查询到了&quot;</span>+id+<span class="hljs-string">&quot;图书&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/WEB-INF/pages/success.jsp&quot;</span>;<br>    &#125;<br><br><span class="hljs-meta">@RequestMapping(value = &quot;/book&quot;,method = RequestMethod.POST)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">addBook</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;添加图书&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/WEB-INF/pages/success.jsp&quot;</span>;<br>    &#125;<br><span class="hljs-meta">@RequestMapping(value = &quot;/book/&#123;bid&#125;&quot;,method = RequestMethod.DELETE)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">deleteBook</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;bid&quot;)</span> Integer id)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;删除&quot;</span>+id+<span class="hljs-string">&quot;图书&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/WEB-INF/pages/success.jsp&quot;</span>;<br>    &#125;<br><br><span class="hljs-meta">@RequestMapping(value = &quot;/book/&#123;bid&#125;&quot;,method = RequestMethod.PUT)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">updateBook</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;bid&quot;)</span> Integer id)</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;更新&quot;</span>+id+<span class="hljs-string">&quot;图书&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;/WEB-INF/pages/success.jsp&quot;</span>;<br>    &#125;<br>可能遇到的问题，tomcat版本高，可能报<span class="hljs-number">405</span>，解决办法在界面中加入 isErrorPage=<span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><p><a href="https://mp.weixin.qq.com/s/tB4YX4H59wYS6rxaO3K2_g">狂神说SpringMVC07：Ajax研究</a></p><h3 id="拦截器-文件的上传和下载"><a href="#拦截器-文件的上传和下载" class="headerlink" title="拦截器+文件的上传和下载"></a>拦截器+文件的上传和下载</h3><p>代码是死的，实现文件上传和下载代码，实际中直接拷贝</p><p><a href="https://mp.weixin.qq.com/s/NWJoYiirbkSDz6x01Jji3g">狂神说SpringMVC08：拦截器+文件上传下载</a></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.bilibili.com/video/BV1aE41167Tu?p=17">【狂神说Java】SpringMVC最新教程IDEA版通俗易懂</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring大家族</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
      <tag>SpringMVC</tag>
      
      <tag>REST</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring</title>
    <link href="/2021/04/02/Spring/"/>
    <url>/2021/04/02/Spring/</url>
    
    <content type="html"><![CDATA[<h2 id="扯一下："><a href="#扯一下：" class="headerlink" title="扯一下："></a>扯一下：</h2><p><strong>Spring是个啥?</strong></p><span id="more"></span><blockquote><p>轻量级的开源、免费框架</p><p>控制反转IOC、面向切面AOP</p><p>让企业级开发更简单</p><p>底层原理：</p><ol><li>xml解析</li><li>工厂模式</li><li>反射</li></ol><p>弊端：配置太繁琐、麻烦</p></blockquote><p><strong>了解IOC和AOP，不必纠结太深，SpringBoot已经将SSM框架做了整合，省去了一些麻烦的配置.</strong></p><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p><em><strong>控制反转，是一种思想。没有IOC之前，创建对象和对象之间的依赖关系由程序来决定，IOC之后将创建对象交给了第三方</strong></em></p><p><strong>使用IOC之前:</strong></p><p>pojo：xxx</p><p>Dao：xxxDao→xxxDaoImpl</p><p>service：xxxService→xxxServiceImpl（new xxxDao（））</p><p><strong>使用IOC之后</strong></p><p>pojo:xxx</p><p>bean.xml配置文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;bean id=<span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;com.xxx.pojo.xxx&quot;</span>&gt;<br><span class="hljs-comment">//name是pojo里边的属性，value是给属性赋的值</span><br>       &lt;property name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;Spring&quot;</span>/&gt;<br>   &lt;/bean&gt;<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><p>使用配置文件给属性赋值，pojo里必须有对应的set属性</p></blockquote><p>test: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//解析beans.xml文件 , 生成管理相应的Bean对象</span><br>   ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>   <span class="hljs-comment">//getBean : 参数即为spring配置文件中bean的id .</span><br>   User user = (User) context.getBean(<span class="hljs-string">&quot;xxx&quot;</span>);<br>   user.show();<br></code></pre></td></tr></table></figure><h3 id="DI依赖注入"><a href="#DI依赖注入" class="headerlink" title="DI依赖注入"></a>DI依赖注入</h3><ul><li>依赖 : 指Bean对象的创建依赖于容器 . Bean对象的依赖资源 .</li><li>注入 : 指Bean对象所依赖的资源 , 由容器来设置和装配 .</li></ul><h4 id="Set注入："><a href="#Set注入：" class="headerlink" title="Set注入："></a><strong>Set注入：</strong></h4><p>pojo类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String address;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> address;<br>   &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.address = address;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br> <br>     <span class="hljs-keyword">private</span> String name;<br>     <span class="hljs-keyword">private</span> Address address;<br>     <span class="hljs-keyword">private</span> String[] books;<br>     <span class="hljs-keyword">private</span> List&lt;String&gt; hobbys;<br>     <span class="hljs-keyword">private</span> Map&lt;String,String&gt; card;<br>     <span class="hljs-keyword">private</span> Set&lt;String&gt; games;<br>     <span class="hljs-keyword">private</span> String wife;<br>     <span class="hljs-keyword">private</span> Properties info;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>常量注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.Student&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;小明&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注入Bean</p><p><strong>引用的是ref</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addr&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.Address&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重庆&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;小明&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;addr&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注入数组</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;student&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;小明&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;address&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;addr&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;books&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">array</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>西游记<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>红楼梦<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>水浒传<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注入List</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobbys&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>听歌<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>看电影<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>爬山<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注入Map</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">map</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;中国邮政&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;456456456465456&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;建设&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1456682255511&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注入set</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;games&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>LOL<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>BOB<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>COC<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注入Null</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;wife&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>注入Properties</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">props</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;学号&quot;</span>&gt;</span>20190604<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;性别&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;姓名&quot;</span>&gt;</span>小明<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="C命名和P命名注入"><a href="#C命名和P命名注入" class="headerlink" title="C命名和P命名注入"></a>C命名和P命名注入</h4><blockquote><p>C命名和P命名注入都需要在配置文件的头文件中加入约束</p><p>P命名约束:xmlns:p=”<a href="http://www.springframework.org/schema/p&quot;">http://www.springframework.org/schema/p&quot;</a></p><p>C命名约束:xmlns:c=”<a href="http://www.springframework.org/schema/c&quot;">http://www.springframework.org/schema/c&quot;</a></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">  <span class="hljs-comment">&lt;!--P(属性: properties)命名空间--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.User&quot;</span> <span class="hljs-attr">p:name</span>=<span class="hljs-string">&quot;mhy&quot;</span> <span class="hljs-attr">p:age</span>=<span class="hljs-string">&quot;18&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--C(构造: Constructor)命名空间--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.User&quot;</span> <span class="hljs-attr">c:name</span>=<span class="hljs-string">&quot;mhy&quot;</span> <span class="hljs-attr">c:age</span>=<span class="hljs-string">&quot;18&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><ul><li>注意，pojo里边的set方法别忘了</li></ul><p><strong>pojo的无参构造器怎么传递参数?</strong></p><p>pojo:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> class <span class="hljs-title">User</span><span class="hljs-params">()</span></span>&#123;<br>    <br>    <span class="hljs-keyword">private</span> String name;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(String name)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>注入方法:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 第一种根据index参数下标设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.UserT&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- index指构造方法 , 下标从0开始 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mhy&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 第二种根据参数名字设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.UserT&quot;</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- name指参数名 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mhy&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 第三种根据参数类型设置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.UserT&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mhy&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h3><p>一共有四种：</p><ol><li><p>singleton</p><blockquote><p>单例模式，Spring默认机制</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ServiceImpl&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cn.csdn.service.ServiceImpl&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;singleton&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    User user = (User) context.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>    User user2 = (User) context.getBean(<span class="hljs-string">&quot;user&quot;</span>);<br>    System.out.println(user==user2);<span class="hljs-comment">//结果为true</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>prototype</p><blockquote><p>原型模式，每次get的时候，都会产生一个新对象</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.foo.DefaultAccount&quot;</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&quot;prototype&quot;</span>/&gt;</span>  <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span>&#123;<br>    ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>    User user = (User) context.getBean(<span class="hljs-string">&quot;account&quot;</span>);<br>    User user2 = (User) context.getBean(<span class="hljs-string">&quot;account&quot;</span>);<br>    System.out.println(user==user2);<span class="hljs-comment">//结果为false</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>request</p></li><li><p>session</p></li></ol><h3 id="Bean自动装配"><a href="#Bean自动装配" class="headerlink" title="Bean自动装配"></a>Bean自动装配</h3><p>Spring中bean有三种装配机制，分别是：</p><ol><li>在xml中显式配置；</li><li>在java中显式配置；</li><li>隐式的bean发现机制和自动装配。**(重点)**</li></ol><h4 id="byName"><a href="#byName" class="headerlink" title="byName"></a>byName</h4><blockquote><p>按名字自动装配</p></blockquote><p>创建实体类 Cat、Dog、User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;miao~&quot;</span>);<br>  &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shout</span><span class="hljs-params">()</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;wang~&quot;</span>);<br>  &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> Cat cat;<br>   <span class="hljs-keyword">private</span> Dog dog;<br>   <span class="hljs-keyword">private</span> String str;<br>&#125;<br></code></pre></td></tr></table></figure><p>原始的注入:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.Dog&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.Cat&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.User&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;cat&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dog&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;str&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mhy&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用byName：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.Dog&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.Cat&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.User&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byName&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;str&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mhy&quot;</span>/&gt;</span><br>        <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>结论</strong>：使用byName注入，会根据set去找对应的方法，比如setCat()。如果将cat 的bean id改为cat01，那么就会报错，因为找不到对应的setCat01方法。<br>byName是按照set方法，比如setDog（）方法，将set去掉，然后Dog转换小写为dog，然后去查找有没有对应的bean id。</p><h4 id="byType"><a href="#byType" class="headerlink" title="byType"></a>byType</h4><blockquote><p>按类型进行装配</p></blockquote><p>将autowire改为byType</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Dog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat2&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.User&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;str&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mhy&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>注意，如果有两个bean对象，例如上边代码创建了两个cat对象:cat和cat2，这样就会NoUniqueBeanDefinitionException（不唯一）错.</li></ul><p>修改后:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Dog&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.pojo.Cat&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;user&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.User&quot;</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">&quot;byType&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;str&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;mhy&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>结论：</strong>使用byType甚至可以将bean id删除不写，但要保证对象的唯一性</p><h3 id="使用注解来装配"><a href="#使用注解来装配" class="headerlink" title="使用注解来装配"></a>使用注解来装配</h3><h4 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h4><ol><li><p><em>使用注解要引用Spring的aop包</em></p></li><li><p>在配置文件中引入context约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span> /&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在类上加入@Autowire</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Cat cat;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> Dog dog;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        ClassPathXmlApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        Animal animal = context.getBean(<span class="hljs-string">&quot;animal&quot;</span>, Animal.class);<br>        animal.getCat().say();<br>        animal.getDog().say();<br>    &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a><strong>@Resource</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> Cat cat;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> Dog dog;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>java原生态的注解</p><p>@Resource(name=”xxx”),表示如果类有多个对象，可以指定id名来装配</p></blockquote><p>@Autowired和@Resource区别：</p><ul><li>都可以放在属性字段上</li><li>@Autowired是通过byType实现，而且必须要求对象名字存在，也就是说<bean id="cat" class="..." />,中id必须存在</li><li>@Resource默认通过byName实现，如果找不到名字，就按byType实现</li><li>两者都比较常用</li></ul><h3 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h3><ol><li><p>添加context约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">        http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span> /&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--指定注解扫描包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">&quot;com.mhy.pojo&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在类上加入注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;user&quot;)</span><span class="hljs-comment">// 相当于配置文件中 &lt;bean id=&quot;user&quot; class=&quot;当前注解的类&quot;/&gt;</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>   <span class="hljs-keyword">public</span> String name = <span class="hljs-string">&quot;mhy&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><ul><li><p>注入属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component(&quot;user&quot;)</span><span class="hljs-comment">// 相当于配置文件中 &lt;bean id=&quot;user&quot; class=&quot;当前注解的类&quot;/&gt;</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>   <span class="hljs-meta">@Value(&quot;mhy&quot;)</span><span class="hljs-comment">// 相当于配置文件中 &lt;property name=&quot;name&quot; value=&quot;mhy&quot;/&gt;</span><br>   <span class="hljs-keyword">public</span> String name;<br>&#125;<br><br><span class="hljs-comment">//如果有set方法，可以在set方法上添加value</span><br><span class="hljs-meta">@Value(&quot;mhy&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>       <span class="hljs-keyword">this</span>.name = name;<br>  &#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>@Component的衍生注解</strong></p><blockquote><p>为了更好的进行分层，Spring可以使用其它三个注解，功能一样</p></blockquote><ul><li>@Controller：web层</li><li>@Service：service层</li><li>@Repository：dao层</li></ul><p><strong>总结</strong></p><p><strong>XML与注解比较</strong></p><ul><li>XML可以适用任何场景 ，结构清晰，维护方便</li><li>注解不是自己提供的类使用不了，开发简单方便</li></ul><p><strong>xml与注解整合开发</strong> ：推荐最佳实践</p><ul><li>xml管理Bean</li><li>注解完成属性注入</li><li>使用过程中， 可以不用扫描，扫描是为了类上的注解</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- xml只管理bean --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cat&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.Cat&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;dog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.Dog&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;animal&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.pojo.Animal&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//属性由注解完成</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> class <span class="hljs-title">person</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-meta">@Value(&quot;mhy&quot;)</span><br>    <span class="hljs-keyword">public</span> String name;<br><span class="hljs-meta">@Value(&quot;henan&quot;)</span><br>    <span class="hljs-keyword">private</span> String adress;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用java类进行配置开发"><a href="#使用java类进行配置开发" class="headerlink" title="使用java类进行配置开发"></a>使用java类进行配置开发</h3><p><em><strong>使用一个java类来代替xml配置文件</strong></em></p><ol><li><p>新建一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span>  <span class="hljs-comment">//将这个类标注为Spring的一个组件，放到容器中！</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> </span>&#123;<br>   <span class="hljs-keyword">public</span> String name = <span class="hljs-string">&quot;dog&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>新建一个config包，编写一个config配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <span class="hljs-comment">//代表这是一个配置类</span><br><span class="hljs-meta">@Import(MyConfig2.class)</span><span class="hljs-comment">//可以导入其他配置</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConfig</span> </span>&#123;<br><br>   <span class="hljs-meta">@Bean</span> <span class="hljs-comment">//通过方法注册一个bean，这里的返回值就Bean的类型，方法名就是bean的id！</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Dog <span class="hljs-title">dog</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Dog();<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试，使用AnnotationConfigApplicationContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>   ApplicationContext applicationContext = <span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(MyConfig.class);<br>   Dog dog = (Dog) applicationContext.getBean(<span class="hljs-string">&quot;dog&quot;</span>);<br>   System.out.println(dog.name);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建一个动态代理类</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> Object target;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTarget</span><span class="hljs-params">(Object target)</span> </span>&#123;<br>       <span class="hljs-keyword">this</span>.target = target;<br>  &#125;<br><br>   <span class="hljs-comment">//生成代理类</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">this</span>.getClass().getClassLoader(),<br>               target.getClass().getInterfaces(),<span class="hljs-keyword">this</span>);<br>  &#125;<br><br>   <span class="hljs-comment">// proxy : 代理类</span><br>   <span class="hljs-comment">// method : 代理类的调用处理程序的方法对象.</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>       log(method.getName());<br>       Object result = method.invoke(target, args);<br>       <span class="hljs-keyword">return</span> result;<br>  &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">log</span><span class="hljs-params">(String methodName)</span></span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;执行了&quot;</span>+methodName+<span class="hljs-string">&quot;方法&quot;</span>);<br>  &#125;<br><br>&#125;<br><br><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>       <span class="hljs-comment">//真实对象</span><br>       UserServiceImpl userService = <span class="hljs-keyword">new</span> UserServiceImpl();<br>       <span class="hljs-comment">//代理对象的调用处理程序</span><br>       ProxyInvocationHandler pih = <span class="hljs-keyword">new</span> ProxyInvocationHandler();<br>       pih.setTarget(userService); <span class="hljs-comment">//设置要代理的对象</span><br>       UserService proxy = (UserService)pih.getProxy(); <span class="hljs-comment">//动态生成代理类！</span><br>       proxy.delete();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p><em><strong>面向切面，不修改源代码进行功能增强。底层是动态代理模式</strong></em></p><p>通过advice定义横切,有五种,<a href="https://mp.weixin.qq.com/s/zofgBRRrnEf17MiGZN8IJQ">具体点击链接</a></p><h3 id="使用Spring实现AOP"><a href="#使用Spring实现AOP" class="headerlink" title="使用Spring实现AOP"></a>使用Spring实现AOP</h3><blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--记得导包--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><p>1、编写service接口和实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Service接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserService</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">updateUser</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">queryUser</span><span class="hljs-params">()</span></span>;<br>    <br>&#125;<br><br><span class="hljs-comment">//接口实现类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserService</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addUser</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;add&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;delete&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateUser</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;update&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">queryUser</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;query&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、编写一个前置增强类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">log</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MethodBeforeAdvice</span> </span>&#123;<br>    <br> <span class="hljs-comment">//method : 要执行的目标对象的方法</span><br>   <span class="hljs-comment">//objects : 被调用的方法的参数</span><br> <span class="hljs-comment">//Object : 目标对象</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">(Method method, Object[] objects, Object o)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>        System.out.println(o.getClass().getName()+<span class="hljs-string">&quot;的&quot;</span>+method.getName()+<span class="hljs-string">&quot;方法执行了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、注册bean，实现AOP</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.service.log&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userService&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.service.UserServiceImpl&quot;</span> /&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.mhy.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;log&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;pointcut&quot;</span> /&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        UserService userService = (UserService) context.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>        userService.addUser();<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="自定义类实现AOP"><a href="#自定义类实现AOP" class="headerlink" title="自定义类实现AOP"></a>自定义类实现AOP</h3><p>1、编写测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DiyPointcut</span> </span>&#123;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;---------方法执行前---------&quot;</span>);<br>  &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">after</span><span class="hljs-params">()</span></span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;---------方法执行后---------&quot;</span>);<br>  &#125;<br>   <br>&#125;<br></code></pre></td></tr></table></figure><p>2、配置bean文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--注册bean--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;diy&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.kuang.config.DiyPointcut&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--aop的配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--第二种方式：使用AOP的标签实现--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspect</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;diy&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;diyPonitcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.mhy.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">aop:before</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;diyPonitcut&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;before&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">aop:after</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;diyPonitcut&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;after&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">aop:aspect</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>       ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>       UserService userService = (UserService) context.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>       userService.add();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用注解实现AOP"><a href="#使用注解实现AOP" class="headerlink" title="使用注解实现AOP"></a>使用注解实现AOP</h3><p>1、编写增强类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationPointcut</span> </span>&#123;<br><br>    <span class="hljs-meta">@Before(&quot;execution(* com.mhy.service.UserServiceImpl.*(..))&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">before</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;before...&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>2、注册bean，加入支持注解配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;annotationPointcut&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.config.AnnotationPointcut&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:aspectj-autoproxy</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>3、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>        ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;bean.xml&quot;</span>);<br>        UserService userService = (UserService) context.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>        userService.addUser();<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="Spring整合MyBatis"><a href="#Spring整合MyBatis" class="headerlink" title="Spring整合MyBatis"></a>Spring整合MyBatis</h2><h3 id="整合方式一"><a href="#整合方式一" class="headerlink" title="整合方式一:"></a>整合方式一:</h3><ol><li><p>整合MyBatis之前，可以参考MyBatis博客中没有整合之前的写法</p></li><li><p>整合MyBatis需要用到<a href="http://mybatis.org/spring/zh/index.html">MyBatis-Spring</a>,记得导入对应的依赖包</p></li><li><p>在Spring配置文件中配置dataSource</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--   获取dataSource，使用Spring数据源配置mybatis配置 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;datasource&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driverClassName&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="hljs-symbol">&amp;amp;</span>serverTimezone=UTC&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用SqlSessionFactoryBean创建SqlSessionFactory，但需要一个datasource</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--   sqlsessionFactory --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;datasource&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 绑定mybatis配置文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;configLocation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath:mybatis-config.xml&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapperLocations&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;classpath*:com/mhy/mapper/*.xml&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用sqlSessionFactory作为构造方法创建SqlSessionTemplate对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sqlsession&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 只能使用构造器注入 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>编写DAO，以及Mapper.xml,和实现类,这里只写实现类,因为spring整合Mybatis，需要新创建一个接口实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> SqlSessionTemplate sqlsession;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setSession</span><span class="hljs-params">(SqlSessionTemplate sqlsession)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.sqlsession = sqlsession;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>        UserMapper mapper = sqlsession.getMapper(UserMapper.class);<br>        <span class="hljs-keyword">return</span> mapper.getUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>给实现类注入sqlSessionFactory</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMapper&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.mapper.UserMapperImpl&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlsession&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlsession&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>       ApplicationContext context = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;spring-dao.xml&quot;</span>);<br>       UserMapper userMapper = (UserMapper) context.getBean(<span class="hljs-string">&quot;userMapper&quot;</span>);<br>       <span class="hljs-keyword">for</span> (User user : userMapper.getUser())&#123;<br>           System.out.println(user);<br>       &#125;<br>   <br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="整合方式二："><a href="#整合方式二：" class="headerlink" title="整合方式二："></a>整合方式二：</h3><p>使用SqlSessionDaoSupport</p><ol><li><p>在接口实现类上继承SqlSessionDaoSupport</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserMapperImpl02</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SqlSessionDaoSupport</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserMapper</span></span>&#123;<br>    <span class="hljs-comment">//使用getSqlSession()就会获得一个sqlsession</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title">getUser</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getSqlSession().getMapper(UserMapper.class).getUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>设置bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMapper02&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.mhy.mapper.UserMapperImpl02&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sqlSessionFactory&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li>声明式事务。将事务管理的代码从业务方法中分离出来，比编程式事务好用</li><li>编程式事务。需要改变源代码，不用它</li></ul><p>在spring配置文件的头文件中导入约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;<br><br>http://www.springframework.org/schema/tx<br>http://www.springframework.org/schema/tx/spring-tx.xsd&quot;&gt;<br></code></pre></td></tr></table></figure><p>配置bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dataSource&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;dataSource&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><p>配置事务通知</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置事务通知--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--配置哪些方法使用什么样的事务,配置事务的传播特性,默认就是propagation=&quot;REQUIRED&quot;,可以不写--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;delete&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;update&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;search*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>       <span class="hljs-comment">&lt;!-- 给所有的方法配置事务 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最后配置aop</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置aop织入事务--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txPointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* com.mhy.dao.*.*(..))&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;txPointcut&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.bilibili.com/video/BV1WE411d7Dv?p=12&amp;t=868">【狂神说Java】Spring5最新完整教程IDEA版通俗易懂</a></p><p><a href="https://blog.csdn.net/m0_37989980/article/details/104552379">Spring——IoC核心(基于XML)、DI核心(基于XML)、FactoryBean、Bean的生命周期</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring大家族</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构和算法(java版)</title>
    <link href="/2021/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <url>/2021/03/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>还在学习复习中，不定期更新吧</p><p>看数据结构之前，浑身上下都拒绝，搞明白、写出来之后→<strong>我爱数据结构和算法</strong></p><span id="more"></span><p><strong>程序=数据结构+算法</strong></p><p>包括:<em><strong>线性结构、非线性结构</strong></em></p><p><strong>线性结构</strong>:</p><blockquote><p>特点是数据元素之间存在一对一线性关系，有两种不同的存储结构:</p><p><strong>顺序存储结构(顺序表)</strong>,表中的存储元素的地址是连续的</p><p>**链式存储结构(链表)**，表中存储元素地址不一定是连续的</p><p><strong>线性结构常见有：数组、队列、链表和栈。</strong></p></blockquote><p><strong>非线性结构</strong></p><blockquote><p>常见包括:<strong>二维数组、多维数组、广义表、树结构、图结构</strong></p></blockquote><h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a><strong>稀疏数组</strong></h2><p><strong>稀疏数组：</strong>当一个数组中大部分为0时，或者是同一个值的数组时，可以使用稀疏数组来保存该数组，压缩数组，节省空间.<br>是一个具有<strong>三行（row col val ）</strong>，但<strong>列</strong>不确定的数组<br>应用场景：棋盘</p><p>传统数组举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span><br><span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span><br><span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">2</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span><br><span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>将上面的数组转换为稀疏数组后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">   row  col  val<br><span class="hljs-number">0</span>  <span class="hljs-number">4</span>    <span class="hljs-number">6</span>    <span class="hljs-number">2</span>   <span class="hljs-comment">//第一行row代表二维数组一共有多少行，col代表有多少列，val代表有多少非0的值</span><br><span class="hljs-number">1</span>  <span class="hljs-number">1</span>    <span class="hljs-number">2</span>    <span class="hljs-number">1</span>   <span class="hljs-comment">//从第二行开始往下，就是记录非0值在二维数组中具体的位置和具体的值</span><br><span class="hljs-number">2</span>  <span class="hljs-number">2</span>    <span class="hljs-number">3</span>    <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p><strong>二维数组转换稀疏数组思路：</strong></p><ol><li>遍历原来的二维数组，获取一共有多少个非0的值的个数sum</li><li>根据sum创建出稀疏数组，sparseArray int [sum+1] [3],行数不确定，所以个数+1，列数为固定的三行 row col val</li><li>将二维数组中的有效数据保存到稀疏数组中</li></ol><p><strong>稀疏数组转换二维数组的思路：</strong></p><ol><li>读取稀疏数组的第一行，创建出二维数组，比如 array=int [4] [6]</li><li>读取稀疏数组后边（第二行，因为第一行存放的是二维数组的行和列的总数）的数据，赋值给二维数组</li></ol><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建出原始的二维数组</span><br><span class="hljs-keyword">int</span> array[][] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">4</span>][<span class="hljs-number">6</span>];<br><span class="hljs-comment">//存入数据</span><br>array[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>array[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = <span class="hljs-number">2</span>;<br><br>System.out.println(<span class="hljs-string">&quot;原始的二维数组&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] row : array)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> data : row)&#123;<br>        System.out.printf(<span class="hljs-string">&quot;%d\t&quot;</span>,data);<br>    &#125;<br>    System.out.println();<br>&#125;<br><br><span class="hljs-comment">//遍历数组查找出非0的有效数据</span><br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;array.length;i++)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;array[<span class="hljs-number">0</span>].length;j++)&#123;<br>        <span class="hljs-keyword">if</span> (array[i][j] !=<span class="hljs-number">0</span>)&#123;<br>            sum++; <span class="hljs-comment">//输出结果是2</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//创建稀疏数组</span><br><span class="hljs-keyword">int</span> sparseArray[][] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[sum+<span class="hljs-number">1</span>][<span class="hljs-number">3</span>];<br><span class="hljs-comment">//给稀疏数组第一行记录赋值</span><br>sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">4</span>;<span class="hljs-comment">//row</span><br>sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">6</span>;<span class="hljs-comment">//col</span><br>sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = sum;<span class="hljs-comment">//val</span><br><br><span class="hljs-comment">//遍历二维数组，将非0值存放到稀疏数组中</span><br><span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;array.length;i++)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;array[<span class="hljs-number">0</span>].length;j++)&#123;<br>            <span class="hljs-keyword">if</span> (array[i][j] != <span class="hljs-number">0</span>)&#123;<br>                count++; <span class="hljs-comment">//因为第一行存放的是row col val 记录，所以要从第二行开始记录</span><br>                sparseArray[count][<span class="hljs-number">0</span>] = i;<br>                sparseArray[count][<span class="hljs-number">1</span>] = j;<br>                sparseArray[count][<span class="hljs-number">2</span>] = array[i][j]; <span class="hljs-comment">//非0就将这个值存放到第三列val中</span><br>            &#125;<br>    &#125;<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;稀疏数组为：&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;sparseArray.length;i++)&#123;<br>    System.out.printf(<span class="hljs-string">&quot;%d\t%d\t%d\t\n&quot;</span>,sparseArray[i][<span class="hljs-number">0</span>],sparseArray[i][<span class="hljs-number">1</span>],sparseArray[i][<span class="hljs-number">2</span>]);<br>&#125;<br><br><span class="hljs-comment">//将稀疏数组转换为二维数组</span><br><span class="hljs-keyword">int</span> array02[][] = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]];<br><span class="hljs-comment">//要从稀疏数组的第二行读取，因为第一行存放的是row col val,所以 i=1</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;sparseArray.length;i++)&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从稀疏数组中第二行开始读取，依次是行、列、值，然后保存到二维数组中</span><br><span class="hljs-comment">     * 所以array02[稀疏数组中第二行的行][稀疏数组中第二行的列]=稀疏数组中第二行，第三列的值</span><br><span class="hljs-comment">     */</span><br>    array02[sparseArray[i][<span class="hljs-number">0</span>]][sparseArray[i][<span class="hljs-number">1</span>]]=sparseArray[i][<span class="hljs-number">2</span>];<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;还原后的二维数组:&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span>[] row : array02)&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> data : row)&#123;<br>        System.out.printf(<span class="hljs-string">&quot;%d\t&quot;</span>,data);<br>    &#125;<br>    System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p><strong>队列（queue）</strong>是一种先进先出的线性表，简称FIFO，是一个有序列表，可以用数组或者链表。应用场景：银行排队，叫号系统</p><p><img src="D:/blog/source/imgs/20210205225330638.png" alt="20210205225330638"></p><p><strong>front</strong>代表队列的前端下标，<strong>rear</strong>代表队列的后端下标，<strong>maxSize</strong>代表队列最大保存的长度<br>当有数据进入队列，首先判断队列是否为空，若为空，尾指针向后移，即rear+1<br>当rear == maxSize-1，队列满，不能存入数据<br>取出数据时front+1，前指针向后移</p><h3 id="使用数组模拟队列"><a href="#使用数组模拟队列" class="headerlink" title="使用数组模拟队列"></a>使用数组模拟队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 这样写有问题，理解一下思路即可，下边有改进版</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//编写一个queue类</span><br>   <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue</span></span>&#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSize; <span class="hljs-comment">//最大的长度</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> front; <span class="hljs-comment">//前端下标</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> rear; <span class="hljs-comment">//后端下标</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] arr; <span class="hljs-comment">//存放数据的数组</span><br><br>        <span class="hljs-comment">//使用有参构造器进行初始化</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Queue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxSize)</span></span>&#123;<br>            <span class="hljs-keyword">this</span>.maxSize = maxSize; <span class="hljs-comment">//给定一个最大的长度</span><br>            front=-<span class="hljs-number">1</span>; <span class="hljs-comment">//指定第一个数组的前一个坐标，注意，是前一个，并不是第一个下标为0的数组</span><br>            rear=-<span class="hljs-number">1</span>; <span class="hljs-comment">//最后一个数组的下标,如果声明为0，则说明数组第一位有数据，所以声明为-1，方便以后判断</span><br>            arr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[maxSize];<span class="hljs-comment">//最多能存放maxSize个数据</span><br>        &#125;<br><br>        <span class="hljs-comment">//判断队列是否为空</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-comment">//front和rear相等时，说明队列中没有数据</span><br>            <span class="hljs-keyword">return</span> front == rear;<br>        &#125;<br><br>        <span class="hljs-comment">//判断队列是否为满</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-comment">/**前面初始化rear的值为-1，当存入数据时rear向后移rear+1，所以存入第一个数据的下标是0</span><br><span class="hljs-comment">             * 如果rear的初始值为0，那么存放数据时rear向后移，存放的坐标是0+1=1，下标则是第二位了！！！</span><br><span class="hljs-comment">             * 而且初始值为0，不方便与maxSize判断队列是否已满。</span><br><span class="hljs-comment">             * 仅为个人理解</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-keyword">if</span> (maxSize-<span class="hljs-number">1</span> == rear)&#123;<br>                System.out.println(<span class="hljs-string">&quot;队列已满&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//将数据添加到队列</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span></span>&#123;<br>            <span class="hljs-comment">//判断队列是否已经存满</span><br>            <span class="hljs-keyword">if</span> (isFull())&#123;<br>                System.out.println(<span class="hljs-string">&quot;队列满，不能存放数据了&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//如果队列不满，则将rear向后移,并把数据存入该位置</span><br>                rear++;<br>                arr[rear] = data;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//从队列中取出数据</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getQueue</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-comment">//判断队列是否为空</span><br>            <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;队列为空&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//取出数据所以将front向后移</span><br>                front++;<br>                System.out.println(<span class="hljs-string">&quot;取出的数据是&quot;</span>+arr[front]);<br>                <span class="hljs-keyword">return</span> arr[front];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//显示队列中所有的数据</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">allData</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-comment">//判断是否为空</span><br>            <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>                System.out.println(<span class="hljs-string">&quot;队列为空&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>                    System.out.println(arr[i]);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//显示头部第一个数据</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">headData</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;队列为空&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> arr[front+<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><p>这样写，数组只能使用一次，当取出数据时，front会自动往后移front+1，所以导致front+1之前的空间不能重复使用，<br>当数据被取出完，想继续往队列中添加数据时，此时maxSize已经等于rear，会提示队列已满，不能添加数据,不能复用</p><p>解决办法就是使用<strong>环形队列</strong></p></blockquote><h3 id="数组模拟环形队列"><a href="#数组模拟环形队列" class="headerlink" title="数组模拟环形队列"></a>数组模拟环形队列</h3><p>分析思路：</p><ol><li><p>将front和rear初始值设置为0</p><blockquote><p>front初始值为0指向第一个元素</p><p>rear初始值也是0，但在添加数据时，会将rear后移一位，保证数组的最后一位是空余</p></blockquote></li><li><p>判断队列是否为满的条件为：（rear+1）% maxSize == front</p></li><li><p>判断队列是否为空的条件为：rear==front</p></li><li><p>查找队列中有效个数的条件为：（rear+maxSize-front）% maxSize</p><blockquote><p>举例：</p><p>rear为2，maxSize为4，front为0</p><p>（2+4-0）%4 =2，有效个数就是2</p></blockquote></li></ol><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">circleQueue</span></span>&#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSize;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> front = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> rear = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] arr;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">circleQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxSize)</span></span>&#123;<br>            <span class="hljs-keyword">this</span>.maxSize=maxSize;<br>            arr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[maxSize];<br>        &#125;<br><br>        <span class="hljs-comment">//判断是否为满</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">return</span> (rear+<span class="hljs-number">1</span>)%maxSize==front;<br>        &#125;<br><br>        <span class="hljs-comment">//判断是否为空</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">return</span> rear==front;<br>        &#125;<br><br>        <span class="hljs-comment">//存入数据</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addData</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span></span>&#123;<br>            <span class="hljs-comment">//判断是否为满</span><br>            <span class="hljs-keyword">if</span> (isFull())&#123;<br>                System.out.println(<span class="hljs-string">&quot;队列已经满了&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                arr[rear]=data;<br>                rear=(rear+<span class="hljs-number">1</span>)%maxSize;<br>                <span class="hljs-comment">/**</span><br><span class="hljs-comment">                 * 这个地方要深刻理解弄懂，如果按照以前写法是将rear++，</span><br><span class="hljs-comment">                 * 现在创建环形队列要对他进行取模，也就是为了让他存放数据完了之后，</span><br><span class="hljs-comment">                 * 在自动+1，目的是将队列的最后一位保留下来，方便判断</span><br><span class="hljs-comment">                 * 举例：</span><br><span class="hljs-comment">                 * 假设现在maxSize为3，rear刚存入一个数据，rear[0]=1，</span><br><span class="hljs-comment">                 * 经过上边取模运算---rear=(0+1)%3,1%3商0余1，所以rear为1</span><br><span class="hljs-comment">                 * 当存放第二个数据时，rear[1]=2，经过取模后(1+1)%3,2%3商0余2，所以rear为2</span><br><span class="hljs-comment">                 * 注意！！！当插入第三个数据时，首先会判断队列是否为满，判断条件是：(rear+1)%maxSize==front</span><br><span class="hljs-comment">                 * 现在rear的值是2，带入判断条件后(2+1)%3==0,结果为true，所以就保证了最后一位的数据空余</span><br><span class="hljs-comment">                 *还保持上边的数值不变，将front变为1，也就是说取出了一个数据，</span><br><span class="hljs-comment">                 * 那么判断条件为：(2+1)%3==1，0==1，结果为false，可以继续存数据</span><br><span class="hljs-comment">                 */</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//取出数据</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getData</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-comment">//判断是否为空</span><br>            <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;队列为空&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//front的初始值为0 ，所以将查到的数据赋值给其他变量进行return</span><br>                <span class="hljs-keyword">int</span> value = arr[front];<br>                <span class="hljs-comment">//将front进行取模</span><br>                front=(front+<span class="hljs-number">1</span>)%maxSize;<br>                <span class="hljs-comment">/**</span><br><span class="hljs-comment">                 * 举例：</span><br><span class="hljs-comment">                 * maxSize为3，rear为2，front为0</span><br><span class="hljs-comment">                 * 第一次取值，取出front[0]，然后进行取模，</span><br><span class="hljs-comment">                 * front=(0+1)%3,1%3商0余1，front=1</span><br><span class="hljs-comment">                 * 第二次取值,取出front[1],然后取模，</span><br><span class="hljs-comment">                 * front=(1+1)%3,2%3商0余2，front=2</span><br><span class="hljs-comment">                 * 第三次取值,判断是否为空，因为存放了两个值，所以rear的值为2，</span><br><span class="hljs-comment">                 * rear==front，判断为空，没有数据可取，</span><br><span class="hljs-comment">                 * 当在次存放一个数据时，首先会判断是否为满，结果不为满，</span><br><span class="hljs-comment">                 * 存放第三个数据后，rear取模运算，rear=(rear+1)%maxSize,rear=0</span><br><span class="hljs-comment">                 * 所以rear会自动跳转到列表前端从0开始，再次存放数据，在此取模相加，再次回到起点</span><br><span class="hljs-comment">                 * 同理，存放第三个数据后，取出这个数据，首先判断是否为空，此时rear已经为0，rear==front，为false</span><br><span class="hljs-comment">                 * 取出第三个数据，front取模运算，front=(2+1)%3,3%3商1余0，front=0，在此回到起点</span><br><span class="hljs-comment">                 * rear和front此时都为0，都已经回到起点！！！</span><br><span class="hljs-comment">                 */</span><br><br>                <span class="hljs-keyword">return</span> value;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//显示列表中所有的值</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showAllData</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>                System.out.println(<span class="hljs-string">&quot;队列为空&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = front; i &lt; front + size(); i++) &#123;<br>                    System.out.println(arr[i%maxSize]);<span class="hljs-comment">//这个地方有点迷，为什么i%maxSize</span><br>                    <span class="hljs-comment">//System.out.println(arr[i]);</span><br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//求出所有有效数据的个数</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">return</span> (rear+maxSize-front)%maxSize;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>第二种写法，<strong>改变了数据类型，在显示列表中所有的值那里做了改变,也不用求出所有有效数据的个数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">circleQueue</span></span>&#123;<br><br>        <span class="hljs-keyword">private</span> Integer maxSize;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> front = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> rear = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">private</span> Integer[] arr;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">circleQueue</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxSize)</span></span>&#123;<br>            <span class="hljs-keyword">this</span>.maxSize=maxSize;<br>            arr=<span class="hljs-keyword">new</span> Integer[maxSize];<br>        &#125;<br><br>        <span class="hljs-comment">//判断是否为满</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">return</span> (rear+<span class="hljs-number">1</span>)%maxSize==front;<br>        &#125;<br><br>        <span class="hljs-comment">//判断是否为空</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">return</span> rear==front;<br>        &#125;<br><br>        <span class="hljs-comment">//存入数据</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addData</span><span class="hljs-params">(<span class="hljs-keyword">int</span> data)</span></span>&#123;<br>            <span class="hljs-comment">//判断是否为满</span><br>            <span class="hljs-keyword">if</span> (isFull())&#123;<br>                System.out.println(<span class="hljs-string">&quot;队列已经满了&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                arr[rear]=data;<br>                rear=(rear+<span class="hljs-number">1</span>)%maxSize;<br>                <span class="hljs-comment">/**</span><br><span class="hljs-comment">                 * 这个地方要深刻理解弄懂，如果按照以前写法是将rear++，</span><br><span class="hljs-comment">                 * 现在创建环形队列要对他进行取模，也就是为了让他存放数据完了之后，</span><br><span class="hljs-comment">                 * 在自动+1，目的是将队列的最后一位保留下来，方便判断</span><br><span class="hljs-comment">                 * 举例：</span><br><span class="hljs-comment">                 * 假设现在maxSize为3，rear刚存入一个数据，rear[0]=1，</span><br><span class="hljs-comment">                 * 经过上边取模运算---rear=(0+1)%3,1%3商0余1，所以rear为1</span><br><span class="hljs-comment">                 * 当存放第二个数据时，rear[1]=2，经过取模后(1+1)%3,2%3商0余2，所以rear为2</span><br><span class="hljs-comment">                 * 注意！！！当插入第三个数据时，首先会判断队列是否为满，判断条件是：(rear+1)%maxSize==front</span><br><span class="hljs-comment">                 * 现在rear的值是2，带入判断条件后(2+1)%3==0,结果为true，所以就保证了最后一位的数据空余</span><br><span class="hljs-comment">                 *还保持上边的数值不变，将front变为1，也就是说取出了一个数据，</span><br><span class="hljs-comment">                 * 那么判断条件为：(2+1)%3==1，0==1，结果为false，可以继续存数据</span><br><span class="hljs-comment">                 */</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//取出数据</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getData</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-comment">//判断是否为空</span><br>            <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;队列为空&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//front的初始值为0 ，所以将查到的数据赋值给其他变量进行return</span><br>                <span class="hljs-keyword">int</span> value = arr[front];<br>                arr[front] = <span class="hljs-keyword">null</span>;<br>                <span class="hljs-comment">//将front进行取模</span><br>                front=(front+<span class="hljs-number">1</span>)%maxSize;<br>                <span class="hljs-comment">/**</span><br><span class="hljs-comment">                 * 举例：</span><br><span class="hljs-comment">                 * maxSize为3，rear为2，front为0</span><br><span class="hljs-comment">                 * 第一次取值，取出front[0]，然后进行取模，</span><br><span class="hljs-comment">                 * front=(0+1)%3,1%3商0余1，front=1</span><br><span class="hljs-comment">                 * 第二次取值,取出front[1],然后取模，</span><br><span class="hljs-comment">                 * front=(1+1)%3,2%3商0余2，front=2</span><br><span class="hljs-comment">                 * 第三次取值,判断是否为空，因为存放了两个值，所以rear的值为2，</span><br><span class="hljs-comment">                 * rear==front，判断为空，没有数据可取，</span><br><span class="hljs-comment">                 * 当在次存放一个数据时，首先会判断是否为满，结果不为满，</span><br><span class="hljs-comment">                 * 存放第三个数据后，rear取模运算，rear=(rear+1)%maxSize,rear=0</span><br><span class="hljs-comment">                 * 所以rear会自动跳转到列表前端从0开始，再次存放数据，在此取模相加，再次回到起点</span><br><span class="hljs-comment">                 * 同理，存放第三个数据后，取出这个数据，首先判断是否为空，此时rear已经为0，rear==front，为false</span><br><span class="hljs-comment">                 * 取出第三个数据，front取模运算，front=(2+1)%3,3%3商1余0，front=0，在此回到起点</span><br><span class="hljs-comment">                 * rear和front此时都为0，都已经回到起点！！！</span><br><span class="hljs-comment">                 */</span><br><br>                <span class="hljs-keyword">return</span> value;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//显示列表中所有的值</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showAllData</span><span class="hljs-params">()</span></span>&#123;<br><br>            <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>                System.out.println(<span class="hljs-string">&quot;队列为空&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; maxSize; i++) &#123;<br>                    System.out.println(arr[i]);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表是以节点的方式来存储，每个节点包含data域，next域，next域指向下一个节点。</p><p>┌───┬───┐</p><p>│data │next │</p><p>└───┴───┘</p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>带头节点的链表，首先创建一个头节点，头节点不做任何设置，只用来表示链表的头部，next指向下一个节点<img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/%E5%8D%95%E9%93%BE%E8%A1%A8.jpg" alt="单链表"></p><p>（图片来自百度）</p><p><strong>代码演示增删改查：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mhy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkedListDemo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        HeroDemo hero01 = <span class="hljs-keyword">new</span> HeroDemo(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;马云&quot;</span>);<br>        HeroDemo hero02 = <span class="hljs-keyword">new</span> HeroDemo(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;马化腾&quot;</span>);<br>        HeroDemo hero03 = <span class="hljs-keyword">new</span> HeroDemo(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;elon mask&quot;</span>);<br><br>        SingleLinked singleLinked = <span class="hljs-keyword">new</span> SingleLinked();<br>        singleLinked.add(hero01);<br>        singleLinked.add(hero02);<br>        singleLinked.add(hero03);<br>        singleLinked.list();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//创建空结点（对象），定义要保存的信息属性类型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeroDemo</span></span>&#123;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> HeroDemo next; <span class="hljs-comment">//用来指向下一个节点(对象)</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroDemo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id,String name)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroDemo&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br><span class="hljs-comment">//                &quot;, next=&quot; + next +</span><br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//创建单链表</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinked</span></span>&#123;<br>    <span class="hljs-comment">//初始一个对象的头节点，只是用来指向单链表的头部</span><br>    HeroDemo head = <span class="hljs-keyword">new</span> HeroDemo(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-comment">//添加节点</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    不考虑编号排序和重复的添加方法</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(HeroDemo heroDemo)</span></span>&#123;<br>        <span class="hljs-comment">/*添加到最后的节点，如果next属性（对象）为null，则表示是最后一个节点</span><br><span class="hljs-comment">          但因为head头节点不能更改，所以需要一个辅助节点来遍历</span><br><span class="hljs-comment">         */</span><br>        HeroDemo temp = head;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">if</span> (temp.next==<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                temp = temp.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//遍历结束后，temp一定指向的是最后的节点</span><br>        <span class="hljs-comment">//将新节点，添加到最后的指向的节点位置</span><br>        temp.next = heroDemo;<br>    &#125;<br>    <br>        <span class="hljs-comment">//根据序号排序并不能重复添加的方法</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        分析：依然使用辅助节点（temp）来代替head节点</span><br><span class="hljs-comment">            首先遍历找到要插入的位置前一个节点，</span><br><span class="hljs-comment">            使新插入的节点的.next等于当前temp.next，</span><br><span class="hljs-comment">            当前temp.next指向新插入的节点。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addByOrder</span><span class="hljs-params">(HeroDemo heroDemo)</span></span>&#123;<br>        HeroDemo temp = head;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>; <span class="hljs-comment">//判断编号是否存在，存在改为true</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-comment">//判断链表是否为空</span><br>            <span class="hljs-keyword">if</span> (temp.next==<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.next.id &gt; heroDemo.id)&#123; <span class="hljs-comment">//如果下一个节点的编号比新节点的编号大，则停止</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp.next.id == heroDemo.id)&#123; <span class="hljs-comment">//编号相等也要停止</span><br>                flag=<span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>                temp = temp.next; <span class="hljs-comment">//让temp一直往下判断，否则会一直死循环判断一个</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag)&#123;<br>            System.out.println(<span class="hljs-string">&quot;插入的节点编号&quot;</span>+heroDemo.id+<span class="hljs-string">&quot;已经存在&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            heroDemo.next = temp.next; <span class="hljs-comment">//将原来位置的节点，给新插入的节点的next</span><br>            temp.next = heroDemo; <span class="hljs-comment">//将新插入的节点给当前节点的下一个节点</span><br><span class="hljs-comment">//            heroDemo.next = temp.next; //将原来位置的节点，给新插入的节点的next</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">                必须要让新节点的next指向temp现在指向的节点，</span><br><span class="hljs-comment">                如果让现在的temp.next先指向新节点，会因为已经存在指向的节点，而不能在指向节点而运行不聊(个人理解)</span><br><span class="hljs-comment">             */</span><br>        &#125;<br>    &#125;<br>    <br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        根据id修改节点的信息</span><br><span class="hljs-comment">        注意，id是不能修改的</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(HeroDemo heroDemo)</span></span>&#123;<br>        HeroDemo temp = head.next;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>; <span class="hljs-comment">//用来表示是否找到要修改的节点</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>)&#123; <span class="hljs-comment">//判断链表是否为空</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.id == heroDemo.id)&#123;<br>                flag=<span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (flag)&#123; <span class="hljs-comment">//flag为true表示找到要修改的节点</span><br>            temp.name=heroDemo.name;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;没有找到编号为&quot;</span>+heroDemo.id+<span class="hljs-string">&quot;,名字是&quot;</span>+heroDemo.name+<span class="hljs-string">&quot;的信息&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        删除一个节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>&#123;<br>        HeroDemo temp = head;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">if</span> (temp.next==<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.next.id==id)&#123;<br>                flag=<span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp=temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag)&#123;<br>            temp.next=temp.next.next;<span class="hljs-comment">//指向当前节点的下一个的下一个节点，中间的节点就会自动被垃圾回收</span><br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;没有找到&quot;</span>+id+<span class="hljs-string">&quot;的节点信息&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//显示链表中的数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">()</span></span>&#123;<br>       <span class="hljs-comment">//首先判断链表是否为空</span><br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>            HeroDemo temp = head.next;<span class="hljs-comment">//获取头节点指向的对象</span><br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>             <span class="hljs-keyword">if</span> (temp ==<span class="hljs-keyword">null</span>)&#123;<br>                 <span class="hljs-keyword">break</span>;<br>             &#125;<br>                System.out.println(temp);<br>                temp=temp.next;<span class="hljs-comment">//输出一个对象后，要将next后移，否则会死循环输出一个对象</span><br>            &#125;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单链表面试题"><a href="#单链表面试题" class="headerlink" title="单链表面试题"></a>单链表面试题</h3><h4 id="求链表节点的个数："><a href="#求链表节点的个数：" class="headerlink" title="求链表节点的个数："></a>求链表节点的个数：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//统计链表中的有效个数</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        首先给定一个头节点，从头节点开始计算</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLength</span><span class="hljs-params">(HeroDemo head)</span></span>&#123;<br>        HeroDemo temp = head;<br>        <span class="hljs-keyword">if</span> (temp.next==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (temp.next!=<span class="hljs-keyword">null</span>)&#123;<br>            length++;<br>            temp=temp.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> length;<br>    &#125;<br><span class="hljs-comment">//调用，形参是在类中定义过的 HeroDemo head = new HeroDemo(0,&quot;&quot;);</span><br>System.out.println(<span class="hljs-string">&quot;长度是：&quot;</span>+singleLinked.getLength(singleLinked.head));<br></code></pre></td></tr></table></figure><h4 id="新浪：求倒数第N个节点"><a href="#新浪：求倒数第N个节点" class="headerlink" title="新浪：求倒数第N个节点"></a><strong>新浪</strong>：求倒数第N个节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//求链表中倒数第N个节点</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        给定头节点和要找的倒数第几个数</span><br><span class="hljs-comment">        遍历链表总长度，用总长度减去要求的倒数第几个数，就可以得到需要查找几次个数</span><br><span class="hljs-comment">        然后用循环将节点找出来</span><br><span class="hljs-comment">        比如总长度为3，要找倒数第一个，3-1=2，for循环两次，让.next移动两次即可</span><br><span class="hljs-comment">        index表示要查找的倒数第几个节点</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HeroDemo <span class="hljs-title">findLastIndex</span><span class="hljs-params">(HeroDemo head,<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>        HeroDemo temp = head.next;<br>        <span class="hljs-keyword">if</span> (temp==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-comment">//得到总长度</span><br>        <span class="hljs-keyword">int</span> length = getLength(head);<br>        <span class="hljs-keyword">if</span> (index&lt;<span class="hljs-number">0</span>||index&gt;length)&#123; <span class="hljs-comment">//如果查找的数小于0或者大于总长度，不合理，返回null</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;length-index;i++)&#123; <span class="hljs-comment">//比如总长为3，要求查倒数第一个，3-1=2；</span><br>            <span class="hljs-comment">// temp已经指向第一个节点，所以利用for循环即可向后移动两次指向最后一个节点</span><br>            temp=temp.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br><br><span class="hljs-comment">//调用</span><br>System.out.println(<span class="hljs-string">&quot;查到的节点为：&quot;</span>+singleLinked.findLastIndex(singleLinked.head, <span class="hljs-number">3</span>));<br></code></pre></td></tr></table></figure><h4 id="腾讯：反转单链表"><a href="#腾讯：反转单链表" class="headerlink" title="腾讯：反转单链表"></a><strong>腾讯：</strong>反转单链表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">//反转链表中的节点</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        分析：</span><br><span class="hljs-comment">            首先创建一个新的链表，遍历原来的链表，将原来的链表依次存放在新链表最前边</span><br><span class="hljs-comment">            最后将原来链表的head.next指向新链表的.next即可</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reverseLinkedList</span><span class="hljs-params">(HeroDemo head)</span></span>&#123;<br>        <span class="hljs-comment">//如果链表为空，或者只有一个节点，反转没有意义，直接返回</span><br>        <span class="hljs-keyword">if</span> (head.next==<span class="hljs-keyword">null</span> || head.next.next==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//创建一个新的链表头节点,用来存放循环遍历原链表后的节点</span><br>        <span class="hljs-comment">//每次循环原节点都要将存放到新链表的 最前边，比如原链表是123，循环存放后是321</span><br>        <span class="hljs-comment">// 动脑子想一下就明白为什么要依次存放到新表最前边</span><br>        HeroDemo cur = head.next; <span class="hljs-comment">//存放原链表的第一个节点</span><br>        HeroDemo next = <span class="hljs-keyword">null</span>; <span class="hljs-comment">//存放当前节点的下一个节点(cur.next)</span><br>        HeroDemo temp = <span class="hljs-keyword">new</span> HeroDemo(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;&quot;</span>); <span class="hljs-comment">//新的头链表</span><br>        <span class="hljs-keyword">while</span> (cur!=<span class="hljs-keyword">null</span>)&#123;<br>            next = cur.next; <span class="hljs-comment">//将当前节点的下一个节点存放起来，方便指针后边的移动</span><br>            cur.next = temp.next; <span class="hljs-comment">//将当前节点的下一个节点指向新节点的最前面</span><br>            temp.next = cur; <span class="hljs-comment">//将当前节点存放到新节点</span><br>            cur = next; <span class="hljs-comment">//后移到下一个节点</span><br>        &#125;<br>         head.next = temp.next; <span class="hljs-comment">//新表的next后已经存放好了倒叙的节点，所以原来的next指向新链表的next即可</span><br>    &#125;<br><span class="hljs-comment">//调用</span><br> HeroDemo hero01 = <span class="hljs-keyword">new</span> HeroDemo(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;马云&quot;</span>);<br>        HeroDemo hero02 = <span class="hljs-keyword">new</span> HeroDemo(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;马化腾&quot;</span>);<br>        HeroDemo hero03 = <span class="hljs-keyword">new</span> HeroDemo(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;elon musk&quot;</span>);<br><br>        SingleLinked singleLinked = <span class="hljs-keyword">new</span> SingleLinked();<br><br>        singleLinked.addByOrder(hero01);<br>        singleLinked.addByOrder(hero03);<br>        singleLinked.addByOrder(hero02);<br><br>        System.out.println(<span class="hljs-string">&quot;反转前的链表&quot;</span>);<br>        singleLinked.list();<br>        System.out.println(<span class="hljs-string">&quot;反转后的链表&quot;</span>);<br>        singleLinked.reverseLinkedList(singleLinked.head);<br>        singleLinked.list();<br></code></pre></td></tr></table></figure><h4 id="百度：从尾到头打印单链表"><a href="#百度：从尾到头打印单链表" class="headerlink" title="百度：从尾到头打印单链表"></a>百度：从尾到头打印单链表</h4><blockquote><p>解决方法两种：<br>第一种反向排序后输出，但破坏表结构；<br>第二种，使用栈，栈的特性就是先进后出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用栈，对单链表进行逆向输出</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stackPrint</span><span class="hljs-params">(HeroDemo head)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (head.next==<span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    HeroDemo temp = head.next;<br>    Stack&lt;HeroDemo&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;HeroDemo&gt;(); <span class="hljs-comment">//创建栈</span><br>    <span class="hljs-keyword">while</span> (temp!=<span class="hljs-keyword">null</span>)&#123;<br>        stack.push(temp); <span class="hljs-comment">//将节点压入栈</span><br>        temp = temp.next;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (stack.size()&gt;<span class="hljs-number">0</span>)&#123;<br>        System.out.println(stack.pop()); <span class="hljs-comment">//从栈顶输出</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.PNG" alt="双向链表"></p><p>比单链表<strong>多了一个指向前节点的属性</strong></p><p>单项链表只能向下读取，双向链表可以向上读取</p><p><strong>代码增删改查应用和单链表类似，但还是有区别：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeroDemo2</span></span>&#123;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> HeroDemo2 next; <span class="hljs-comment">//用来指向下一个节点(对象)</span><br>    <span class="hljs-keyword">public</span> HeroDemo2 pre;  <span class="hljs-comment">//用来指向当前节点的前一个节点</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">HeroDemo2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id,String name)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.id = id;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroDemo2&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建双向链表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DoubleLinkedList</span></span>&#123;<br><br>    <span class="hljs-comment">//创建头部标签</span><br>    HeroDemo2 head = <span class="hljs-keyword">new</span> HeroDemo2(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-comment">//遍历双向链表，原理和单链表一样</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        HeroDemo2 temp = head.next;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            System.out.println(temp);<br>            temp = temp.next;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//添加节点到双向链表</span><br>    <span class="hljs-comment">//和单链表一样，添加到最后，唯一区别是需要添加一个pre指向前一个节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(HeroDemo2 newheroDemo2)</span></span>&#123;<br>        HeroDemo2 temp = head;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>            temp.next = newheroDemo2;<br>            newheroDemo2.pre = temp;<br>    &#125;<br><br>    <span class="hljs-comment">//按照id顺序添加节点，还是和单链表大差不差</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addById</span><span class="hljs-params">(HeroDemo2 heroDemo2)</span></span>&#123;<br>        HeroDemo2 temp = head;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">boolean</span> flag02 = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-keyword">null</span>)&#123;<br>                flag02=<span class="hljs-keyword">true</span>; <span class="hljs-comment">// 如果是空链表，结束循环，直接添加数据</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.next.id &gt; heroDemo2.id)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (temp.next.id == heroDemo2.id)&#123;<br>                flag=<span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag)&#123;<br>            System.out.println(<span class="hljs-string">&quot;节点已经存在&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flag02)&#123; <span class="hljs-comment">//该条件说明链表为空，直接添加节点即可</span><br>            temp.next = heroDemo2;<br>            heroDemo2.pre = temp;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            heroDemo2.next = temp.next; <span class="hljs-comment">//一下过程，画图更容易理解</span><br>            temp.next = heroDemo2;<br>            heroDemo2.next.pre = heroDemo2;<br>            heroDemo2.pre = temp;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//修改双向链表，和单链表一样</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(HeroDemo2 heroDemo2)</span></span>&#123;<br>        HeroDemo2 temp = head.next;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>; <span class="hljs-comment">//用来表示是否找到要修改的节点</span><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>)&#123; <span class="hljs-comment">//判断链表是否为空</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.id == heroDemo2.id)&#123;<br>                flag=<span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp = temp.next;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (flag)&#123; <span class="hljs-comment">//flag为true表示找到要修改的节点</span><br>            temp.name=heroDemo2.name;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;没有找到编号为&quot;</span>+heroDemo2.id+<span class="hljs-string">&quot;,名字是&quot;</span>+heroDemo2.name+<span class="hljs-string">&quot;的信息&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//根据id删除一个节点，和单链表大差不差，只不过需要更改next和pre指向的节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-keyword">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;链表为空&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        HeroDemo2 temp = head.next;<br>        <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>            <span class="hljs-keyword">if</span> (temp == <span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (temp.id==id)&#123;<br>                flag=<span class="hljs-keyword">true</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            temp=temp.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (flag)&#123;<br>            temp.pre.next = temp.next; <span class="hljs-comment">//将当前被删除节点的上一个节点的next指向当前被删除节点的下一个节点</span><br>            <span class="hljs-keyword">if</span> (temp.next  != <span class="hljs-keyword">null</span>)&#123; <span class="hljs-comment">//如果删除的是最后节点，那被删之后就不需要在指向前一个节点了</span><br>                temp.next.pre = temp.pre; <span class="hljs-comment">//将当前被删除的节点的下一个pre指向节点的上一个pre</span><br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;没有找到&quot;</span>+id+<span class="hljs-string">&quot;的节点信息&quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单向环形链表（约瑟夫问题）"><a href="#单向环形链表（约瑟夫问题）" class="headerlink" title="单向环形链表（约瑟夫问题）"></a>单向环形链表（约瑟夫问题）</h3><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/%E5%8D%95%E9%A1%B9%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8.png" alt="单项环形链表"></p><p>解决<strong>约瑟夫问题</strong>(<strong>丢手绢</strong>)可以使用单项环形链表，单项环形链表与单链表和双链表的区别在于，<strong>环形链表相互指向最终形成一个圆</strong><br>最后一个节点指向第一个节点，哪怕只有一个节点，这个节点自身也可以指向自身，形成一个环形</p><p>环形链表需要用到两个辅助变量：first和curBoy （名字自定义）</p><blockquote><p>first指向第一个节点，不能更改</p><p>curBoy用来辅助创建节点</p></blockquote><p>不理解就画图，画图还不理解（笨），找视频看</p><p><strong>代码演示：</strong>  （出圈代码没写，空补）！！！！！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建一个节点类型   </span><br><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Boy</span></span>&#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> id;<br>        <span class="hljs-keyword">public</span> Boy next;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Boy</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.id = id;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.id = id;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setNext</span><span class="hljs-params">(Boy next)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.next = next;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> id;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Boy <span class="hljs-title">getNext</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> next;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Boy&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                    <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">//创建环形链表</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">circleLinkedList</span></span>&#123;<br><br>        <span class="hljs-comment">//初始化第一个节点</span><br>        Boy first = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-comment">//添加对象方法</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> nums)</span></span>&#123;<br>            <span class="hljs-comment">//添加的对象数少于0个，退出</span><br>            <span class="hljs-keyword">if</span> (nums&lt;=<span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;添加数值错误&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            Boy curBoy = <span class="hljs-keyword">null</span>; <span class="hljs-comment">//辅助节点</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;=nums; i++)&#123;<br>                Boy boy = <span class="hljs-keyword">new</span> Boy(i);<br>                <span class="hljs-keyword">if</span> (i==<span class="hljs-number">1</span>)&#123; <span class="hljs-comment">//将第一个节点指向自己</span><br>                    first=boy;<br>                    first.next=first;<br>                    curBoy=first;<br>                &#125;<span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//从第二个节点开始，依次循环指向形成环形链路</span><br>                    curBoy.next=boy;<br>                    boy.next=first;<br>                    curBoy=boy;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showInfo</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">if</span> (first==<span class="hljs-keyword">null</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;没有任何数据&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            Boy curBoy = first;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;依次有&quot;</span>+curBoy.getId());<br>                <span class="hljs-keyword">if</span> (curBoy.next==first)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                curBoy=curBoy.next;<br>            &#125;<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">//实例测试</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><br>        circleLinkedList cr = <span class="hljs-keyword">new</span> circleLinkedList();<br>        cr.add(<span class="hljs-number">10</span>);<br>        cr.showInfo();<br><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p><strong>stack：</strong>是<strong>先入后出</strong>的有序列表。变化的一端是<strong>栈顶</strong>，固定的一端是<strong>栈底</strong>。</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/%E6%A0%88.png" alt="栈"></p><p>（图片来自csdn）</p><p><strong>使用数组创建一个栈：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mhy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">stack</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//测试使用数组创建栈空间</span><br>        stackArray stack = <span class="hljs-keyword">new</span> stackArray(<span class="hljs-number">5</span>);<br>        stack.add(<span class="hljs-number">1</span>);<br>        stack.add(<span class="hljs-number">2</span>);<br>        stack.add(<span class="hljs-number">3</span>);<br>        System.out.println(stack.pup());<br>        stack.list();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//使用数组模拟形成栈</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">stackArray</span></span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> top = -<span class="hljs-number">1</span>; <span class="hljs-comment">//top表示栈顶，初始为-1；</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> maxSize; <span class="hljs-comment">//表示栈的最大长度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> [] stack ; <span class="hljs-comment">//创建一个数组栈</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">stackArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span> maxSize)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.maxSize = maxSize; <span class="hljs-comment">//初始栈的最大空间</span><br>        stack = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-keyword">this</span>.maxSize];<br>    &#125;<br><br>    <span class="hljs-comment">//判断栈是否为满</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isFull</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> top == maxSize-<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//判断栈是否为空</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> top == -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//添加数据到栈</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span></span>&#123;<br>        <span class="hljs-comment">//判断栈是否满</span><br>        <span class="hljs-keyword">if</span> (isFull())&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        top++; <span class="hljs-comment">//将top自动加1</span><br>        stack[top] = value;<br>    &#125;<br><br>    <span class="hljs-comment">//返回栈顶的数据</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pup</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//判断是否为空</span><br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;栈为空&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack[top];<br>    &#125;<br><br>    <span class="hljs-comment">//遍历栈</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">list</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//为空不遍历</span><br>        <span class="hljs-keyword">if</span> (isEmpty())&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;栈为空&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=top;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            System.out.println(stack[i]);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>方法自己调自己，每次传入不同的变量</p><p>递归可以解决的问题：</p><blockquote><p>8皇后（回溯），汉诺塔，阶乘，迷宫问题，球和蓝子等</p><p>快速排序，归并排序，二分查找，分治算法等</p></blockquote><p>递归调用规则：</p><ol><li>执行一个方法时，会创建一个新的受保护的独立空间（栈空间）</li><li>方法的局部变量是独立的，不会相互影响</li><li>递归必须向退出递归的条件逼近，否则会死循环</li></ol><p>一个方法体内调用自身</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">求<span class="hljs-number">5</span>的阶乘<br>    <br>    main()&#123;<br>    <span class="hljs-keyword">new</span> 对象<br>        对象名.getSum(<span class="hljs-number">5</span>);<br>&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> i*(i-<span class="hljs-number">1</span>);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><p>用来尝试寻找问题的解，发现不满足条件时，就会回到原来某个状态，在次去寻找其他的解决问题路径</p><p><strong>回溯的思路</strong>基本如下：当前局面下，我们有若干种选择，所以我们对每一种选择进行尝试。如果发现某种选择违反了某些限定条件，此时 return；如果尝试某种选择到了最后，发现该选择是正确解，那么就将其加入到解集中。<br>在这种思想下，我们需要清晰的找出三个要素：选择 (Options)，限制 (Restraints)，结束条件 (Termination)。</p><h3 id="递归与回溯的区别"><a href="#递归与回溯的区别" class="headerlink" title="递归与回溯的区别"></a>递归与回溯的区别</h3><p>递归是一种算法结构。递归会出现在子程序中，形式上表现为直接或间接的自己调用自己。典型的例子是阶乘，计算规律为：n!=n×(n−1)!</p><p>回溯是一种算法思想，它是用递归实现的。回溯的过程类似于穷举法，但回溯有“剪枝”功能，即自我判断过程。例如有求和问题，给定有 7 个元素的组合 [1, 2, 3, 4, 5, 6, 7]，求加和为 7 的子集。累加计算中，选择 1+2+3+4 时，判断得到结果为 10 大于 7，那么后面的 5, 6, 7 就没有必要计算了。这种方法属于搜索过程中的优化，即“剪枝”功能。</p><p>用一个比较通俗的说法来解释递归和回溯：<br>我们在路上走着，前面是一个多岔路口，因为我们并不知道应该走哪条路，所以我们需要尝试。尝试的过程就是一个函数。<br>我们选择了一个方向，后来发现又有一个多岔路口，这时候又需要进行一次选择。所以我们需要在上一次尝试结果的基础上，再做一次尝试，即在函数内部再调用一次函数，这就是递归的过程。<br>这样重复了若干次之后，发现这次选择的这条路走不通，这时候我们知道我们上一个路口选错了，所以我们要回到上一个路口重新选择其他路，这就是回溯的思想</p><blockquote><p>以上引用来自：<a href="https://www.cnblogs.com/fanguangdexiaoyuer/p/11224426.html">https://www.cnblogs.com/fanguangdexiaoyuer/p/11224426.html</a></p></blockquote><h3 id="八皇后问题，回头在弄，懵逼。。。"><a href="#八皇后问题，回头在弄，懵逼。。。" class="headerlink" title="八皇后问题，回头在弄，懵逼。。。"></a><strong>八皇后问题，回头在弄，懵逼。。。</strong></h3><h3 id="迷宫问题"><a href="#迷宫问题" class="headerlink" title="迷宫问题"></a><strong>迷宫问题</strong></h3><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211025165439164.png" alt="image-20211025165439164"></p><p>图中迷宫为8×7，红色表示墙，箭头所指表示出口。</p><p><strong>代码示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mhy;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 迷宫问题</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiGong</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//创建二位数组表示迷宫</span><br>        <span class="hljs-keyword">int</span>[][] map = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">8</span>][<span class="hljs-number">7</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>;i++)&#123; <span class="hljs-comment">//给迷宫 上 下 设置 墙，数值为1</span><br>            map[<span class="hljs-number">0</span>][i]=<span class="hljs-number">1</span>;<br>            map[<span class="hljs-number">7</span>][i]=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++)&#123; <span class="hljs-comment">//给迷宫 左 右 设置 墙，数值为1</span><br>            map[i][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>            map[i][<span class="hljs-number">6</span>]=<span class="hljs-number">1</span>;<br>        &#125;<br>        map[<span class="hljs-number">3</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>; <span class="hljs-comment">//固定位置设墙</span><br>        map[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>]=<span class="hljs-number">1</span>; <span class="hljs-comment">//固定位置设墙</span><br>        System.out.println(<span class="hljs-string">&quot;初始化的迷宫为：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt; <span class="hljs-number">8</span>;i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">7</span>;j++)&#123;<br>                System.out.print(map[i][j]+<span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>        setWay(map,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;寻找出口后的迷宫为：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt; <span class="hljs-number">8</span>;i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">7</span>;j++)&#123;<br>                System.out.print(map[i][j]+<span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map 传入一个迷宫地图</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> i 从地图中的哪个位置开始找出路</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> j 从地图中的哪个位置开始找出路</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回true表示路线可用，false表示路线不可用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// 0 表示没有走过的路, 1表示 墙，2 表示走过的路，3 表示走不同的路</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">setWay</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] map,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (map[<span class="hljs-number">6</span>][<span class="hljs-number">5</span>] == <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">//规定地图中这个位置为出口</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (map[i][j] == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//0代表没有走</span><br>                map[i][j] = <span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">if</span> (setWay(map, i + <span class="hljs-number">1</span>, j)) &#123; <span class="hljs-comment">//向下走.  这个地方在制定规则，目前制定为下 右 上 左</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i, j + <span class="hljs-number">1</span>)) &#123; <span class="hljs-comment">//向右走</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i - <span class="hljs-number">1</span>, j)) &#123; <span class="hljs-comment">//向上走</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (setWay(map, i, j - <span class="hljs-number">1</span>)) &#123; <span class="hljs-comment">//向左走</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">//否则是走不通，标记为3，返回false</span><br>                    map[i][j] = <span class="hljs-number">3</span>;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>排序又称排序算法，将一组数据按照指定的顺序进行排列。</p><p>排序的分类：</p><ul><li>内部排序</li></ul><blockquote><p>将数据加载到内存中进行排序</p><p>包括：插入排序，选择排序，交换排序，归并排序，基数排序等。</p></blockquote><ul><li><p>外部排序</p><blockquote><p>数据量过大，无法加载到内存中，需要借助外部存储进行排序</p></blockquote></li></ul><p><strong>度量一个算法执行时间的两种方法：</strong></p><ol><li><p>事后统计</p><blockquote><p>先将程序运行起来，然后统计运行的时间</p><p>所耗费的时间与硬件、软件等环境因素有关，所以使用这个方法要将程序放在同一台计算机上运行</p></blockquote></li><li><p>事前估算</p><blockquote><p>分析算法的时间复杂度来判断哪个算法更优</p></blockquote></li></ol><p><strong>概念理解</strong>：</p><p>时间频度：一个算法花费的时间与算法中的语句执行次数成正比，哪个算法的语句执行次数多，花费的时间就多。<strong>算法中语句执行次数，被称为称为频度</strong></p><blockquote><p><strong>看书，看博客，把算法在好好理解一下。大话数据结构p18页往后，好好看一下</strong> </p></blockquote><h3 id="排序的分类"><a href="#排序的分类" class="headerlink" title="排序的分类"></a>排序的分类</h3><p>排序分为<strong>简单排序</strong>和<strong>高级排序</strong></p><ol><li>简单排序<ul><li>冒泡排序</li><li>选择排序</li><li>插入排序</li></ul></li><li>高级排序<ul><li>希尔排序</li><li>归并排序</li><li>快速排序</li></ul></li></ol><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>Bubble Sorting，通过相邻的数据进行比较，使较大的数据逐步向后移动（根据定义的规则从小到大，或者从大到小）。</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif" alt="冒泡排序"></p><p>冒泡排序的规则：</p><ul><li>一共进行数组大小的n-1次循环</li><li>每一次的排序次数在逐渐减少</li></ul><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mhy;<br><br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BulleSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> [] arr = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">9</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,-<span class="hljs-number">2</span>&#125;;<br>        bullesort(arr);<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bullesort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> temp;<br>        Boolean flag=<span class="hljs-keyword">false</span>; <span class="hljs-comment">//辅助变量，用来判断是否进入了排序循环</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length-<span class="hljs-number">1</span>;i++)&#123; <span class="hljs-comment">//规定执行循环次数，数组长度-1</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;arr.length-<span class="hljs-number">1</span>-i;j++)&#123; <span class="hljs-comment">//规定数组中元素对比的次数</span><br>                <span class="hljs-keyword">if</span> (arr[j]&gt;arr[j+<span class="hljs-number">1</span>])&#123;<br>                    flag=<span class="hljs-keyword">true</span>;<br>                    temp=arr[j];<br>                    arr[j]=arr[j+<span class="hljs-number">1</span>];<br>                    arr[j+<span class="hljs-number">1</span>]=temp;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag)&#123; <span class="hljs-comment">//如果在一次循环中，没发生一次交换，说明排序已经完成，不需要排序，退出循环</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//否则，重置为false，继续循环</span><br>                flag=<span class="hljs-keyword">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>从一个数组arr[0]—arr[n-1]中，首先找到最小值（或者最大值，规则自己定），然后将arr[0]与最小值交换，接着从arr[1]—arr[n-1]中找最小值，将arr[1]与最小值交换，依次这样查找交换，直到最后数组是按从小到大顺序排序。</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif" alt="选择排序"></p><p><strong>代码示例：</strong></p><blockquote><p>有点懵，还得加深理解！！！</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mhy;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SelectSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">101</span>,<span class="hljs-number">34</span>,<span class="hljs-number">119</span>,<span class="hljs-number">1</span>&#125;;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length-<span class="hljs-number">1</span>;i++)&#123;<br>            <span class="hljs-keyword">int</span> minIndex=i; <span class="hljs-comment">//假设最前边的数为最小值的下标</span><br>            <span class="hljs-keyword">int</span> min = arr[i]; <span class="hljs-comment">//假定第一个数为最小值</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>;j&lt;arr.length;j++)&#123;<br>                <span class="hljs-keyword">if</span> (min&gt;arr[j])&#123; <span class="hljs-comment">//用最前的值依次和后边的值进行比较判断</span><br>                    minIndex=j; <span class="hljs-comment">//记录最小值的下标</span><br>                    min=arr[j]; <span class="hljs-comment">//重置min,记录最小值</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (minIndex != i) &#123; <span class="hljs-comment">//判断位置是否发生了变化，没有发生变化，证明没有进行交换</span><br>                arr[minIndex] = arr[i]; <span class="hljs-comment">//将假设的值的位置和遍历到最小的值的位置进行交换</span><br>                arr[i] = min; <span class="hljs-comment">//将最小值赋值给最前边i</span><br>            &#125;<br>        &#125;<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>将第一个元素(n+1)，与n+1前的元素进行比较，如果n+1之前的元素比n+1大，则将n+1的值插入到n+1之前，按照大小进行插入排序，</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif" alt="插入排序"></p><p><strong>代码示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>       <span class="hljs-comment">//int[] arr = &#123;101,34,119,1&#125;;</span><br>       <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">56</span>,<span class="hljs-number">2</span>,<span class="hljs-number">56</span>,<span class="hljs-number">89</span>,<span class="hljs-number">99</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>&#125;;<br>       sort(arr);<br>       System.out.println(Arrays.toString(arr));<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>; i&lt;arr.length;i++)&#123; <span class="hljs-comment">//拿到n+1的值</span><br>           <span class="hljs-keyword">int</span> temp = arr[i]; <span class="hljs-comment">//保存到变量</span><br>           <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=i-<span class="hljs-number">1</span>;j&gt;=<span class="hljs-number">0</span> &amp;&amp; arr[j]&gt;temp;j--)&#123;  <span class="hljs-comment">//取n+1之前的值，进行比较，前边比后边大，交换位置</span><br>               arr[j+<span class="hljs-number">1</span>]=arr[j];<br>               arr[j] = temp;<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p><strong>ShellSort</strong>：也是一种插入排序，又叫递减增量排序算法，优化了插入排序。</p><p>是非稳定排序算法，将整个待排序记录序列分割成若干个子序列分别进行插入排序。</p><blockquote><p>一共有两种方法：</p><ol><li>移动法 </li><li>交换法 (速度慢)</li></ol></blockquote><p><strong>使用思路：</strong>（总结真难）</p><p>将元素长度依次/2，得到的值就是对元素进行分组的个数，直到&lt;0时停止。</p><p>将每组元素进行比较排序。。。</p><p><strong>代码示例：</strong></p><blockquote><p>交换法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mhy;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShellSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">0</span>&#125;;<br>        shellSort(arr);<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//获取分组个数，分组个数依次/2递减。用来控制分组，相当与第一次分了5组，第二次2组，第三次1组。</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> gap=arr.length/<span class="hljs-number">2</span>; gap&gt;<span class="hljs-number">0</span>; gap/=<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-comment">//用来控制获取个数 ，相当于步长（5，2，1）</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i&lt;arr.length;i++)&#123;<br>                <span class="hljs-comment">//循环遍历，从0到分组的个数依次比较</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i-gap; j&gt;=<span class="hljs-number">0</span>; j-=gap)&#123;<br>                    <span class="hljs-comment">//判断交换条件,从小到大</span><br>                    <span class="hljs-keyword">if</span> (arr[j]&gt;arr[j+gap])&#123;<br>                        temp = arr[j];<br>                        arr[j] = arr[j+gap];<br>                        arr[j+gap] = temp;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>移动法，不太理解。。。。。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSort02</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> gap = arr.length/<span class="hljs-number">2</span>; gap&gt;<span class="hljs-number">0</span>; gap/=<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = gap; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-keyword">int</span> j = i;<br>            <span class="hljs-keyword">int</span> temp = arr[j];<br>            <span class="hljs-keyword">if</span> (arr[j]&lt;arr[j-gap])&#123;<br>                <span class="hljs-keyword">while</span> (j-gap&gt;=<span class="hljs-number">0</span>&amp;&amp;temp&lt;arr[j-gap])&#123;<br>                    arr[j] = arr[j-gap];<br>                    j-=gap;<br>                &#125;<br>                arr[j] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a><strong>快速排序</strong></h3><p>快速排序（QuickSort）是对冒泡排序的一种改进</p><p><strong>基本思想：</strong></p><ol><li>选择一个基准数</li><li>将小于基准数的放在左边，大于基准数的放在右边</li><li>分别在左边和右边找基准数，然后继续重复第二步</li><li>直到排序完成</li></ol><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211106163044229.png" alt="image-20211106163044229"></p><p><strong>代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mhy;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QuickSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;-<span class="hljs-number">9</span>,<span class="hljs-number">78</span>,<span class="hljs-number">0</span>,<span class="hljs-number">23</span>,-<span class="hljs-number">567</span>,<span class="hljs-number">70</span>&#125;;<br>        <span class="hljs-comment">//int[] arr = &#123;9，8，7，6，5，4，3，2，1&#125;;</span><br>        quickSort(arr,<span class="hljs-number">0</span>,arr.length-<span class="hljs-number">1</span>);<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> l =left;<br>        <span class="hljs-keyword">int</span> r = right;<br>        <span class="hljs-keyword">int</span> poivt = arr[(left+right)/<span class="hljs-number">2</span>]; <span class="hljs-comment">//找到基准数</span><br>        <span class="hljs-keyword">int</span> temp; <span class="hljs-comment">//交换中介</span><br><br>        <span class="hljs-keyword">while</span> (l &lt; r)&#123;  <span class="hljs-comment">//左边下标必须小于右边下标，在遍历过程中，l和r会一直++，超过基准数下标后就会相等，所以要加这个判断条件</span><br>            <span class="hljs-comment">//从左往右查找</span><br>            <span class="hljs-keyword">while</span>(arr[l] &lt; poivt &amp;&amp; l &lt; r)&#123;<br>                l++;<br>            &#125;<br>            <span class="hljs-comment">//从右向左找</span><br>            <span class="hljs-keyword">while</span>(arr[r] &gt; poivt &amp;&amp; l &lt; r)&#123;<br>                r--;<br>            &#125;<br>            <span class="hljs-comment">//退出以上两个循环，说明左右两边已经找到大于或者小于基准的数，可以进行互换位置</span><br><br>            <span class="hljs-comment">//如果两边的值相等，说明没有左右两边没有找到大于或者小于基准的数</span><br>            <span class="hljs-keyword">if</span> (l&gt;=r)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">//将左右两边的数互换</span><br>            <span class="hljs-keyword">if</span> (l &lt; r)&#123;<br>                temp = arr[l];<br>                arr[l] = arr[r];<br>                arr[r] = temp;<br>            &#125;<br>            <span class="hljs-comment">//System.out.println(&quot;l的值为：&quot;+l+&quot;,r的值为：&quot;+r);</span><br>            <span class="hljs-comment">//System.out.println(&quot;left的值为：&quot;+left+&quot;,right的值为：&quot;+right);</span><br>        &#125;<br><br>        <span class="hljs-comment">//在此处进行递归</span><br>        <span class="hljs-comment">//进行左边排序</span><br>        <span class="hljs-keyword">if</span> (left &lt; r) &#123; <span class="hljs-comment">//这里必须要加这个判断条件，否则栈溢出 left初始为 0 ，r 为 5</span><br>            quickSort(arr, left, r );<br>        &#125;<br>        <span class="hljs-comment">//进行右边排序</span><br>        <span class="hljs-keyword">if</span> (r &lt; right) &#123; <span class="hljs-comment">//这里必须要加这个判断条件，否则栈溢出 r 为5 ，right为 7</span><br>            quickSort(arr,r+<span class="hljs-number">1</span>,right);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这个玩意看了视频搞不明白，查了csdn，画了两页的A4纸一步一步推导，然后又进行debug，最后将视频和csdn结合，成功搞出来，搞成功的时候我懵了，这怎么就成功了，哈哈🐵😐😐😐😂😂😀😀，总之，成功了</p></blockquote><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>归并排序 <strong>merge-Sort</strong></p><p>采用分治策略，<strong>分治策略</strong>就是将问题逐步<strong>分</strong>成小问题，然后进行<strong>递归求解</strong>，然后将分好的各阶段得到的答案修补在一起，这部分称为<strong>治</strong></p><p>治的次数为长度-1</p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211108153804697.png" alt="image-20211108153804697"></p><p><strong>进行合并排序时的部分思路</strong></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211108160818944.png" alt="image-20211108160818944"></p><p>取到数组的<strong>左边下标（left），中间下标（mid=(left+right)/2），右边下标（arr.length-1）</strong></p><p><strong>左边条件为left&lt;mid,右边初始下标为mid+1，结束条件是mid&lt; right</strong></p><p>需要将数组分为左右两个序列，然后依次拿左边序列的n+1个和右边序列的n+1个进行对比，将小的那个值放进临时数组中。<br>对比的结束条件是左边下标要小于中间值(left&lt;mid)，右边序列要小于最右边的下标(mid+1&lt;right)</p><p><strong>代码示例：</strong>(其实不难，这个不太绕，多看代码理解一下)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mhy;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MergeSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">8</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">10</span>&#125;;<br>        <span class="hljs-keyword">int</span>[] temp =<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[arr.length]; <span class="hljs-comment">//临时数组</span><br>        mergeSort(arr,<span class="hljs-number">0</span>,arr.length-<span class="hljs-number">1</span>,temp);<br>        System.out.println(<span class="hljs-string">&quot;归并排序后：&quot;</span>+ Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-comment">//分+治（合）</span><br>    <span class="hljs-comment">//将数组进行分化和排序填充</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span>[] temp)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (left &lt; right)&#123;<br>            <span class="hljs-keyword">int</span> mid = (left + right)/<span class="hljs-number">2</span>; <span class="hljs-comment">//取数组中间下标</span><br>            <span class="hljs-comment">//向左边进行递归分化</span><br>            mergeSort(arr,left,mid,temp);<br>            <span class="hljs-comment">//向右边进行递归分化</span><br>            mergeSort(arr,mid+<span class="hljs-number">1</span>,right,temp);<br>            <span class="hljs-comment">//合并</span><br>            merge(arr,left,mid,right,temp);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//治，逐步排序合并</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr  传递出来要进行合并的数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> left 最左边的下标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mid 中间下标，因为要使用他进行与右边的数组进行比较，所以右边数组下标初始值是mid+1</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> right 最右边的下标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> temp 临时的数组，用来存放排序后的值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> right, <span class="hljs-keyword">int</span>[] temp)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> l = left;<br>        <span class="hljs-keyword">int</span> r = mid+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> t = <span class="hljs-number">0</span>; <span class="hljs-comment">//用来操作临时数组temp的下标</span><br>        <span class="hljs-comment">//对左右两边的序列进行排序，并放到临时数组中</span><br>        <span class="hljs-keyword">while</span> (l&lt;=mid &amp;&amp; r&lt;=right)&#123;<br>            <span class="hljs-keyword">if</span> (arr[l] &lt;= arr[r])&#123; <span class="hljs-comment">//判断左边数据是否小于右边</span><br>                temp[t] = arr[l];<br>                t++;<br>                l++;<br>            &#125;<span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//否则，说明左边数据不比右边小，判断右边数据</span><br>                temp[t] = arr[r];<br>                t++;<br>                r++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//可能会存在左右两边有一边已经比较完成，下标到最后</span><br>        <span class="hljs-comment">// 而另一边还有剩余数据没有比较完，所以要将剩余的数据也放在临时数组temp中</span><br>        <span class="hljs-keyword">while</span> (l &lt;= mid)&#123; <span class="hljs-comment">//左边下标l没有到mid，说明前边判断时还有空余数据，将剩余数据添加到临时temp中</span><br>            temp[t] = arr[l];<br>            t++;<br>            l++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (r &lt;= right)&#123; <span class="hljs-comment">//右边下标r没有到right，说明前边判断时还有空余数据，将剩余数据添加到临时temp中</span><br>            temp[t] = arr[r];<br>            t++;<br>            r++;<br>        &#125;<br><br>        <span class="hljs-comment">//将temp数组拷贝给原数组arr</span><br>        <span class="hljs-comment">//此时temp已经排序完成，从下标0开始拷贝即可，所以定义一个值为0</span><br>        t = <span class="hljs-number">0</span>;<br>       <span class="hljs-comment">// int tempLeft = left;</span><br>        <span class="hljs-keyword">while</span> (left &lt;= right)&#123;<br>            arr[left] = temp[t];<br>            t++;<br>            left++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p>基数排序（radix sort）属于分配式排序，又叫<strong>桶排序</strong>，<strong>将元素各个位的值，放进相应的桶中进行排序</strong></p><p>属于<strong>高效的稳定排序</strong>，是桶排序的扩展</p><p><strong>实现思想：</strong></p><ol><li>排序的次数是元素的长度</li><li>给定0-9个二维数组作为<strong>桶</strong>,用来存放排序的数据</li><li>将各个元素依次取个位、十位、百位…放进对应下标的桶中</li><li>然后将桶中的数据给原数组</li><li>按照以上步骤进行循环</li></ol><p><strong>使用空间换时间，要注意数据过大时，可能导致堆空间不足</strong></p><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211111155034721.png" alt="image-20211111155034721"></p><p><strong>代码示例：</strong> //身体原因，头晕，有些地方不太清楚，复习时好好理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mhy;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">//基数排序</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">radixSort</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//int[] arr = &#123;53,3,542,748,14,214&#125;;</span><br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">66</span>,<span class="hljs-number">33</span>,<span class="hljs-number">77</span>,<span class="hljs-number">11</span>,<span class="hljs-number">22</span>,<span class="hljs-number">0</span>,<span class="hljs-number">55</span>,<span class="hljs-number">88</span>,<span class="hljs-number">99</span>,<span class="hljs-number">39</span>&#125;;<br>        sort(arr);<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr)</span></span>&#123;<br>        <span class="hljs-comment">//循环次数就是最大数的位数，比如最大数是367，就要循环三次</span><br>        <span class="hljs-comment">//首先要获取循环的次数</span><br>        <span class="hljs-keyword">int</span> max = arr[<span class="hljs-number">0</span>]; <span class="hljs-comment">//假定第一个数最大，与其他数进行比较</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k&lt;arr.length; k++)&#123;<br>            <span class="hljs-keyword">if</span> (arr[k] &gt; max)&#123;<br>                max = arr[k];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> maxLength = (max+<span class="hljs-string">&quot;&quot;</span>).length(); <span class="hljs-comment">//得到最大的长度</span><br><br>        <span class="hljs-comment">//二维数组用来当桶</span><br>        <span class="hljs-keyword">int</span>[][] bucket = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>][arr.length];<br>        <span class="hljs-comment">//用来记录桶中存放的数据个数,相当于bucket[0]这个桶中存放了几个数据</span><br>        <span class="hljs-keyword">int</span>[] bucketElementCounts = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">10</span>];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, n = <span class="hljs-number">1</span>; i&lt;maxLength; i++,n *=<span class="hljs-number">10</span>)&#123; <span class="hljs-comment">//循环次数是最大长度的次数,n用来取个、十、百..位的条件</span><br>            <span class="hljs-comment">//依次取出每个元素的个、十、百...位</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length; j++)&#123;<br>                <span class="hljs-comment">//取出对应的值</span><br>                <span class="hljs-keyword">int</span> number = arr[j] / n % <span class="hljs-number">10</span>;<br>                <span class="hljs-comment">//放到对应的桶中</span><br>                bucket[number][bucketElementCounts[number]] = arr[j];<br>                bucketElementCounts[number]++;<br>            &#125;<br>            <span class="hljs-comment">//取出桶中的数据，放入原来的数组</span><br>            <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; bucket.length; k++)&#123;<br>                <span class="hljs-comment">//如果桶中有数据，就放入原来数组</span><br>                <span class="hljs-keyword">if</span> (bucketElementCounts[k] != <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>; l&lt; bucketElementCounts[k]; l++)&#123;<br>                        <span class="hljs-comment">//取出元素放到原数组</span><br>                        arr[index++] = bucket[k][l];<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">//每轮处理结束，需要将bucketElementCounts[k]设为0</span><br>                bucketElementCounts[k] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常用算法对比"><a href="#常用算法对比" class="headerlink" title="常用算法对比"></a>常用算法对比</h3><p><img src="https://gitee.com/myyyhyyy/blogimg/raw/master/img/image-20211115151459914.png" alt="image-20211115151459914"></p><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><h3 id="线性（顺序）查找"><a href="#线性（顺序）查找" class="headerlink" title="线性（顺序）查找"></a>线性（顺序）查找</h3><ul><li>线性查找是逐一比对，发现有相同值，就返回下标</li></ul><p><strong>代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mhy.Search;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SxSearch</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-keyword">int</span> result = search(arr,<span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">if</span> (result==-<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;没有找到该值&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;该值的下标是：&quot;</span>+result);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  线性查找</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回-1说明没有查找到该值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr ,<span class="hljs-keyword">int</span> value)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length;i++)&#123;<br>            <span class="hljs-keyword">if</span> (arr[i]==value)&#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h3><p>前提:<strong>数组必须有序</strong></p><p><strong>思路：</strong></p><ol><li>首先获取到数组中间的下标</li><li>拿到中间的值</li><li>将要查找的数与中间值比较</li><li>如果大于中间的数，说明要查找的数在右边，向右递归</li><li>如果小于中间的数，说明要查找的数在左边，向左递归</li><li>如果直接等于中间的数，则直接返回中间数的下标</li></ol><p><strong>代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mhy.Search;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySearch</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">0</span>&#125;;<br>        <span class="hljs-keyword">int</span> result = search(arr,<span class="hljs-number">0</span>,arr.length,<span class="hljs-number">9</span>);<br>        <span class="hljs-keyword">if</span> (result == -<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;没有找到数值&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;该数值的下标是：&quot;</span>+ result);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> arr 要进行查找的数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> left 最左边的下标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> right 最右边的下标</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> findValue 要进行查找的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果查找到就返回对应的下标，否则返回-1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr,<span class="hljs-keyword">int</span> left,<span class="hljs-keyword">int</span> right,<span class="hljs-keyword">int</span> findValue)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> mid = (left+right)/<span class="hljs-number">2</span>; <span class="hljs-comment">//要取到中间的下标</span><br>        <span class="hljs-keyword">int</span> midValue = arr[mid]; <span class="hljs-comment">//取到中间的值</span><br>        <span class="hljs-keyword">if</span> (left&gt;right)&#123; <span class="hljs-comment">//结束的条件</span><br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (findValue &gt; midValue)&#123; <span class="hljs-comment">//该条件用来判断要查找的数是否大于中间的值</span><br>           <span class="hljs-keyword">return</span> search(arr,mid,right,findValue); <span class="hljs-comment">// 进行向右递归，最左边的是mid</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (findValue &lt; midValue)&#123; <span class="hljs-comment">//判断是否小于中间的数，条件成立向左递归</span><br>            <span class="hljs-keyword">return</span> search(arr,left,mid-<span class="hljs-number">1</span>,findValue);<br>        &#125;<span class="hljs-keyword">else</span>  &#123; <span class="hljs-comment">//说明要查找的数等于中间的数，返回中间数下标即可</span><br>            <span class="hljs-keyword">return</span> mid;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>如果查找的数在数组中有多个，需要将代码进行改进一下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//添加下边的代码到else 后</span><br>            ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;(); <span class="hljs-comment">//用来保存下标</span><br>            <span class="hljs-comment">//向左进行查找</span><br>            <span class="hljs-keyword">int</span> temp = mid - <span class="hljs-number">1</span> ;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>                <span class="hljs-keyword">if</span> (temp &lt; <span class="hljs-number">0</span> || arr[temp] != findValue)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                temp++;<br>                list.add(temp);<br>            &#125;<br>            list.add(mid); <br><br>            <span class="hljs-comment">//向右进行查找</span><br>             temp = mid + <span class="hljs-number">1</span> ;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br>                <span class="hljs-keyword">if</span> (temp &gt; arr.length-<span class="hljs-number">1</span> || arr[temp] != findValue)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                temp++;<br>                list.add(temp);<br>            &#125;<br>            <span class="hljs-keyword">return</span>  list;<br></code></pre></td></tr></table></figure><h3 id="反转一维数组"><a href="#反转一维数组" class="headerlink" title="反转一维数组"></a>反转一维数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义数组</span><br><span class="hljs-keyword">int</span> [] arr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span> []&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length/<span class="hljs-number">2</span>;i++)&#123;<br>    <span class="hljs-comment">//定义中转变量</span><br>    <span class="hljs-keyword">int</span> temp=arr[i];<br>    <span class="hljs-comment">//arr[arr.length-i-1]从后往前取出值</span><br>    arr[i]=arr[arr.length-i-<span class="hljs-number">1</span>];<br>    arr[arr.length-i-<span class="hljs-number">1</span>]=temp;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://www.bilibili.com/video/BV1E4411H73v?p=45&spm_id_from=333.1007.top_right_bar_window_history.content.click">尚硅谷</a></p>]]></content>
    
    
    <categories>
      
      <category>数据结构和算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构和算法</tag>
      
      <tag>JAVA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL Server下载安装</title>
    <link href="/2021/03/05/SQL%20Server%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85/"/>
    <url>/2021/03/05/SQL%20Server%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h3 id="SQL-Server-2019版本下载及安装"><a href="#SQL-Server-2019版本下载及安装" class="headerlink" title="SQL Server 2019版本下载及安装"></a>SQL Server 2019版本下载及安装</h3><ol><li><p>从官网下载➡<a href="https://www.microsoft.com/zh-CN/sql-server/sql-server-2019">官方网址</a></p><span id="more"></span></li></ol><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/1.png"></p><ol start="2"><li>点击下载后，跳转到选择下载版本界面，然后找到如下箭头所示免费版本进行下载.(根据自己的需求选择对应的版本进行下载安装，这里只演示免费版本的下载和安装)</li></ol><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/2.png"></p><ol start="3"><li><p>等待下载完成后找到安装包双击进行安装</p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/3.png"></p></li></ol><p>4.根据自己的需要选择对应的选项(这里只进行我个人的选择安装)</p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/4.png"></p><ol start="5"><li>选择语言，然后点击右下角的接受按钮</li></ol><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/5.png"></p><ol start="6"><li>选择安装的位置,然后点击安装</li></ol><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/6.png"></p><ol start="7"><li>等待下载安装<img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/7.png"></li></ol><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/8.png"></p><ol start="8"><li>安装成功,点击安装SSMS(是一个管理工具)</li></ol><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/9.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/10.png"></p><ol start="9"><li><p>下载完成后找到安装包，双击进行安装<img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/11.png"></p></li><li><p>选择安装的目录,点击安装</p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/12.png"></p></li></ol><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/13.png"></p><ol start="11"><li><p>安装成功</p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/14.png"></p></li></ol><h3 id="配置SQL-Server"><a href="#配置SQL-Server" class="headerlink" title="配置SQL Server"></a>配置SQL Server</h3><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/%E7%AC%AC%E4%B8%80%E6%AD%A5.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/%E7%AC%AC%E4%BA%8C%E6%AD%A5.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/%E7%AC%AC%E4%B8%89%E6%AD%A5.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/%E7%AC%AC%E5%9B%9B%E6%AD%A5.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/%E7%AC%AC%E4%BA%94%E6%AD%A5.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/%E7%AC%AC%E5%85%AD%E6%AD%A5.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/%E7%AC%AC%E4%B8%83%E6%AD%A5.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/%E7%AC%AC%E5%85%AB%E6%AD%A5.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/%E7%AC%AC%E4%B9%9D%E6%AD%A5.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/%E7%AC%AC%E5%8D%81%E6%AD%A5.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/%E7%AC%AC%E5%8D%81%E4%B8%80%E6%AD%A5.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/%E7%AC%AC%E5%8D%81%E4%BA%8C%E6%AD%A5.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/%E7%AC%AC%E5%8D%81%E4%B8%89%E6%AD%A5.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/%E7%AC%AC%E5%8D%81%E5%9B%9B%E6%AD%A5.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/%E7%AC%AC%E5%8D%81%E4%BA%94%E6%AD%A5.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/%E7%AC%AC%E5%8D%81%E5%85%AD%E6%AD%A5.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/%E7%AC%AC%E5%8D%81%E5%99%A8%E6%AD%A5.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/%E7%AC%AC%E5%8D%81%E5%85%AB%E6%AD%A5.png"></p><h3 id="使用eclipse连接测试"><a href="#使用eclipse连接测试" class="headerlink" title="使用eclipse连接测试"></a>使用eclipse连接测试</h3><blockquote><p><em><strong>以下演示只针对本篇文章内的SQL Server版本，如果你的SQL Server是按照本篇文章安装和配置，可以参照以下内容，否则以下驱动版本可能不适合你的SQL Server。</strong></em></p></blockquote><p>查看你的JAVA JDK版本是否和我一致</p><p><strong>如果是按照本篇文章进行的安装操作，可以跳过不用查看</strong></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/M1.png"></p><p>点击下面链接下载驱动</p><p><a href="https://docs.microsoft.com/zh-cn/sql/connect/jdbc/release-notes-for-the-jdbc-driver?view=sql-server-2017#previous-releases">点击下载</a></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/M2.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/M3.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/M4.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/M5.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/M6.png"></p><p><img src="/imgs/SQLServer%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87/M7.png"></p><h3 id="如果发现文章内容有错误请通过页面右上角➡关于我⬅联系我"><a href="#如果发现文章内容有错误请通过页面右上角➡关于我⬅联系我" class="headerlink" title="如果发现文章内容有错误请通过页面右上角➡关于我⬅联系我"></a>如果发现文章内容有错误请通过页面右上角➡关于我⬅联系我</h3>]]></content>
    
    
    <categories>
      
      <category>SQL Server</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL Server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于hexo在windows搭建博客步骤</title>
    <link href="/2021/02/19/%E5%9F%BA%E4%BA%8Ehexo%E5%9C%A8windows%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%AD%A5%E9%AA%A4/"/>
    <url>/2021/02/19/%E5%9F%BA%E4%BA%8Ehexo%E5%9C%A8windows%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<p><em><strong>此文章内容与实际操作有出入，待更新后在做参考!!!</strong></em></p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>使用hexo搭建博客前提条件:</p><p>安装并配置好Git(用户名和邮箱)</p><span id="more"></span><h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><ol><li><p>下载并安装nodejs</p><blockquote><p><a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p></blockquote></li></ol><h3 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h3><ol><li><p>win打开命令操作符分别输入 nodejs -v  npm -v  查看对应的版本，如果正常显示版本号证明nodejs安装成功</p></li><li><p>安装cnpm(由于访问外网网速慢，此处使用淘宝镜像版)</p><blockquote><p>npm  install -g cnpm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p><p>安装后使用cnpm -v 查看版本是否安装成功</p></blockquote></li></ol><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><blockquote><p>cnpm install -g hexo-cli</p><p>安装后使用 hexo -v 查看版本是否安装成功</p></blockquote><h3 id="创建博客目录并初始化"><a href="#创建博客目录并初始化" class="headerlink" title="创建博客目录并初始化"></a>创建博客目录并初始化</h3><ol><li>mkdir  blog(可任意设置存放博客文件名)</li></ol><blockquote><p>如果有错误可以删除创建的此目录直接重头再来</p><p>此路径在用户目录下</p></blockquote><ol start="2"><li><p>进入博客目录并初始化博客</p><blockquote><p>cd blog     进入博客目录</p><p>hexo init   初始化博客(此处网络慢建议使用手机热点)</p></blockquote></li><li><p>进入blog目录查看是否生成基础框架内容</p><blockquote><p>查看是否有source 、themes、_config.yml等文件</p></blockquote></li></ol><h3 id="启动并自定义博客"><a href="#启动并自定义博客" class="headerlink" title="启动并自定义博客"></a>启动并自定义博客</h3><ol><li><p>hexo s 启动博客</p><blockquote><p>启动成功后默认地址是使用localhost:4000进行访问</p></blockquote></li><li><p>hexo n “文件名”</p><blockquote><p>创建新的博客文章</p><p>创建的文章路径在 source/_posts </p></blockquote></li><li><p>编写文章内容</p><blockquote><p>可使用typora编写，格式为markdown</p></blockquote></li><li><p>hexo g</p><blockquote><p>生成博客内容</p><p>注意要退出到 blog路径下</p></blockquote></li><li><p>hexo s</p><blockquote><p>再次启动博客，使用localhost:4000访问查看</p><p>使用技巧：</p><p>创建新的博客后使用localhost:4000预览，然后在推送到远端</p></blockquote></li></ol><h3 id="将博客部署到远端-GitHub"><a href="#将博客部署到远端-GitHub" class="headerlink" title="将博客部署到远端(GitHub)"></a>将博客部署到远端(GitHub)</h3><ol><li><p>创建新的仓库</p><blockquote><p>仓库名必须和GitHub用户名相同</p><p>例如：sixsixsix.github.io</p><p>此地址将是以后在浏览器访问的地址</p></blockquote></li><li><p>安装Git部署插件</p><blockquote><p>命令提示符进入blog路径</p><p>cnpm install –save hexo-deployer-git</p></blockquote></li><li><p>设置_config.yml</p><blockquote><p>可以用记事本打开_config.yml</p><p>在 #deployment下 设置 </p><p>type: “git”</p><p>repo: (github中新建仓库的地址)</p><p>branch: master</p><p>!!!注意冒号后一定要加空格</p></blockquote></li><li><p>hexo d</p><blockquote><p>将博客部署到远端</p><p>此处将输入两个命令：</p><ul><li><p>第一次输入自己的GitHub账户名</p></li><li><p>第二次输入GitHub密码</p><p>如果弹出有GitHub窗口，输入GitHub密码即可</p></li></ul></blockquote></li><li><p>推送成功</p><blockquote><p>推送成功后访问GitHub新建仓库，会发现多了博客生成的内容</p><p>使用仓库名进行测试访问</p></blockquote></li></ol><h3 id="部署成功"><a href="#部署成功" class="headerlink" title="部署成功"></a>部署成功</h3><p>部署成功后使用新建的GitHub仓库名进行访问</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote><p><a href="http://www.codesheep.cn/">www.codesheep.cn</a></p></blockquote><h3 id="如果发现文章内容有错误请通过页面右上角➡关于我⬅联系我"><a href="#如果发现文章内容有错误请通过页面右上角➡关于我⬅联系我" class="headerlink" title="如果发现文章内容有错误请通过页面右上角➡关于我⬅联系我"></a>如果发现文章内容有错误请通过页面右上角➡关于我⬅联系我</h3>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
